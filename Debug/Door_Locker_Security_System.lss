
Door_Locker_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005164  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d8  00800060  00005164  000051f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800138  00800138  000052d0  2**0
                  ALLOC
  3 .stab         00003ba0  00000000  00000000  000052d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000103e  00000000  00000000  00008e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a15e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bda7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cc92  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000da40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000de2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e5fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 33       	cpi	r26, 0x39	; 57
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <main>
      8a:	0c 94 b0 28 	jmp	0x5160	; 0x5160 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 28 	jmp	0x5068	; 0x5068 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e3       	ldi	r26, 0x30	; 48
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 28 	jmp	0x50a0	; 0x50a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 28 	jmp	0x50b8	; 0x50b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 28 	jmp	0x50b8	; 0x50b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 28 	jmp	0x5068	; 0x5068 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e3       	ldi	r24, 0x30	; 48
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 28 	jmp	0x50a0	; 0x50a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5c 28 	jmp	0x50b8	; 0x50b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5c 28 	jmp	0x50b8	; 0x50b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 40 28 	jmp	0x5080	; 0x5080 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5c 28 	jmp	0x50b8	; 0x50b8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 44 28 	jmp	0x5088	; 0x5088 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 60 28 	jmp	0x50c0	; 0x50c0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c3 56       	subi	r28, 0x63	; 99
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	fe 01       	movw	r30, r28
     b62:	ed 59       	subi	r30, 0x9D	; 157
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_LOW); /* Instruction Mode RS=0 */
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	64 e0       	ldi	r22, 0x04	; 4
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	65 e0       	ldi	r22, 0x05	; 5
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
     b7c:	fe 01       	movw	r30, r28
     b7e:	e1 5a       	subi	r30, 0xA1	; 161
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e8       	ldi	r26, 0x80	; 128
     b88:	bf e3       	ldi	r27, 0x3F	; 63
     b8a:	80 83       	st	Z, r24
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	a2 83       	std	Z+2, r26	; 0x02
     b90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	8e 01       	movw	r16, r28
     b94:	05 5a       	subi	r16, 0xA5	; 165
     b96:	1f 4f       	sbci	r17, 0xFF	; 255
     b98:	fe 01       	movw	r30, r28
     b9a:	e1 5a       	subi	r30, 0xA1	; 161
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	60 81       	ld	r22, Z
     ba0:	71 81       	ldd	r23, Z+1	; 0x01
     ba2:	82 81       	ldd	r24, Z+2	; 0x02
     ba4:	93 81       	ldd	r25, Z+3	; 0x03
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	4a ef       	ldi	r20, 0xFA	; 250
     bac:	54 e4       	ldi	r21, 0x44	; 68
     bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	f8 01       	movw	r30, r16
     bb8:	80 83       	st	Z, r24
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	a2 83       	std	Z+2, r26	; 0x02
     bbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bc0:	fe 01       	movw	r30, r28
     bc2:	e5 5a       	subi	r30, 0xA5	; 165
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	60 81       	ld	r22, Z
     bc8:	71 81       	ldd	r23, Z+1	; 0x01
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	44 f4       	brge	.+16     	; 0xbee <CLCD_voidSendCommand+0xa8>
		__ticks = 1;
     bde:	fe 01       	movw	r30, r28
     be0:	e7 5a       	subi	r30, 0xA7	; 167
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	91 83       	std	Z+1, r25	; 0x01
     bea:	80 83       	st	Z, r24
     bec:	64 c0       	rjmp	.+200    	; 0xcb6 <CLCD_voidSendCommand+0x170>
	else if (__tmp > 65535)
     bee:	fe 01       	movw	r30, r28
     bf0:	e5 5a       	subi	r30, 0xA5	; 165
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	4f e7       	ldi	r20, 0x7F	; 127
     c02:	57 e4       	ldi	r21, 0x47	; 71
     c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c08:	18 16       	cp	r1, r24
     c0a:	0c f0       	brlt	.+2      	; 0xc0e <CLCD_voidSendCommand+0xc8>
     c0c:	43 c0       	rjmp	.+134    	; 0xc94 <CLCD_voidSendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0e:	fe 01       	movw	r30, r28
     c10:	e1 5a       	subi	r30, 0xA1	; 161
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	60 81       	ld	r22, Z
     c16:	71 81       	ldd	r23, Z+1	; 0x01
     c18:	82 81       	ldd	r24, Z+2	; 0x02
     c1a:	93 81       	ldd	r25, Z+3	; 0x03
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	40 e2       	ldi	r20, 0x20	; 32
     c22:	51 e4       	ldi	r21, 0x41	; 65
     c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	8e 01       	movw	r16, r28
     c2e:	07 5a       	subi	r16, 0xA7	; 167
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	f8 01       	movw	r30, r16
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
     c44:	1f c0       	rjmp	.+62     	; 0xc84 <CLCD_voidSendCommand+0x13e>
     c46:	fe 01       	movw	r30, r28
     c48:	e9 5a       	subi	r30, 0xA9	; 169
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	91 83       	std	Z+1, r25	; 0x01
     c52:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	fe 01       	movw	r30, r28
     c56:	e9 5a       	subi	r30, 0xA9	; 169
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 81       	ld	r24, Z
     c5c:	91 81       	ldd	r25, Z+1	; 0x01
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	fe 01       	movw	r30, r28
     c64:	e9 5a       	subi	r30, 0xA9	; 169
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6c:	de 01       	movw	r26, r28
     c6e:	a7 5a       	subi	r26, 0xA7	; 167
     c70:	bf 4f       	sbci	r27, 0xFF	; 255
     c72:	fe 01       	movw	r30, r28
     c74:	e7 5a       	subi	r30, 0xA7	; 167
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c84:	fe 01       	movw	r30, r28
     c86:	e7 5a       	subi	r30, 0xA7	; 167
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	d1 f6       	brne	.-76     	; 0xc46 <CLCD_voidSendCommand+0x100>
     c92:	27 c0       	rjmp	.+78     	; 0xce2 <CLCD_voidSendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c94:	8e 01       	movw	r16, r28
     c96:	07 5a       	subi	r16, 0xA7	; 167
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	fe 01       	movw	r30, r28
     c9c:	e5 5a       	subi	r30, 0xA5	; 165
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	60 81       	ld	r22, Z
     ca2:	71 81       	ldd	r23, Z+1	; 0x01
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	f8 01       	movw	r30, r16
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
     cb6:	de 01       	movw	r26, r28
     cb8:	ab 5a       	subi	r26, 0xAB	; 171
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	e7 5a       	subi	r30, 0xA7	; 167
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	8d 93       	st	X+, r24
     cc8:	9c 93       	st	X, r25
     cca:	fe 01       	movw	r30, r28
     ccc:	eb 5a       	subi	r30, 0xAB	; 171
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <CLCD_voidSendCommand+0x18e>
     cd8:	fe 01       	movw	r30, r28
     cda:	eb 5a       	subi	r30, 0xAB	; 171
     cdc:	ff 4f       	sbci	r31, 0xFF	; 255
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	66 e0       	ldi	r22, 0x06	; 6
     ce6:	41 e0       	ldi	r20, 0x01	; 1
     ce8:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
     cec:	fe 01       	movw	r30, r28
     cee:	ef 5a       	subi	r30, 0xAF	; 175
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e8       	ldi	r26, 0x80	; 128
     cf8:	bf e3       	ldi	r27, 0x3F	; 63
     cfa:	80 83       	st	Z, r24
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	a2 83       	std	Z+2, r26	; 0x02
     d00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d02:	8e 01       	movw	r16, r28
     d04:	03 5b       	subi	r16, 0xB3	; 179
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	fe 01       	movw	r30, r28
     d0a:	ef 5a       	subi	r30, 0xAF	; 175
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	4a ef       	ldi	r20, 0xFA	; 250
     d1c:	54 e4       	ldi	r21, 0x44	; 68
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	f8 01       	movw	r30, r16
     d28:	80 83       	st	Z, r24
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	a2 83       	std	Z+2, r26	; 0x02
     d2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d30:	fe 01       	movw	r30, r28
     d32:	e3 5b       	subi	r30, 0xB3	; 179
     d34:	ff 4f       	sbci	r31, 0xFF	; 255
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e8       	ldi	r20, 0x80	; 128
     d44:	5f e3       	ldi	r21, 0x3F	; 63
     d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	44 f4       	brge	.+16     	; 0xd5e <CLCD_voidSendCommand+0x218>
		__ticks = 1;
     d4e:	fe 01       	movw	r30, r28
     d50:	e5 5b       	subi	r30, 0xB5	; 181
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
     d5c:	64 c0       	rjmp	.+200    	; 0xe26 <CLCD_voidSendCommand+0x2e0>
	else if (__tmp > 65535)
     d5e:	fe 01       	movw	r30, r28
     d60:	e3 5b       	subi	r30, 0xB3	; 179
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	0c f0       	brlt	.+2      	; 0xd7e <CLCD_voidSendCommand+0x238>
     d7c:	43 c0       	rjmp	.+134    	; 0xe04 <CLCD_voidSendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7e:	fe 01       	movw	r30, r28
     d80:	ef 5a       	subi	r30, 0xAF	; 175
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	8e 01       	movw	r16, r28
     d9e:	05 5b       	subi	r16, 0xB5	; 181
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	bc 01       	movw	r22, r24
     da4:	cd 01       	movw	r24, r26
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	f8 01       	movw	r30, r16
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
     db4:	1f c0       	rjmp	.+62     	; 0xdf4 <CLCD_voidSendCommand+0x2ae>
     db6:	fe 01       	movw	r30, r28
     db8:	e7 5b       	subi	r30, 0xB7	; 183
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	91 83       	std	Z+1, r25	; 0x01
     dc2:	80 83       	st	Z, r24
     dc4:	fe 01       	movw	r30, r28
     dc6:	e7 5b       	subi	r30, 0xB7	; 183
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	01 97       	sbiw	r24, 0x01	; 1
     dd0:	f1 f7       	brne	.-4      	; 0xdce <CLCD_voidSendCommand+0x288>
     dd2:	fe 01       	movw	r30, r28
     dd4:	e7 5b       	subi	r30, 0xB7	; 183
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	de 01       	movw	r26, r28
     dde:	a5 5b       	subi	r26, 0xB5	; 181
     de0:	bf 4f       	sbci	r27, 0xFF	; 255
     de2:	fe 01       	movw	r30, r28
     de4:	e5 5b       	subi	r30, 0xB5	; 181
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	11 96       	adiw	r26, 0x01	; 1
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df4:	fe 01       	movw	r30, r28
     df6:	e5 5b       	subi	r30, 0xB5	; 181
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 81       	ld	r24, Z
     dfc:	91 81       	ldd	r25, Z+1	; 0x01
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	d1 f6       	brne	.-76     	; 0xdb6 <CLCD_voidSendCommand+0x270>
     e02:	27 c0       	rjmp	.+78     	; 0xe52 <CLCD_voidSendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	8e 01       	movw	r16, r28
     e06:	05 5b       	subi	r16, 0xB5	; 181
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	fe 01       	movw	r30, r28
     e0c:	e3 5b       	subi	r30, 0xB3	; 179
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	f8 01       	movw	r30, r16
     e22:	91 83       	std	Z+1, r25	; 0x01
     e24:	80 83       	st	Z, r24
     e26:	de 01       	movw	r26, r28
     e28:	a9 5b       	subi	r26, 0xB9	; 185
     e2a:	bf 4f       	sbci	r27, 0xFF	; 255
     e2c:	fe 01       	movw	r30, r28
     e2e:	e5 5b       	subi	r30, 0xB5	; 181
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	8d 93       	st	X+, r24
     e38:	9c 93       	st	X, r25
     e3a:	fe 01       	movw	r30, r28
     e3c:	e9 5b       	subi	r30, 0xB9	; 185
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <CLCD_voidSendCommand+0x2fe>
     e48:	fe 01       	movw	r30, r28
     e4a:	e9 5b       	subi	r30, 0xB9	; 185
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */



#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 4));
     e52:	fe 01       	movw	r30, r28
     e54:	ed 59       	subi	r30, 0x9D	; 157
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	80 81       	ld	r24, Z
     e5a:	82 95       	swap	r24
     e5c:	8f 70       	andi	r24, 0x0F	; 15
     e5e:	98 2f       	mov	r25, r24
     e60:	91 70       	andi	r25, 0x01	; 1
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	49 2f       	mov	r20, r25
     e68:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 5));
     e6c:	fe 01       	movw	r30, r28
     e6e:	ed 59       	subi	r30, 0x9D	; 157
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	82 95       	swap	r24
     e76:	86 95       	lsr	r24
     e78:	87 70       	andi	r24, 0x07	; 7
     e7a:	98 2f       	mov	r25, r24
     e7c:	91 70       	andi	r25, 0x01	; 1
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	49 2f       	mov	r20, r25
     e84:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 6));
     e88:	fe 01       	movw	r30, r28
     e8a:	ed 59       	subi	r30, 0x9D	; 157
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	82 95       	swap	r24
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	83 70       	andi	r24, 0x03	; 3
     e98:	98 2f       	mov	r25, r24
     e9a:	91 70       	andi	r25, 0x01	; 1
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	49 2f       	mov	r20, r25
     ea2:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 7));
     ea6:	fe 01       	movw	r30, r28
     ea8:	ed 59       	subi	r30, 0x9D	; 157
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	80 81       	ld	r24, Z
     eae:	98 2f       	mov	r25, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	99 27       	eor	r25, r25
     eb4:	99 1f       	adc	r25, r25
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	63 e0       	ldi	r22, 0x03	; 3
     eba:	49 2f       	mov	r20, r25
     ebc:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 5b       	subi	r30, 0xBD	; 189
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e8       	ldi	r26, 0x80	; 128
     ecc:	bf e3       	ldi	r27, 0x3F	; 63
     ece:	80 83       	st	Z, r24
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	a2 83       	std	Z+2, r26	; 0x02
     ed4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed6:	8e 01       	movw	r16, r28
     ed8:	01 5c       	subi	r16, 0xC1	; 193
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fe 01       	movw	r30, r28
     ede:	ed 5b       	subi	r30, 0xBD	; 189
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a ef       	ldi	r20, 0xFA	; 250
     ef0:	54 e4       	ldi	r21, 0x44	; 68
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	a2 83       	std	Z+2, r26	; 0x02
     f02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f04:	fe 01       	movw	r30, r28
     f06:	ff 96       	adiw	r30, 0x3f	; 63
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <CLCD_voidSendCommand+0x3e4>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e af       	std	Y+62, r25	; 0x3e
     f26:	8d af       	std	Y+61, r24	; 0x3d
     f28:	46 c0       	rjmp	.+140    	; 0xfb6 <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
     f2a:	fe 01       	movw	r30, r28
     f2c:	ff 96       	adiw	r30, 0x3f	; 63
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	3f ef       	ldi	r19, 0xFF	; 255
     f3a:	4f e7       	ldi	r20, 0x7F	; 127
     f3c:	57 e4       	ldi	r21, 0x47	; 71
     f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f42:	18 16       	cp	r1, r24
     f44:	64 f5       	brge	.+88     	; 0xf9e <CLCD_voidSendCommand+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f46:	fe 01       	movw	r30, r28
     f48:	ed 5b       	subi	r30, 0xBD	; 189
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	60 81       	ld	r22, Z
     f4e:	71 81       	ldd	r23, Z+1	; 0x01
     f50:	82 81       	ldd	r24, Z+2	; 0x02
     f52:	93 81       	ldd	r25, Z+3	; 0x03
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e af       	std	Y+62, r25	; 0x3e
     f72:	8d af       	std	Y+61, r24	; 0x3d
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <CLCD_voidSendCommand+0x44e>
     f76:	88 ec       	ldi	r24, 0xC8	; 200
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c af       	std	Y+60, r25	; 0x3c
     f7c:	8b af       	std	Y+59, r24	; 0x3b
     f7e:	8b ad       	ldd	r24, Y+59	; 0x3b
     f80:	9c ad       	ldd	r25, Y+60	; 0x3c
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <CLCD_voidSendCommand+0x43c>
     f86:	9c af       	std	Y+60, r25	; 0x3c
     f88:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9e af       	std	Y+62, r25	; 0x3e
     f92:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8d ad       	ldd	r24, Y+61	; 0x3d
     f96:	9e ad       	ldd	r25, Y+62	; 0x3e
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <CLCD_voidSendCommand+0x430>
     f9c:	16 c0       	rjmp	.+44     	; 0xfca <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	fe 01       	movw	r30, r28
     fa0:	ff 96       	adiw	r30, 0x3f	; 63
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9e af       	std	Y+62, r25	; 0x3e
     fb4:	8d af       	std	Y+61, r24	; 0x3d
     fb6:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb8:	9e ad       	ldd	r25, Y+62	; 0x3e
     fba:	9a af       	std	Y+58, r25	; 0x3a
     fbc:	89 af       	std	Y+57, r24	; 0x39
     fbe:	89 ad       	ldd	r24, Y+57	; 0x39
     fc0:	9a ad       	ldd	r25, Y+58	; 0x3a
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	f1 f7       	brne	.-4      	; 0xfc2 <CLCD_voidSendCommand+0x47c>
     fc6:	9a af       	std	Y+58, r25	; 0x3a
     fc8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	66 e0       	ldi	r22, 0x06	; 6
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 e8       	ldi	r26, 0x80	; 128
     fda:	bf e3       	ldi	r27, 0x3F	; 63
     fdc:	8d ab       	std	Y+53, r24	; 0x35
     fde:	9e ab       	std	Y+54, r25	; 0x36
     fe0:	af ab       	std	Y+55, r26	; 0x37
     fe2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a ef       	ldi	r20, 0xFA	; 250
     ff2:	54 e4       	ldi	r21, 0x44	; 68
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	89 ab       	std	Y+49, r24	; 0x31
     ffe:	9a ab       	std	Y+50, r25	; 0x32
    1000:	ab ab       	std	Y+51, r26	; 0x33
    1002:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1004:	69 a9       	ldd	r22, Y+49	; 0x31
    1006:	7a a9       	ldd	r23, Y+50	; 0x32
    1008:	8b a9       	ldd	r24, Y+51	; 0x33
    100a:	9c a9       	ldd	r25, Y+52	; 0x34
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <CLCD_voidSendCommand+0x4e0>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	98 ab       	std	Y+48, r25	; 0x30
    1022:	8f a7       	std	Y+47, r24	; 0x2f
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <CLCD_voidSendCommand+0x55e>
	else if (__tmp > 65535)
    1026:	69 a9       	ldd	r22, Y+49	; 0x31
    1028:	7a a9       	ldd	r23, Y+50	; 0x32
    102a:	8b a9       	ldd	r24, Y+51	; 0x33
    102c:	9c a9       	ldd	r25, Y+52	; 0x34
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <CLCD_voidSendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6d a9       	ldd	r22, Y+53	; 0x35
    1040:	7e a9       	ldd	r23, Y+54	; 0x36
    1042:	8f a9       	ldd	r24, Y+55	; 0x37
    1044:	98 ad       	ldd	r25, Y+56	; 0x38
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	98 ab       	std	Y+48, r25	; 0x30
    1064:	8f a7       	std	Y+47, r24	; 0x2f
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <CLCD_voidSendCommand+0x540>
    1068:	88 ec       	ldi	r24, 0xC8	; 200
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9e a7       	std	Y+46, r25	; 0x2e
    106e:	8d a7       	std	Y+45, r24	; 0x2d
    1070:	8d a5       	ldd	r24, Y+45	; 0x2d
    1072:	9e a5       	ldd	r25, Y+46	; 0x2e
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <CLCD_voidSendCommand+0x52e>
    1078:	9e a7       	std	Y+46, r25	; 0x2e
    107a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8f a5       	ldd	r24, Y+47	; 0x2f
    107e:	98 a9       	ldd	r25, Y+48	; 0x30
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8f a5       	ldd	r24, Y+47	; 0x2f
    1088:	98 a9       	ldd	r25, Y+48	; 0x30
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <CLCD_voidSendCommand+0x522>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <CLCD_voidSendCommand+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	69 a9       	ldd	r22, Y+49	; 0x31
    1092:	7a a9       	ldd	r23, Y+50	; 0x32
    1094:	8b a9       	ldd	r24, Y+51	; 0x33
    1096:	9c a9       	ldd	r25, Y+52	; 0x34
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	98 ab       	std	Y+48, r25	; 0x30
    10a2:	8f a7       	std	Y+47, r24	; 0x2f
    10a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a6:	98 a9       	ldd	r25, Y+48	; 0x30
    10a8:	9c a7       	std	Y+44, r25	; 0x2c
    10aa:	8b a7       	std	Y+43, r24	; 0x2b
    10ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <CLCD_voidSendCommand+0x56a>
    10b4:	9c a7       	std	Y+44, r25	; 0x2c
    10b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	66 e0       	ldi	r22, 0x06	; 6
    10bc:	41 e0       	ldi	r20, 0x01	; 1
    10be:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 e8       	ldi	r26, 0x80	; 128
    10c8:	bf e3       	ldi	r27, 0x3F	; 63
    10ca:	8f a3       	std	Y+39, r24	; 0x27
    10cc:	98 a7       	std	Y+40, r25	; 0x28
    10ce:	a9 a7       	std	Y+41, r26	; 0x29
    10d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d2:	6f a1       	ldd	r22, Y+39	; 0x27
    10d4:	78 a5       	ldd	r23, Y+40	; 0x28
    10d6:	89 a5       	ldd	r24, Y+41	; 0x29
    10d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a ef       	ldi	r20, 0xFA	; 250
    10e0:	54 e4       	ldi	r21, 0x44	; 68
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	8b a3       	std	Y+35, r24	; 0x23
    10ec:	9c a3       	std	Y+36, r25	; 0x24
    10ee:	ad a3       	std	Y+37, r26	; 0x25
    10f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f2:	6b a1       	ldd	r22, Y+35	; 0x23
    10f4:	7c a1       	ldd	r23, Y+36	; 0x24
    10f6:	8d a1       	ldd	r24, Y+37	; 0x25
    10f8:	9e a1       	ldd	r25, Y+38	; 0x26
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e8       	ldi	r20, 0x80	; 128
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1106:	88 23       	and	r24, r24
    1108:	2c f4       	brge	.+10     	; 0x1114 <CLCD_voidSendCommand+0x5ce>
		__ticks = 1;
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	9a a3       	std	Y+34, r25	; 0x22
    1110:	89 a3       	std	Y+33, r24	; 0x21
    1112:	3f c0       	rjmp	.+126    	; 0x1192 <CLCD_voidSendCommand+0x64c>
	else if (__tmp > 65535)
    1114:	6b a1       	ldd	r22, Y+35	; 0x23
    1116:	7c a1       	ldd	r23, Y+36	; 0x24
    1118:	8d a1       	ldd	r24, Y+37	; 0x25
    111a:	9e a1       	ldd	r25, Y+38	; 0x26
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	3f ef       	ldi	r19, 0xFF	; 255
    1120:	4f e7       	ldi	r20, 0x7F	; 127
    1122:	57 e4       	ldi	r21, 0x47	; 71
    1124:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1128:	18 16       	cp	r1, r24
    112a:	4c f5       	brge	.+82     	; 0x117e <CLCD_voidSendCommand+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112c:	6f a1       	ldd	r22, Y+39	; 0x27
    112e:	78 a5       	ldd	r23, Y+40	; 0x28
    1130:	89 a5       	ldd	r24, Y+41	; 0x29
    1132:	9a a5       	ldd	r25, Y+42	; 0x2a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e2       	ldi	r20, 0x20	; 32
    113a:	51 e4       	ldi	r21, 0x41	; 65
    113c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	bc 01       	movw	r22, r24
    1146:	cd 01       	movw	r24, r26
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9a a3       	std	Y+34, r25	; 0x22
    1152:	89 a3       	std	Y+33, r24	; 0x21
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <CLCD_voidSendCommand+0x62e>
    1156:	88 ec       	ldi	r24, 0xC8	; 200
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	98 a3       	std	Y+32, r25	; 0x20
    115c:	8f 8f       	std	Y+31, r24	; 0x1f
    115e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1160:	98 a1       	ldd	r25, Y+32	; 0x20
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	f1 f7       	brne	.-4      	; 0x1162 <CLCD_voidSendCommand+0x61c>
    1166:	98 a3       	std	Y+32, r25	; 0x20
    1168:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116a:	89 a1       	ldd	r24, Y+33	; 0x21
    116c:	9a a1       	ldd	r25, Y+34	; 0x22
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9a a3       	std	Y+34, r25	; 0x22
    1172:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1174:	89 a1       	ldd	r24, Y+33	; 0x21
    1176:	9a a1       	ldd	r25, Y+34	; 0x22
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	69 f7       	brne	.-38     	; 0x1156 <CLCD_voidSendCommand+0x610>
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <CLCD_voidSendCommand+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117e:	6b a1       	ldd	r22, Y+35	; 0x23
    1180:	7c a1       	ldd	r23, Y+36	; 0x24
    1182:	8d a1       	ldd	r24, Y+37	; 0x25
    1184:	9e a1       	ldd	r25, Y+38	; 0x26
    1186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	9a a3       	std	Y+34, r25	; 0x22
    1190:	89 a3       	std	Y+33, r24	; 0x21
    1192:	89 a1       	ldd	r24, Y+33	; 0x21
    1194:	9a a1       	ldd	r25, Y+34	; 0x22
    1196:	9e 8f       	std	Y+30, r25	; 0x1e
    1198:	8d 8f       	std	Y+29, r24	; 0x1d
    119a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    119c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <CLCD_voidSendCommand+0x658>
    11a2:	9e 8f       	std	Y+30, r25	; 0x1e
    11a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Command, 0));
    11a6:	fe 01       	movw	r30, r28
    11a8:	ed 59       	subi	r30, 0x9D	; 157
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	98 2f       	mov	r25, r24
    11b0:	91 70       	andi	r25, 0x01	; 1
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	49 2f       	mov	r20, r25
    11b8:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Command, 1));
    11bc:	fe 01       	movw	r30, r28
    11be:	ed 59       	subi	r30, 0x9D	; 157
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	86 95       	lsr	r24
    11c6:	98 2f       	mov	r25, r24
    11c8:	91 70       	andi	r25, 0x01	; 1
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	49 2f       	mov	r20, r25
    11d0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Command, 2));
    11d4:	fe 01       	movw	r30, r28
    11d6:	ed 59       	subi	r30, 0x9D	; 157
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	80 81       	ld	r24, Z
    11dc:	86 95       	lsr	r24
    11de:	86 95       	lsr	r24
    11e0:	98 2f       	mov	r25, r24
    11e2:	91 70       	andi	r25, 0x01	; 1
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	62 e0       	ldi	r22, 0x02	; 2
    11e8:	49 2f       	mov	r20, r25
    11ea:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Command, 3));
    11ee:	fe 01       	movw	r30, r28
    11f0:	ed 59       	subi	r30, 0x9D	; 157
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	86 95       	lsr	r24
    11f8:	86 95       	lsr	r24
    11fa:	86 95       	lsr	r24
    11fc:	98 2f       	mov	r25, r24
    11fe:	91 70       	andi	r25, 0x01	; 1
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	63 e0       	ldi	r22, 0x03	; 3
    1204:	49 2f       	mov	r20, r25
    1206:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e8       	ldi	r26, 0x80	; 128
    1210:	bf e3       	ldi	r27, 0x3F	; 63
    1212:	89 8f       	std	Y+25, r24	; 0x19
    1214:	9a 8f       	std	Y+26, r25	; 0x1a
    1216:	ab 8f       	std	Y+27, r26	; 0x1b
    1218:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121a:	69 8d       	ldd	r22, Y+25	; 0x19
    121c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    121e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1220:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4a ef       	ldi	r20, 0xFA	; 250
    1228:	54 e4       	ldi	r21, 0x44	; 68
    122a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	8d 8b       	std	Y+21, r24	; 0x15
    1234:	9e 8b       	std	Y+22, r25	; 0x16
    1236:	af 8b       	std	Y+23, r26	; 0x17
    1238:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    123a:	6d 89       	ldd	r22, Y+21	; 0x15
    123c:	7e 89       	ldd	r23, Y+22	; 0x16
    123e:	8f 89       	ldd	r24, Y+23	; 0x17
    1240:	98 8d       	ldd	r25, Y+24	; 0x18
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	2c f4       	brge	.+10     	; 0x125c <CLCD_voidSendCommand+0x716>
		__ticks = 1;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9c 8b       	std	Y+20, r25	; 0x14
    1258:	8b 8b       	std	Y+19, r24	; 0x13
    125a:	3f c0       	rjmp	.+126    	; 0x12da <CLCD_voidSendCommand+0x794>
	else if (__tmp > 65535)
    125c:	6d 89       	ldd	r22, Y+21	; 0x15
    125e:	7e 89       	ldd	r23, Y+22	; 0x16
    1260:	8f 89       	ldd	r24, Y+23	; 0x17
    1262:	98 8d       	ldd	r25, Y+24	; 0x18
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	4f e7       	ldi	r20, 0x7F	; 127
    126a:	57 e4       	ldi	r21, 0x47	; 71
    126c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1270:	18 16       	cp	r1, r24
    1272:	4c f5       	brge	.+82     	; 0x12c6 <CLCD_voidSendCommand+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1274:	69 8d       	ldd	r22, Y+25	; 0x19
    1276:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1278:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	bc 01       	movw	r22, r24
    128e:	cd 01       	movw	r24, r26
    1290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	9c 8b       	std	Y+20, r25	; 0x14
    129a:	8b 8b       	std	Y+19, r24	; 0x13
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <CLCD_voidSendCommand+0x776>
    129e:	88 ec       	ldi	r24, 0xC8	; 200
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9a 8b       	std	Y+18, r25	; 0x12
    12a4:	89 8b       	std	Y+17, r24	; 0x11
    12a6:	89 89       	ldd	r24, Y+17	; 0x11
    12a8:	9a 89       	ldd	r25, Y+18	; 0x12
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <CLCD_voidSendCommand+0x764>
    12ae:	9a 8b       	std	Y+18, r25	; 0x12
    12b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	8b 89       	ldd	r24, Y+19	; 0x13
    12b4:	9c 89       	ldd	r25, Y+20	; 0x14
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9c 8b       	std	Y+20, r25	; 0x14
    12ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12bc:	8b 89       	ldd	r24, Y+19	; 0x13
    12be:	9c 89       	ldd	r25, Y+20	; 0x14
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	69 f7       	brne	.-38     	; 0x129e <CLCD_voidSendCommand+0x758>
    12c4:	14 c0       	rjmp	.+40     	; 0x12ee <CLCD_voidSendCommand+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c6:	6d 89       	ldd	r22, Y+21	; 0x15
    12c8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ca:	8f 89       	ldd	r24, Y+23	; 0x17
    12cc:	98 8d       	ldd	r25, Y+24	; 0x18
    12ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9c 8b       	std	Y+20, r25	; 0x14
    12d8:	8b 8b       	std	Y+19, r24	; 0x13
    12da:	8b 89       	ldd	r24, Y+19	; 0x13
    12dc:	9c 89       	ldd	r25, Y+20	; 0x14
    12de:	98 8b       	std	Y+16, r25	; 0x10
    12e0:	8f 87       	std	Y+15, r24	; 0x0f
    12e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e4:	98 89       	ldd	r25, Y+16	; 0x10
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <CLCD_voidSendCommand+0x7a0>
    12ea:	98 8b       	std	Y+16, r25	; 0x10
    12ec:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	66 e0       	ldi	r22, 0x06	; 6
    12f2:	40 e0       	ldi	r20, 0x00	; 0
    12f4:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e8       	ldi	r26, 0x80	; 128
    12fe:	bf e3       	ldi	r27, 0x3F	; 63
    1300:	8b 87       	std	Y+11, r24	; 0x0b
    1302:	9c 87       	std	Y+12, r25	; 0x0c
    1304:	ad 87       	std	Y+13, r26	; 0x0d
    1306:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1308:	6b 85       	ldd	r22, Y+11	; 0x0b
    130a:	7c 85       	ldd	r23, Y+12	; 0x0c
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a ef       	ldi	r20, 0xFA	; 250
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8f 83       	std	Y+7, r24	; 0x07
    1322:	98 87       	std	Y+8, r25	; 0x08
    1324:	a9 87       	std	Y+9, r26	; 0x09
    1326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	2c f4       	brge	.+10     	; 0x134a <CLCD_voidSendCommand+0x804>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	3f c0       	rjmp	.+126    	; 0x13c8 <CLCD_voidSendCommand+0x882>
	else if (__tmp > 65535)
    134a:	6f 81       	ldd	r22, Y+7	; 0x07
    134c:	78 85       	ldd	r23, Y+8	; 0x08
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	9a 85       	ldd	r25, Y+10	; 0x0a
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	57 e4       	ldi	r21, 0x47	; 71
    135a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    135e:	18 16       	cp	r1, r24
    1360:	4c f5       	brge	.+82     	; 0x13b4 <CLCD_voidSendCommand+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <CLCD_voidSendCommand+0x864>
    138c:	88 ec       	ldi	r24, 0xC8	; 200
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <CLCD_voidSendCommand+0x852>
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	69 f7       	brne	.-38     	; 0x138c <CLCD_voidSendCommand+0x846>
    13b2:	14 c0       	rjmp	.+40     	; 0x13dc <CLCD_voidSendCommand+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <CLCD_voidSendCommand+0x88e>
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_u8Command);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=1 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    13dc:	cd 59       	subi	r28, 0x9D	; 157
    13de:	df 4f       	sbci	r29, 0xFF	; 255
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	c3 56       	subi	r28, 0x63	; 99
    1402:	d0 40       	sbci	r29, 0x00	; 0
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	fe 01       	movw	r30, r28
    1410:	ed 59       	subi	r30, 0x9D	; 157
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 83       	st	Z, r24
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_u8PIN_HIGH); /* Data Mode RS=1 */
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	64 e0       	ldi	r22, 0x04	; 4
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_u8PIN_LOW); /* Instruction Mode RW=0 */
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	65 e0       	ldi	r22, 0x05	; 5
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    142a:	fe 01       	movw	r30, r28
    142c:	e1 5a       	subi	r30, 0xA1	; 161
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a0 e8       	ldi	r26, 0x80	; 128
    1436:	bf e3       	ldi	r27, 0x3F	; 63
    1438:	80 83       	st	Z, r24
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	a2 83       	std	Z+2, r26	; 0x02
    143e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1440:	8e 01       	movw	r16, r28
    1442:	05 5a       	subi	r16, 0xA5	; 165
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	fe 01       	movw	r30, r28
    1448:	e1 5a       	subi	r30, 0xA1	; 161
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a ef       	ldi	r20, 0xFA	; 250
    145a:	54 e4       	ldi	r21, 0x44	; 68
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	f8 01       	movw	r30, r16
    1466:	80 83       	st	Z, r24
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	a2 83       	std	Z+2, r26	; 0x02
    146c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    146e:	fe 01       	movw	r30, r28
    1470:	e5 5a       	subi	r30, 0xA5	; 165
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	44 f4       	brge	.+16     	; 0x149c <CLCD_voidSendData+0xa8>
		__ticks = 1;
    148c:	fe 01       	movw	r30, r28
    148e:	e7 5a       	subi	r30, 0xA7	; 167
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
    149a:	64 c0       	rjmp	.+200    	; 0x1564 <CLCD_voidSendData+0x170>
	else if (__tmp > 65535)
    149c:	fe 01       	movw	r30, r28
    149e:	e5 5a       	subi	r30, 0xA5	; 165
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	0c f0       	brlt	.+2      	; 0x14bc <CLCD_voidSendData+0xc8>
    14ba:	43 c0       	rjmp	.+134    	; 0x1542 <CLCD_voidSendData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	fe 01       	movw	r30, r28
    14be:	e1 5a       	subi	r30, 0xA1	; 161
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8e 01       	movw	r16, r28
    14dc:	07 5a       	subi	r16, 0xA7	; 167
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	f8 01       	movw	r30, r16
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	1f c0       	rjmp	.+62     	; 0x1532 <CLCD_voidSendData+0x13e>
    14f4:	fe 01       	movw	r30, r28
    14f6:	e9 5a       	subi	r30, 0xA9	; 169
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	88 ec       	ldi	r24, 0xC8	; 200
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	fe 01       	movw	r30, r28
    1504:	e9 5a       	subi	r30, 0xA9	; 169
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <CLCD_voidSendData+0x118>
    1510:	fe 01       	movw	r30, r28
    1512:	e9 5a       	subi	r30, 0xA9	; 169
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	de 01       	movw	r26, r28
    151c:	a7 5a       	subi	r26, 0xA7	; 167
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	e7 5a       	subi	r30, 0xA7	; 167
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	11 96       	adiw	r26, 0x01	; 1
    152e:	9c 93       	st	X, r25
    1530:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1532:	fe 01       	movw	r30, r28
    1534:	e7 5a       	subi	r30, 0xA7	; 167
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	d1 f6       	brne	.-76     	; 0x14f4 <CLCD_voidSendData+0x100>
    1540:	27 c0       	rjmp	.+78     	; 0x1590 <CLCD_voidSendData+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	8e 01       	movw	r16, r28
    1544:	07 5a       	subi	r16, 0xA7	; 167
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	fe 01       	movw	r30, r28
    154a:	e5 5a       	subi	r30, 0xA5	; 165
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	f8 01       	movw	r30, r16
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	de 01       	movw	r26, r28
    1566:	ab 5a       	subi	r26, 0xAB	; 171
    1568:	bf 4f       	sbci	r27, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	e7 5a       	subi	r30, 0xA7	; 167
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	8d 93       	st	X+, r24
    1576:	9c 93       	st	X, r25
    1578:	fe 01       	movw	r30, r28
    157a:	eb 5a       	subi	r30, 0xAB	; 171
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <CLCD_voidSendData+0x18e>
    1586:	fe 01       	movw	r30, r28
    1588:	eb 5a       	subi	r30, 0xAB	; 171
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Enable LCD E=1 */
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	66 e0       	ldi	r22, 0x06	; 6
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    159a:	fe 01       	movw	r30, r28
    159c:	ef 5a       	subi	r30, 0xAF	; 175
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a0 e8       	ldi	r26, 0x80	; 128
    15a6:	bf e3       	ldi	r27, 0x3F	; 63
    15a8:	80 83       	st	Z, r24
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	a2 83       	std	Z+2, r26	; 0x02
    15ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b0:	8e 01       	movw	r16, r28
    15b2:	03 5b       	subi	r16, 0xB3	; 179
    15b4:	1f 4f       	sbci	r17, 0xFF	; 255
    15b6:	fe 01       	movw	r30, r28
    15b8:	ef 5a       	subi	r30, 0xAF	; 175
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a ef       	ldi	r20, 0xFA	; 250
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	f8 01       	movw	r30, r16
    15d6:	80 83       	st	Z, r24
    15d8:	91 83       	std	Z+1, r25	; 0x01
    15da:	a2 83       	std	Z+2, r26	; 0x02
    15dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15de:	fe 01       	movw	r30, r28
    15e0:	e3 5b       	subi	r30, 0xB3	; 179
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	44 f4       	brge	.+16     	; 0x160c <CLCD_voidSendData+0x218>
		__ticks = 1;
    15fc:	fe 01       	movw	r30, r28
    15fe:	e5 5b       	subi	r30, 0xB5	; 181
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	64 c0       	rjmp	.+200    	; 0x16d4 <CLCD_voidSendData+0x2e0>
	else if (__tmp > 65535)
    160c:	fe 01       	movw	r30, r28
    160e:	e3 5b       	subi	r30, 0xB3	; 179
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	3f ef       	ldi	r19, 0xFF	; 255
    161e:	4f e7       	ldi	r20, 0x7F	; 127
    1620:	57 e4       	ldi	r21, 0x47	; 71
    1622:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1626:	18 16       	cp	r1, r24
    1628:	0c f0       	brlt	.+2      	; 0x162c <CLCD_voidSendData+0x238>
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <CLCD_voidSendData+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	fe 01       	movw	r30, r28
    162e:	ef 5a       	subi	r30, 0xAF	; 175
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	60 81       	ld	r22, Z
    1634:	71 81       	ldd	r23, Z+1	; 0x01
    1636:	82 81       	ldd	r24, Z+2	; 0x02
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8e 01       	movw	r16, r28
    164c:	05 5b       	subi	r16, 0xB5	; 181
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	f8 01       	movw	r30, r16
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	1f c0       	rjmp	.+62     	; 0x16a2 <CLCD_voidSendData+0x2ae>
    1664:	fe 01       	movw	r30, r28
    1666:	e7 5b       	subi	r30, 0xB7	; 183
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	88 ec       	ldi	r24, 0xC8	; 200
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	80 83       	st	Z, r24
    1672:	fe 01       	movw	r30, r28
    1674:	e7 5b       	subi	r30, 0xB7	; 183
    1676:	ff 4f       	sbci	r31, 0xFF	; 255
    1678:	80 81       	ld	r24, Z
    167a:	91 81       	ldd	r25, Z+1	; 0x01
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <CLCD_voidSendData+0x288>
    1680:	fe 01       	movw	r30, r28
    1682:	e7 5b       	subi	r30, 0xB7	; 183
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168a:	de 01       	movw	r26, r28
    168c:	a5 5b       	subi	r26, 0xB5	; 181
    168e:	bf 4f       	sbci	r27, 0xFF	; 255
    1690:	fe 01       	movw	r30, r28
    1692:	e5 5b       	subi	r30, 0xB5	; 181
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 81       	ld	r24, Z
    1698:	91 81       	ldd	r25, Z+1	; 0x01
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	11 96       	adiw	r26, 0x01	; 1
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	fe 01       	movw	r30, r28
    16a4:	e5 5b       	subi	r30, 0xB5	; 181
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	d1 f6       	brne	.-76     	; 0x1664 <CLCD_voidSendData+0x270>
    16b0:	27 c0       	rjmp	.+78     	; 0x1700 <CLCD_voidSendData+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	8e 01       	movw	r16, r28
    16b4:	05 5b       	subi	r16, 0xB5	; 181
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	fe 01       	movw	r30, r28
    16ba:	e3 5b       	subi	r30, 0xB3	; 179
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
    16d4:	de 01       	movw	r26, r28
    16d6:	a9 5b       	subi	r26, 0xB9	; 185
    16d8:	bf 4f       	sbci	r27, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	e5 5b       	subi	r30, 0xB5	; 181
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	8d 93       	st	X+, r24
    16e6:	9c 93       	st	X, r25
    16e8:	fe 01       	movw	r30, r28
    16ea:	e9 5b       	subi	r30, 0xB9	; 185
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <CLCD_voidSendData+0x2fe>
    16f6:	fe 01       	movw	r30, r28
    16f8:	e9 5b       	subi	r30, 0xB9	; 185
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (CLCD_DATA_BITS_MODE == 4)
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 4));
    1700:	fe 01       	movw	r30, r28
    1702:	ed 59       	subi	r30, 0x9D	; 157
    1704:	ff 4f       	sbci	r31, 0xFF	; 255
    1706:	80 81       	ld	r24, Z
    1708:	82 95       	swap	r24
    170a:	8f 70       	andi	r24, 0x0F	; 15
    170c:	98 2f       	mov	r25, r24
    170e:	91 70       	andi	r25, 0x01	; 1
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	49 2f       	mov	r20, r25
    1716:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 5));
    171a:	fe 01       	movw	r30, r28
    171c:	ed 59       	subi	r30, 0x9D	; 157
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	82 95       	swap	r24
    1724:	86 95       	lsr	r24
    1726:	87 70       	andi	r24, 0x07	; 7
    1728:	98 2f       	mov	r25, r24
    172a:	91 70       	andi	r25, 0x01	; 1
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	49 2f       	mov	r20, r25
    1732:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 6));
    1736:	fe 01       	movw	r30, r28
    1738:	ed 59       	subi	r30, 0x9D	; 157
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	82 95       	swap	r24
    1740:	86 95       	lsr	r24
    1742:	86 95       	lsr	r24
    1744:	83 70       	andi	r24, 0x03	; 3
    1746:	98 2f       	mov	r25, r24
    1748:	91 70       	andi	r25, 0x01	; 1
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	62 e0       	ldi	r22, 0x02	; 2
    174e:	49 2f       	mov	r20, r25
    1750:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 7));
    1754:	fe 01       	movw	r30, r28
    1756:	ed 59       	subi	r30, 0x9D	; 157
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	98 2f       	mov	r25, r24
    175e:	99 1f       	adc	r25, r25
    1760:	99 27       	eor	r25, r25
    1762:	99 1f       	adc	r25, r25
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	63 e0       	ldi	r22, 0x03	; 3
    1768:	49 2f       	mov	r20, r25
    176a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    176e:	fe 01       	movw	r30, r28
    1770:	ed 5b       	subi	r30, 0xBD	; 189
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e8       	ldi	r26, 0x80	; 128
    177a:	bf e3       	ldi	r27, 0x3F	; 63
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	8e 01       	movw	r16, r28
    1786:	01 5c       	subi	r16, 0xC1	; 193
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	fe 01       	movw	r30, r28
    178c:	ed 5b       	subi	r30, 0xBD	; 189
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a ef       	ldi	r20, 0xFA	; 250
    179e:	54 e4       	ldi	r21, 0x44	; 68
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 83       	st	Z, r24
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	a2 83       	std	Z+2, r26	; 0x02
    17b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b2:	fe 01       	movw	r30, r28
    17b4:	ff 96       	adiw	r30, 0x3f	; 63
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e8       	ldi	r20, 0x80	; 128
    17c4:	5f e3       	ldi	r21, 0x3F	; 63
    17c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	2c f4       	brge	.+10     	; 0x17d8 <CLCD_voidSendData+0x3e4>
		__ticks = 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	9e af       	std	Y+62, r25	; 0x3e
    17d4:	8d af       	std	Y+61, r24	; 0x3d
    17d6:	46 c0       	rjmp	.+140    	; 0x1864 <CLCD_voidSendData+0x470>
	else if (__tmp > 65535)
    17d8:	fe 01       	movw	r30, r28
    17da:	ff 96       	adiw	r30, 0x3f	; 63
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	64 f5       	brge	.+88     	; 0x184c <CLCD_voidSendData+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	fe 01       	movw	r30, r28
    17f6:	ed 5b       	subi	r30, 0xBD	; 189
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e af       	std	Y+62, r25	; 0x3e
    1820:	8d af       	std	Y+61, r24	; 0x3d
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <CLCD_voidSendData+0x44e>
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c af       	std	Y+60, r25	; 0x3c
    182a:	8b af       	std	Y+59, r24	; 0x3b
    182c:	8b ad       	ldd	r24, Y+59	; 0x3b
    182e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <CLCD_voidSendData+0x43c>
    1834:	9c af       	std	Y+60, r25	; 0x3c
    1836:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d ad       	ldd	r24, Y+61	; 0x3d
    183a:	9e ad       	ldd	r25, Y+62	; 0x3e
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e af       	std	Y+62, r25	; 0x3e
    1840:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d ad       	ldd	r24, Y+61	; 0x3d
    1844:	9e ad       	ldd	r25, Y+62	; 0x3e
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <CLCD_voidSendData+0x430>
    184a:	16 c0       	rjmp	.+44     	; 0x1878 <CLCD_voidSendData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	fe 01       	movw	r30, r28
    184e:	ff 96       	adiw	r30, 0x3f	; 63
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9e af       	std	Y+62, r25	; 0x3e
    1862:	8d af       	std	Y+61, r24	; 0x3d
    1864:	8d ad       	ldd	r24, Y+61	; 0x3d
    1866:	9e ad       	ldd	r25, Y+62	; 0x3e
    1868:	9a af       	std	Y+58, r25	; 0x3a
    186a:	89 af       	std	Y+57, r24	; 0x39
    186c:	89 ad       	ldd	r24, Y+57	; 0x39
    186e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <CLCD_voidSendData+0x47c>
    1874:	9a af       	std	Y+58, r25	; 0x3a
    1876:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW); /* Disable LCD E=0 */
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	66 e0       	ldi	r22, 0x06	; 6
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e8       	ldi	r26, 0x80	; 128
    1888:	bf e3       	ldi	r27, 0x3F	; 63
    188a:	8d ab       	std	Y+53, r24	; 0x35
    188c:	9e ab       	std	Y+54, r25	; 0x36
    188e:	af ab       	std	Y+55, r26	; 0x37
    1890:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6d a9       	ldd	r22, Y+53	; 0x35
    1894:	7e a9       	ldd	r23, Y+54	; 0x36
    1896:	8f a9       	ldd	r24, Y+55	; 0x37
    1898:	98 ad       	ldd	r25, Y+56	; 0x38
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	89 ab       	std	Y+49, r24	; 0x31
    18ac:	9a ab       	std	Y+50, r25	; 0x32
    18ae:	ab ab       	std	Y+51, r26	; 0x33
    18b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18b2:	69 a9       	ldd	r22, Y+49	; 0x31
    18b4:	7a a9       	ldd	r23, Y+50	; 0x32
    18b6:	8b a9       	ldd	r24, Y+51	; 0x33
    18b8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <CLCD_voidSendData+0x4e0>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <CLCD_voidSendData+0x55e>
	else if (__tmp > 65535)
    18d4:	69 a9       	ldd	r22, Y+49	; 0x31
    18d6:	7a a9       	ldd	r23, Y+50	; 0x32
    18d8:	8b a9       	ldd	r24, Y+51	; 0x33
    18da:	9c a9       	ldd	r25, Y+52	; 0x34
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <CLCD_voidSendData+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6d a9       	ldd	r22, Y+53	; 0x35
    18ee:	7e a9       	ldd	r23, Y+54	; 0x36
    18f0:	8f a9       	ldd	r24, Y+55	; 0x37
    18f2:	98 ad       	ldd	r25, Y+56	; 0x38
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <CLCD_voidSendData+0x540>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9e a7       	std	Y+46, r25	; 0x2e
    191c:	8d a7       	std	Y+45, r24	; 0x2d
    191e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1920:	9e a5       	ldd	r25, Y+46	; 0x2e
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <CLCD_voidSendData+0x52e>
    1926:	9e a7       	std	Y+46, r25	; 0x2e
    1928:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8f a5       	ldd	r24, Y+47	; 0x2f
    192c:	98 a9       	ldd	r25, Y+48	; 0x30
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8f a5       	ldd	r24, Y+47	; 0x2f
    1936:	98 a9       	ldd	r25, Y+48	; 0x30
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <CLCD_voidSendData+0x522>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <CLCD_voidSendData+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	69 a9       	ldd	r22, Y+49	; 0x31
    1940:	7a a9       	ldd	r23, Y+50	; 0x32
    1942:	8b a9       	ldd	r24, Y+51	; 0x33
    1944:	9c a9       	ldd	r25, Y+52	; 0x34
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	9c a7       	std	Y+44, r25	; 0x2c
    1958:	8b a7       	std	Y+43, r24	; 0x2b
    195a:	8b a5       	ldd	r24, Y+43	; 0x2b
    195c:	9c a5       	ldd	r25, Y+44	; 0x2c
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <CLCD_voidSendData+0x56a>
    1962:	9c a7       	std	Y+44, r25	; 0x2c
    1964:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_HIGH); /* Disable LCD E=1 */
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	66 e0       	ldi	r22, 0x06	; 6
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a0 e8       	ldi	r26, 0x80	; 128
    1976:	bf e3       	ldi	r27, 0x3F	; 63
    1978:	8f a3       	std	Y+39, r24	; 0x27
    197a:	98 a7       	std	Y+40, r25	; 0x28
    197c:	a9 a7       	std	Y+41, r26	; 0x29
    197e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1980:	6f a1       	ldd	r22, Y+39	; 0x27
    1982:	78 a5       	ldd	r23, Y+40	; 0x28
    1984:	89 a5       	ldd	r24, Y+41	; 0x29
    1986:	9a a5       	ldd	r25, Y+42	; 0x2a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a ef       	ldi	r20, 0xFA	; 250
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8b a3       	std	Y+35, r24	; 0x23
    199a:	9c a3       	std	Y+36, r25	; 0x24
    199c:	ad a3       	std	Y+37, r26	; 0x25
    199e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19a0:	6b a1       	ldd	r22, Y+35	; 0x23
    19a2:	7c a1       	ldd	r23, Y+36	; 0x24
    19a4:	8d a1       	ldd	r24, Y+37	; 0x25
    19a6:	9e a1       	ldd	r25, Y+38	; 0x26
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	40 e8       	ldi	r20, 0x80	; 128
    19ae:	5f e3       	ldi	r21, 0x3F	; 63
    19b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b4:	88 23       	and	r24, r24
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <CLCD_voidSendData+0x5ce>
		__ticks = 1;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9a a3       	std	Y+34, r25	; 0x22
    19be:	89 a3       	std	Y+33, r24	; 0x21
    19c0:	3f c0       	rjmp	.+126    	; 0x1a40 <CLCD_voidSendData+0x64c>
	else if (__tmp > 65535)
    19c2:	6b a1       	ldd	r22, Y+35	; 0x23
    19c4:	7c a1       	ldd	r23, Y+36	; 0x24
    19c6:	8d a1       	ldd	r24, Y+37	; 0x25
    19c8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	4f e7       	ldi	r20, 0x7F	; 127
    19d0:	57 e4       	ldi	r21, 0x47	; 71
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d6:	18 16       	cp	r1, r24
    19d8:	4c f5       	brge	.+82     	; 0x1a2c <CLCD_voidSendData+0x638>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19da:	6f a1       	ldd	r22, Y+39	; 0x27
    19dc:	78 a5       	ldd	r23, Y+40	; 0x28
    19de:	89 a5       	ldd	r24, Y+41	; 0x29
    19e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e2       	ldi	r20, 0x20	; 32
    19e8:	51 e4       	ldi	r21, 0x41	; 65
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a a3       	std	Y+34, r25	; 0x22
    1a00:	89 a3       	std	Y+33, r24	; 0x21
    1a02:	0f c0       	rjmp	.+30     	; 0x1a22 <CLCD_voidSendData+0x62e>
    1a04:	88 ec       	ldi	r24, 0xC8	; 200
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	98 a3       	std	Y+32, r25	; 0x20
    1a0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <CLCD_voidSendData+0x61c>
    1a14:	98 a3       	std	Y+32, r25	; 0x20
    1a16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	89 a1       	ldd	r24, Y+33	; 0x21
    1a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	9a a3       	std	Y+34, r25	; 0x22
    1a20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a22:	89 a1       	ldd	r24, Y+33	; 0x21
    1a24:	9a a1       	ldd	r25, Y+34	; 0x22
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <CLCD_voidSendData+0x610>
    1a2a:	14 c0       	rjmp	.+40     	; 0x1a54 <CLCD_voidSendData+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a30:	8d a1       	ldd	r24, Y+37	; 0x25
    1a32:	9e a1       	ldd	r25, Y+38	; 0x26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	9a a3       	std	Y+34, r25	; 0x22
    1a3e:	89 a3       	std	Y+33, r24	; 0x21
    1a40:	89 a1       	ldd	r24, Y+33	; 0x21
    1a42:	9a a1       	ldd	r25, Y+34	; 0x22
    1a44:	9e 8f       	std	Y+30, r25	; 0x1e
    1a46:	8d 8f       	std	Y+29, r24	; 0x1d
    1a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <CLCD_voidSendData+0x658>
    1a50:	9e 8f       	std	Y+30, r25	; 0x1e
    1a52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4_PIN, GET_BIT(Copy_u8Data, 0));
    1a54:	fe 01       	movw	r30, r28
    1a56:	ed 59       	subi	r30, 0x9D	; 157
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	98 2f       	mov	r25, r24
    1a5e:	91 70       	andi	r25, 0x01	; 1
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	49 2f       	mov	r20, r25
    1a66:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5_PIN, GET_BIT(Copy_u8Data, 1));
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 59       	subi	r30, 0x9D	; 157
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	86 95       	lsr	r24
    1a74:	98 2f       	mov	r25, r24
    1a76:	91 70       	andi	r25, 0x01	; 1
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	49 2f       	mov	r20, r25
    1a7e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6_PIN, GET_BIT(Copy_u8Data, 2));
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 59       	subi	r30, 0x9D	; 157
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	86 95       	lsr	r24
    1a8c:	86 95       	lsr	r24
    1a8e:	98 2f       	mov	r25, r24
    1a90:	91 70       	andi	r25, 0x01	; 1
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	49 2f       	mov	r20, r25
    1a98:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7_PIN, GET_BIT(Copy_u8Data, 3));
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ed 59       	subi	r30, 0x9D	; 157
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	86 95       	lsr	r24
    1aaa:	98 2f       	mov	r25, r24
    1aac:	91 70       	andi	r25, 0x01	; 1
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	49 2f       	mov	r20, r25
    1ab4:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e8       	ldi	r26, 0x80	; 128
    1abe:	bf e3       	ldi	r27, 0x3F	; 63
    1ac0:	89 8f       	std	Y+25, r24	; 0x19
    1ac2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a ef       	ldi	r20, 0xFA	; 250
    1ad6:	54 e4       	ldi	r21, 0x44	; 68
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8d 8b       	std	Y+21, r24	; 0x15
    1ae2:	9e 8b       	std	Y+22, r25	; 0x16
    1ae4:	af 8b       	std	Y+23, r26	; 0x17
    1ae6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ae8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aea:	7e 89       	ldd	r23, Y+22	; 0x16
    1aec:	8f 89       	ldd	r24, Y+23	; 0x17
    1aee:	98 8d       	ldd	r25, Y+24	; 0x18
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <CLCD_voidSendData+0x716>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <CLCD_voidSendData+0x794>
	else if (__tmp > 65535)
    1b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b10:	98 8d       	ldd	r25, Y+24	; 0x18
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <CLCD_voidSendData+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	69 8d       	ldd	r22, Y+25	; 0x19
    1b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9c 8b       	std	Y+20, r25	; 0x14
    1b48:	8b 8b       	std	Y+19, r24	; 0x13
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <CLCD_voidSendData+0x776>
    1b4c:	88 ec       	ldi	r24, 0xC8	; 200
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9a 8b       	std	Y+18, r25	; 0x12
    1b52:	89 8b       	std	Y+17, r24	; 0x11
    1b54:	89 89       	ldd	r24, Y+17	; 0x11
    1b56:	9a 89       	ldd	r25, Y+18	; 0x12
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <CLCD_voidSendData+0x764>
    1b5c:	9a 8b       	std	Y+18, r25	; 0x12
    1b5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9c 8b       	std	Y+20, r25	; 0x14
    1b68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <CLCD_voidSendData+0x758>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <CLCD_voidSendData+0x7a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6d 89       	ldd	r22, Y+21	; 0x15
    1b76:	7e 89       	ldd	r23, Y+22	; 0x16
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9c 8b       	std	Y+20, r25	; 0x14
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8c:	98 8b       	std	Y+16, r25	; 0x10
    1b8e:	8f 87       	std	Y+15, r24	; 0x0f
    1b90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b92:	98 89       	ldd	r25, Y+16	; 0x10
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <CLCD_voidSendData+0x7a0>
    1b98:	98 8b       	std	Y+16, r25	; 0x10
    1b9a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	66 e0       	ldi	r22, 0x06	; 6
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e8       	ldi	r26, 0x80	; 128
    1bac:	bf e3       	ldi	r27, 0x3F	; 63
    1bae:	8b 87       	std	Y+11, r24	; 0x0b
    1bb0:	9c 87       	std	Y+12, r25	; 0x0c
    1bb2:	ad 87       	std	Y+13, r26	; 0x0d
    1bb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a ef       	ldi	r20, 0xFA	; 250
    1bc4:	54 e4       	ldi	r21, 0x44	; 68
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	8f 83       	std	Y+7, r24	; 0x07
    1bd0:	98 87       	std	Y+8, r25	; 0x08
    1bd2:	a9 87       	std	Y+9, r26	; 0x09
    1bd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <CLCD_voidSendData+0x804>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9e 83       	std	Y+6, r25	; 0x06
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
    1bf6:	3f c0       	rjmp	.+126    	; 0x1c76 <CLCD_voidSendData+0x882>
	else if (__tmp > 65535)
    1bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfa:	78 85       	ldd	r23, Y+8	; 0x08
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	4c f5       	brge	.+82     	; 0x1c62 <CLCD_voidSendData+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e2       	ldi	r20, 0x20	; 32
    1c1e:	51 e4       	ldi	r21, 0x41	; 65
    1c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	bc 01       	movw	r22, r24
    1c2a:	cd 01       	movw	r24, r26
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <CLCD_voidSendData+0x864>
    1c3a:	88 ec       	ldi	r24, 0xC8	; 200
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	8b 83       	std	Y+3, r24	; 0x03
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <CLCD_voidSendData+0x852>
    1c4a:	9c 83       	std	Y+4, r25	; 0x04
    1c4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	9e 83       	std	Y+6, r25	; 0x06
    1c56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	69 f7       	brne	.-38     	; 0x1c3a <CLCD_voidSendData+0x846>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <CLCD_voidSendData+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <CLCD_voidSendData+0x88e>
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortValue(CLCD_DATA_PORT, Copy_U8Data);
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_u8SetPinValue(CLCD_CTRL_PORT , CLCD_E_PIN , DIO_u8PIN_LOW);
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c8a:	cd 59       	subi	r28, 0x9D	; 157
    1c8c:	df 4f       	sbci	r29, 0xFF	; 255
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	2e 97       	sbiw	r28, 0x0e	; 14
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS , E and RW pins as output pins */
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_OUTPUT);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	64 e0       	ldi	r22, 0x04	; 4
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_OUTPUT);
    1cc0:	82 e0       	ldi	r24, 0x02	; 2
    1cc2:	65 e0       	ldi	r22, 0x05	; 5
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_OUTPUT);
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	66 e0       	ldi	r22, 0x06	; 6
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a0 ea       	ldi	r26, 0xA0	; 160
    1cda:	b1 e4       	ldi	r27, 0x41	; 65
    1cdc:	8b 87       	std	Y+11, r24	; 0x0b
    1cde:	9c 87       	std	Y+12, r25	; 0x0c
    1ce0:	ad 87       	std	Y+13, r26	; 0x0d
    1ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a ef       	ldi	r20, 0xFA	; 250
    1cf2:	54 e4       	ldi	r21, 0x44	; 68
    1cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8f 83       	std	Y+7, r24	; 0x07
    1cfe:	98 87       	std	Y+8, r25	; 0x08
    1d00:	a9 87       	std	Y+9, r26	; 0x09
    1d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d04:	6f 81       	ldd	r22, Y+7	; 0x07
    1d06:	78 85       	ldd	r23, Y+8	; 0x08
    1d08:	89 85       	ldd	r24, Y+9	; 0x09
    1d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d18:	88 23       	and	r24, r24
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <CLCD_voidInit+0x84>
		__ticks = 1;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	3f c0       	rjmp	.+126    	; 0x1da4 <CLCD_voidInit+0x102>
	else if (__tmp > 65535)
    1d26:	6f 81       	ldd	r22, Y+7	; 0x07
    1d28:	78 85       	ldd	r23, Y+8	; 0x08
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	3f ef       	ldi	r19, 0xFF	; 255
    1d32:	4f e7       	ldi	r20, 0x7F	; 127
    1d34:	57 e4       	ldi	r21, 0x47	; 71
    1d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3a:	18 16       	cp	r1, r24
    1d3c:	4c f5       	brge	.+82     	; 0x1d90 <CLCD_voidInit+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e2       	ldi	r20, 0x20	; 32
    1d4c:	51 e4       	ldi	r21, 0x41	; 65
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	0f c0       	rjmp	.+30     	; 0x1d86 <CLCD_voidInit+0xe4>
    1d68:	88 ec       	ldi	r24, 0xC8	; 200
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9c 83       	std	Y+4, r25	; 0x04
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <CLCD_voidInit+0xd2>
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	9e 83       	std	Y+6, r25	; 0x06
    1d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	69 f7       	brne	.-38     	; 0x1d68 <CLCD_voidInit+0xc6>
    1d8e:	14 c0       	rjmp	.+40     	; 0x1db8 <CLCD_voidInit+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d90:	6f 81       	ldd	r22, Y+7	; 0x07
    1d92:	78 85       	ldd	r23, Y+8	; 0x08
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <CLCD_voidInit+0x10e>
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if (CLCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D4_PIN,DIO_u8PIN_OUTPUT);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D5_PIN,DIO_u8PIN_OUTPUT);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	61 e0       	ldi	r22, 0x01	; 1
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D6_PIN,DIO_u8PIN_OUTPUT);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(CLCD_DATA_PORT,CLCD_D7_PIN,DIO_u8PIN_OUTPUT);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	63 e0       	ldi	r22, 0x03	; 3
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1de0:	83 e3       	ldi	r24, 0x33	; 51
    1de2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1de6:	82 e3       	ldi	r24, 0x32	; 50
    1de8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1dec:	88 e2       	ldi	r24, 0x28	; 40
    1dee:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	CLCD_voidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

	CLCD_voidSendCommand(LCD_CURSOR_OFF);    /* cursor off */
    1df2:	8c e0       	ldi	r24, 0x0C	; 12
    1df4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    1dfe:	2e 96       	adiw	r28, 0x0e	; 14
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <CLCD_voidSendString+0x6>
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1e20:	19 82       	std	Y+1, r1	; 0x01
    1e22:	0e c0       	rjmp	.+28     	; 0x1e40 <CLCD_voidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	fc 01       	movw	r30, r24
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	80 81       	ld	r24, Z
    1e36:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
		Local_u8Counter++;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8f 5f       	subi	r24, 0xFF	; 255
    1e3e:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f3 1f       	adc	r31, r19
    1e50:	80 81       	ld	r24, Z
    1e52:	88 23       	and	r24, r24
    1e54:	39 f7       	brne	.-50     	; 0x1e24 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <CLCD_voidGoToXY+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <CLCD_voidGoToXY+0x8>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8XPos) {
    1e72:	89 81       	ldd	r24, Y+1	; 0x01
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	3c 83       	std	Y+4, r19	; 0x04
    1e7a:	2b 83       	std	Y+3, r18	; 0x03
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	91 05       	cpc	r25, r1
    1e84:	d1 f0       	breq	.+52     	; 0x1eba <CLCD_voidGoToXY+0x58>
    1e86:	2b 81       	ldd	r18, Y+3	; 0x03
    1e88:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <CLCD_voidGoToXY+0x38>
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	61 f0       	breq	.+24     	; 0x1eb0 <CLCD_voidGoToXY+0x4e>
    1e98:	1d c0       	rjmp	.+58     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	22 30       	cpi	r18, 0x02	; 2
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <CLCD_voidGoToXY+0x62>
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	79 f0       	breq	.+30     	; 0x1ecc <CLCD_voidGoToXY+0x6a>
    1eae:	12 c0       	rjmp	.+36     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
	case 0:
		CLCD_voidSendCommand(128 + Copy_u8YPos);
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	80 58       	subi	r24, 0x80	; 128
    1eb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1eb8:	0d c0       	rjmp	.+26     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
		break;
	case 1:
		CLCD_voidSendCommand(192 + Copy_u8YPos);
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	80 54       	subi	r24, 0x40	; 64
    1ebe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1ec2:	08 c0       	rjmp	.+16     	; 0x1ed4 <CLCD_voidGoToXY+0x72>
		break;
	case 2:
		CLCD_voidSendCommand(256 + Copy_u8YPos);
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <CLCD_voidGoToXY+0x72>
		break;
	case 3:
		CLCD_voidSendCommand(320 + Copy_u8YPos);
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	80 5c       	subi	r24, 0xC0	; 192
    1ed0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	default:
		//
		break;

	}
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <CLCD_voidSendStringGoToXY>:

void CLCD_voidSendStringGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos,const char* Copy_pcString)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <CLCD_voidSendStringGoToXY+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <CLCD_voidSendStringGoToXY+0x8>
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	6a 83       	std	Y+2, r22	; 0x02
    1ef2:	5c 83       	std	Y+4, r21	; 0x04
    1ef4:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    1efa:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
	CLCD_voidSendString(Copy_pcString);
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	9c 81       	ldd	r25, Y+4	; 0x04
    1f02:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>


}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern , u8 Copy_u8PatternNumber , u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	27 97       	sbiw	r28, 0x07	; 7
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
    1f2c:	6d 83       	std	Y+5, r22	; 0x05
    1f2e:	4e 83       	std	Y+6, r20	; 0x06
    1f30:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress = 0;
    1f32:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;
	u8SateSpecialCharIndx = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 38 01 	sts	0x0138, r24

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
    1f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	80 5c       	subi	r24, 0xC0	; 192
    1f52:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    1f56:	19 82       	std	Y+1, r1	; 0x01
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <CLCD_voidWriteSpecialCharacter+0x62>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	9c 81       	ldd	r25, Y+4	; 0x04
    1f64:	fc 01       	movw	r30, r24
    1f66:	e2 0f       	add	r30, r18
    1f68:	f3 1f       	adc	r31, r19
    1f6a:	80 81       	ld	r24, Z
    1f6c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
	u8SateSpecialCharIndx = 1;

	Local_u8CGRAMAdress = Copy_u8PatternNumber * 8;
	CLCD_voidSendCommand(Local_u8CGRAMAdress + 64);

	for(Local_u8Iterator = 0 ; Local_u8Iterator < 8 ; Local_u8Iterator++)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	8f 5f       	subi	r24, 0xFF	; 255
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	88 30       	cpi	r24, 0x08	; 8
    1f7a:	78 f3       	brcs	.-34     	; 0x1f5a <CLCD_voidWriteSpecialCharacter+0x46>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidGoToXY(Copy_u8XPos , Copy_u8YPos);
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f80:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
	u8SateSpecialCharIndx = 0;
    1f8a:	10 92 38 01 	sts	0x0138, r1
}
    1f8e:	27 96       	adiw	r28, 0x07	; 7
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <CLCD_voidSendNumber>:

void CLCD_voidSendNumber(u32 Copy_u32Number)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	61 97       	sbiw	r28, 0x11	; 17
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	6e 87       	std	Y+14, r22	; 0x0e
    1fb6:	7f 87       	std	Y+15, r23	; 0x0f
    1fb8:	88 8b       	std	Y+16, r24	; 0x10
    1fba:	99 8b       	std	Y+17, r25	; 0x11
	u8 Local_u8DigitNumber;
	s8 Local_s8Counter = -1 , Local_s8Iterator;
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
	u8 Array_Number[CLCD_SIZE_OF_ARRAY];
	do
	{
		Local_s8Counter++;
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	8f 5f       	subi	r24, 0xFF	; 255
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8DigitNumber = Copy_u32Number % 10;
    1fc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fca:	a8 89       	ldd	r26, Y+16	; 0x10
    1fcc:	b9 89       	ldd	r27, Y+17	; 0x11
    1fce:	2a e0       	ldi	r18, 0x0A	; 10
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 12 28 	call	0x5024	; 0x5024 <__udivmodsi4>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	33 27       	eor	r19, r19
    1fea:	27 fd       	sbrc	r18, 7
    1fec:	30 95       	com	r19
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	48 2f       	mov	r20, r24
    1ff2:	40 5d       	subi	r20, 0xD0	; 208
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	04 96       	adiw	r24, 0x04	; 4
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	40 83       	st	Z, r20
		Copy_u32Number /= 10;
    2000:	8e 85       	ldd	r24, Y+14	; 0x0e
    2002:	9f 85       	ldd	r25, Y+15	; 0x0f
    2004:	a8 89       	ldd	r26, Y+16	; 0x10
    2006:	b9 89       	ldd	r27, Y+17	; 0x11
    2008:	2a e0       	ldi	r18, 0x0A	; 10
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 12 28 	call	0x5024	; 0x5024 <__udivmodsi4>
    2018:	da 01       	movw	r26, r20
    201a:	c9 01       	movw	r24, r18
    201c:	8e 87       	std	Y+14, r24	; 0x0e
    201e:	9f 87       	std	Y+15, r25	; 0x0f
    2020:	a8 8b       	std	Y+16, r26	; 0x10
    2022:	b9 8b       	std	Y+17, r27	; 0x11
	}while(Copy_u32Number != 0);
    2024:	8e 85       	ldd	r24, Y+14	; 0x0e
    2026:	9f 85       	ldd	r25, Y+15	; 0x0f
    2028:	a8 89       	ldd	r26, Y+16	; 0x10
    202a:	b9 89       	ldd	r27, Y+17	; 0x11
    202c:	00 97       	sbiw	r24, 0x00	; 0
    202e:	a1 05       	cpc	r26, r1
    2030:	b1 05       	cpc	r27, r1
    2032:	31 f6       	brne	.-116    	; 0x1fc0 <CLCD_voidSendNumber+0x20>
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	10 c0       	rjmp	.+32     	; 0x205a <CLCD_voidSendNumber+0xba>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	33 27       	eor	r19, r19
    2040:	27 fd       	sbrc	r18, 7
    2042:	30 95       	com	r19
    2044:	ce 01       	movw	r24, r28
    2046:	04 96       	adiw	r24, 0x04	; 4
    2048:	fc 01       	movw	r30, r24
    204a:	e2 0f       	add	r30, r18
    204c:	f3 1f       	adc	r31, r19
    204e:	80 81       	ld	r24, Z
    2050:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
		Local_s8Counter++;
		Local_u8DigitNumber = Copy_u32Number % 10;
		Array_Number[Local_s8Counter] = Local_u8DigitNumber + '0';
		Copy_u32Number /= 10;
	}while(Copy_u32Number != 0);
	for(Local_s8Iterator = Local_s8Counter; Local_s8Iterator >= 0; Local_s8Iterator--)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	81 50       	subi	r24, 0x01	; 1
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	88 23       	and	r24, r24
    205e:	6c f7       	brge	.-38     	; 0x203a <CLCD_voidSendNumber+0x9a>
	{
		CLCD_voidSendData(Array_Number[Local_s8Iterator]);
	}
}
    2060:	61 96       	adiw	r28, 0x11	; 17
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <CLCD_voidIntegerToString>:

void CLCD_voidIntegerToString (u8 value)	// Display certain integer value on screen
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	61 97       	sbiw	r28, 0x11	; 17
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	89 8b       	std	Y+17, r24	; 0x11
	u8 number_str[16];
	itoa(value, number_str, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e 01       	movw	r18, r28
    2090:	2f 5f       	subi	r18, 0xFF	; 255
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	b9 01       	movw	r22, r18
    2096:	4a e0       	ldi	r20, 0x0A	; 10
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	0e 94 6b 28 	call	0x50d6	; 0x50d6 <itoa>
	CLCD_voidSendString(number_str);
    209e:	ce 01       	movw	r24, r28
    20a0:	01 96       	adiw	r24, 0x01	; 1
    20a2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
}
    20a6:	61 96       	adiw	r28, 0x11	; 17
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen (void)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(LCD_CLEAR_COMMAND);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    20c6:	cf 91       	pop	r28
    20c8:	df 91       	pop	r29
    20ca:	08 95       	ret

000020cc <DCM_voidInit>:
#include "DCM_interface.h"
#include "DCM_private.h"


void DCM_voidInit(void)
{
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
	/* Set The DC motor pins an output pins */
	DIO_u8SetPinDirection(DCM_PORT,DCM_PIN0,DIO_u8PIN_OUTPUT);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DCM_PORT,DCM_PIN1,DIO_u8PIN_OUTPUT);
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	61 e0       	ldi	r22, 0x01	; 1
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>


	/* Set initial value zero for The Dc motor */
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>

	/* Initial the time FAST PWM with Prescaler F_CPU_8 */
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <DCM_voidCW>:

void DCM_voidCW(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_HIGH);
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
}
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <DCM_voidCCW>:


void DCM_voidCCW(void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_HIGH);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	61 e0       	ldi	r22, 0x01	; 1
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <DCM_voidRotate>:

void DCM_voidRotate( u8 Local_u8State )
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	0f 92       	push	r0
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	89 83       	std	Y+1, r24	; 0x01
	 /* Choose DC motor movement */
	if(Local_u8State == CW_STATE)
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	59 f4       	brne	.+22     	; 0x216e <DCM_voidRotate+0x28>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	61 e0       	ldi	r22, 0x01	; 1
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_HIGH);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    216c:	1b c0       	rjmp	.+54     	; 0x21a4 <DCM_voidRotate+0x5e>
	}
	else if(Local_u8State == CWW_STATE)
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	59 f4       	brne	.+22     	; 0x218a <DCM_voidRotate+0x44>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_HIGH);
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    2188:	0d c0       	rjmp	.+26     	; 0x21a4 <DCM_voidRotate+0x5e>
	}
	else if(Local_u8State == STOP_STATE)
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	51 f4       	brne	.+20     	; 0x21a4 <DCM_voidRotate+0x5e>
	{
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN0,DIO_u8PIN_LOW);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DCM_PORT,DCM_PIN1,DIO_u8PIN_LOW);
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	61 e0       	ldi	r22, 0x01	; 1
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	}
}
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    21b4:	83 e0       	ldi	r24, 0x03	; 3
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	62 e0       	ldi	r22, 0x02	; 2
    21cc:	41 e0       	ldi	r20, 0x01	; 1
    21ce:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_OUTPUT);
    21d2:	83 e0       	ldi	r24, 0x03	; 3
    21d4:	63 e0       	ldi	r22, 0x03	; 3
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>

}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	2a 97       	sbiw	r28, 0x0a	; 10
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	8a 83       	std	Y+2, r24	; 0x02
    21f8:	6b 83       	std	Y+3, r22	; 0x03
    21fa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    21fc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8PIN7)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	88 30       	cpi	r24, 0x08	; 8
    2202:	08 f0       	brcs	.+2      	; 0x2206 <DIO_u8SetPinDirection+0x24>
    2204:	b9 c1       	rjmp	.+882    	; 0x2578 <DIO_u8SetPinDirection+0x396>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	88 23       	and	r24, r24
    220a:	09 f0       	breq	.+2      	; 0x220e <DIO_u8SetPinDirection+0x2c>
    220c:	77 c0       	rjmp	.+238    	; 0x22fc <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	3a 87       	std	Y+10, r19	; 0x0a
    2216:	29 87       	std	Y+9, r18	; 0x09
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	81 30       	cpi	r24, 0x01	; 1
    221e:	91 05       	cpc	r25, r1
    2220:	59 f1       	breq	.+86     	; 0x2278 <DIO_u8SetPinDirection+0x96>
    2222:	29 85       	ldd	r18, Y+9	; 0x09
    2224:	3a 85       	ldd	r19, Y+10	; 0x0a
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	31 05       	cpc	r19, r1
    222a:	2c f4       	brge	.+10     	; 0x2236 <DIO_u8SetPinDirection+0x54>
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f0       	breq	.+26     	; 0x224e <DIO_u8SetPinDirection+0x6c>
    2234:	60 c0       	rjmp	.+192    	; 0x22f6 <DIO_u8SetPinDirection+0x114>
    2236:	29 85       	ldd	r18, Y+9	; 0x09
    2238:	3a 85       	ldd	r19, Y+10	; 0x0a
    223a:	22 30       	cpi	r18, 0x02	; 2
    223c:	31 05       	cpc	r19, r1
    223e:	89 f1       	breq	.+98     	; 0x22a2 <DIO_u8SetPinDirection+0xc0>
    2240:	89 85       	ldd	r24, Y+9	; 0x09
    2242:	9a 85       	ldd	r25, Y+10	; 0x0a
    2244:	83 30       	cpi	r24, 0x03	; 3
    2246:	91 05       	cpc	r25, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <DIO_u8SetPinDirection+0x6a>
    224a:	40 c0       	rjmp	.+128    	; 0x22cc <DIO_u8SetPinDirection+0xea>
    224c:	54 c0       	rjmp	.+168    	; 0x22f6 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    224e:	aa e3       	ldi	r26, 0x3A	; 58
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	ea e3       	ldi	r30, 0x3A	; 58
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	48 2f       	mov	r20, r24
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	02 2e       	mov	r0, r18
    2266:	02 c0       	rjmp	.+4      	; 0x226c <DIO_u8SetPinDirection+0x8a>
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	0a 94       	dec	r0
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <DIO_u8SetPinDirection+0x86>
    2270:	80 95       	com	r24
    2272:	84 23       	and	r24, r20
    2274:	8c 93       	st	X, r24
    2276:	82 c1       	rjmp	.+772    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    2278:	a7 e3       	ldi	r26, 0x37	; 55
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e7 e3       	ldi	r30, 0x37	; 55
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <DIO_u8SetPinDirection+0xb4>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <DIO_u8SetPinDirection+0xb0>
    229a:	80 95       	com	r24
    229c:	84 23       	and	r24, r20
    229e:	8c 93       	st	X, r24
    22a0:	6d c1       	rjmp	.+730    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    22a2:	a4 e3       	ldi	r26, 0x34	; 52
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e4 e3       	ldi	r30, 0x34	; 52
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <DIO_u8SetPinDirection+0xde>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <DIO_u8SetPinDirection+0xda>
    22c4:	80 95       	com	r24
    22c6:	84 23       	and	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	58 c1       	rjmp	.+688    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    22cc:	a1 e3       	ldi	r26, 0x31	; 49
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e1 e3       	ldi	r30, 0x31	; 49
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	48 2f       	mov	r20, r24
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	02 2e       	mov	r0, r18
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <DIO_u8SetPinDirection+0x108>
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	0a 94       	dec	r0
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <DIO_u8SetPinDirection+0x104>
    22ee:	80 95       	com	r24
    22f0:	84 23       	and	r24, r20
    22f2:	8c 93       	st	X, r24
    22f4:	43 c1       	rjmp	.+646    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	40 c1       	rjmp	.+640    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	09 f0       	breq	.+2      	; 0x2304 <DIO_u8SetPinDirection+0x122>
    2302:	72 c0       	rjmp	.+228    	; 0x23e8 <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	38 87       	std	Y+8, r19	; 0x08
    230c:	2f 83       	std	Y+7, r18	; 0x07
    230e:	8f 81       	ldd	r24, Y+7	; 0x07
    2310:	98 85       	ldd	r25, Y+8	; 0x08
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	49 f1       	breq	.+82     	; 0x236a <DIO_u8SetPinDirection+0x188>
    2318:	2f 81       	ldd	r18, Y+7	; 0x07
    231a:	38 85       	ldd	r19, Y+8	; 0x08
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	2c f4       	brge	.+10     	; 0x232c <DIO_u8SetPinDirection+0x14a>
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	98 85       	ldd	r25, Y+8	; 0x08
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	61 f0       	breq	.+24     	; 0x2342 <DIO_u8SetPinDirection+0x160>
    232a:	5b c0       	rjmp	.+182    	; 0x23e2 <DIO_u8SetPinDirection+0x200>
    232c:	2f 81       	ldd	r18, Y+7	; 0x07
    232e:	38 85       	ldd	r19, Y+8	; 0x08
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	31 05       	cpc	r19, r1
    2334:	71 f1       	breq	.+92     	; 0x2392 <DIO_u8SetPinDirection+0x1b0>
    2336:	8f 81       	ldd	r24, Y+7	; 0x07
    2338:	98 85       	ldd	r25, Y+8	; 0x08
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	91 05       	cpc	r25, r1
    233e:	e9 f1       	breq	.+122    	; 0x23ba <DIO_u8SetPinDirection+0x1d8>
    2340:	50 c0       	rjmp	.+160    	; 0x23e2 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    2342:	aa e3       	ldi	r26, 0x3A	; 58
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	ea e3       	ldi	r30, 0x3A	; 58
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	48 2f       	mov	r20, r24
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	02 2e       	mov	r0, r18
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <DIO_u8SetPinDirection+0x17e>
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	0a 94       	dec	r0
    2362:	e2 f7       	brpl	.-8      	; 0x235c <DIO_u8SetPinDirection+0x17a>
    2364:	84 2b       	or	r24, r20
    2366:	8c 93       	st	X, r24
    2368:	09 c1       	rjmp	.+530    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    236a:	a7 e3       	ldi	r26, 0x37	; 55
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e7 e3       	ldi	r30, 0x37	; 55
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	48 2f       	mov	r20, r24
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 2e       	mov	r0, r18
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <DIO_u8SetPinDirection+0x1a6>
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	0a 94       	dec	r0
    238a:	e2 f7       	brpl	.-8      	; 0x2384 <DIO_u8SetPinDirection+0x1a2>
    238c:	84 2b       	or	r24, r20
    238e:	8c 93       	st	X, r24
    2390:	f5 c0       	rjmp	.+490    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    2392:	a4 e3       	ldi	r26, 0x34	; 52
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	e4 e3       	ldi	r30, 0x34	; 52
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	48 2f       	mov	r20, r24
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	02 2e       	mov	r0, r18
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <DIO_u8SetPinDirection+0x1ce>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	0a 94       	dec	r0
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <DIO_u8SetPinDirection+0x1ca>
    23b4:	84 2b       	or	r24, r20
    23b6:	8c 93       	st	X, r24
    23b8:	e1 c0       	rjmp	.+450    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    23ba:	a1 e3       	ldi	r26, 0x31	; 49
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e1 e3       	ldi	r30, 0x31	; 49
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	48 2f       	mov	r20, r24
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <DIO_u8SetPinDirection+0x1f6>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <DIO_u8SetPinDirection+0x1f2>
    23dc:	84 2b       	or	r24, r20
    23de:	8c 93       	st	X, r24
    23e0:	cd c0       	rjmp	.+410    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	ca c0       	rjmp	.+404    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPULLUP)
    23e8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <DIO_u8SetPinDirection+0x20e>
    23ee:	c1 c0       	rjmp	.+386    	; 0x2572 <DIO_u8SetPinDirection+0x390>
		{
			switch(Copy_u8Port)
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	3e 83       	std	Y+6, r19	; 0x06
    23f8:	2d 83       	std	Y+5, r18	; 0x05
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	91 05       	cpc	r25, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <DIO_u8SetPinDirection+0x224>
    2404:	3e c0       	rjmp	.+124    	; 0x2482 <DIO_u8SetPinDirection+0x2a0>
    2406:	2d 81       	ldd	r18, Y+5	; 0x05
    2408:	3e 81       	ldd	r19, Y+6	; 0x06
    240a:	22 30       	cpi	r18, 0x02	; 2
    240c:	31 05       	cpc	r19, r1
    240e:	2c f4       	brge	.+10     	; 0x241a <DIO_u8SetPinDirection+0x238>
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	71 f0       	breq	.+28     	; 0x2434 <DIO_u8SetPinDirection+0x252>
    2418:	a9 c0       	rjmp	.+338    	; 0x256c <DIO_u8SetPinDirection+0x38a>
    241a:	2d 81       	ldd	r18, Y+5	; 0x05
    241c:	3e 81       	ldd	r19, Y+6	; 0x06
    241e:	22 30       	cpi	r18, 0x02	; 2
    2420:	31 05       	cpc	r19, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <DIO_u8SetPinDirection+0x244>
    2424:	55 c0       	rjmp	.+170    	; 0x24d0 <DIO_u8SetPinDirection+0x2ee>
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	83 30       	cpi	r24, 0x03	; 3
    242c:	91 05       	cpc	r25, r1
    242e:	09 f4       	brne	.+2      	; 0x2432 <DIO_u8SetPinDirection+0x250>
    2430:	76 c0       	rjmp	.+236    	; 0x251e <DIO_u8SetPinDirection+0x33c>
    2432:	9c c0       	rjmp	.+312    	; 0x256c <DIO_u8SetPinDirection+0x38a>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); SET_BIT(PORTA,Copy_u8Pin); break;
    2434:	aa e3       	ldi	r26, 0x3A	; 58
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	ea e3       	ldi	r30, 0x3A	; 58
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <DIO_u8SetPinDirection+0x26e>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	2a 95       	dec	r18
    2452:	e2 f7       	brpl	.-8      	; 0x244c <DIO_u8SetPinDirection+0x26a>
    2454:	80 95       	com	r24
    2456:	84 23       	and	r24, r20
    2458:	8c 93       	st	X, r24
    245a:	ab e3       	ldi	r26, 0x3B	; 59
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	eb e3       	ldi	r30, 0x3B	; 59
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	48 2f       	mov	r20, r24
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	02 2e       	mov	r0, r18
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <DIO_u8SetPinDirection+0x296>
    2474:	88 0f       	add	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	0a 94       	dec	r0
    247a:	e2 f7       	brpl	.-8      	; 0x2474 <DIO_u8SetPinDirection+0x292>
    247c:	84 2b       	or	r24, r20
    247e:	8c 93       	st	X, r24
    2480:	7d c0       	rjmp	.+250    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); SET_BIT(PORTB,Copy_u8Pin); break;
    2482:	a7 e3       	ldi	r26, 0x37	; 55
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e7 e3       	ldi	r30, 0x37	; 55
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	48 2f       	mov	r20, r24
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	02 c0       	rjmp	.+4      	; 0x249e <DIO_u8SetPinDirection+0x2bc>
    249a:	88 0f       	add	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	2a 95       	dec	r18
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <DIO_u8SetPinDirection+0x2b8>
    24a2:	80 95       	com	r24
    24a4:	84 23       	and	r24, r20
    24a6:	8c 93       	st	X, r24
    24a8:	a8 e3       	ldi	r26, 0x38	; 56
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e8 e3       	ldi	r30, 0x38	; 56
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	48 2f       	mov	r20, r24
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	02 2e       	mov	r0, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <DIO_u8SetPinDirection+0x2e4>
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <DIO_u8SetPinDirection+0x2e0>
    24ca:	84 2b       	or	r24, r20
    24cc:	8c 93       	st	X, r24
    24ce:	56 c0       	rjmp	.+172    	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); SET_BIT(PORTC,Copy_u8Pin); break;
    24d0:	a4 e3       	ldi	r26, 0x34	; 52
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e4 e3       	ldi	r30, 0x34	; 52
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	48 2f       	mov	r20, r24
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_u8SetPinDirection+0x30a>
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	2a 95       	dec	r18
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_u8SetPinDirection+0x306>
    24f0:	80 95       	com	r24
    24f2:	84 23       	and	r24, r20
    24f4:	8c 93       	st	X, r24
    24f6:	a5 e3       	ldi	r26, 0x35	; 53
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e5 e3       	ldi	r30, 0x35	; 53
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	48 2f       	mov	r20, r24
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	02 2e       	mov	r0, r18
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <DIO_u8SetPinDirection+0x332>
    2510:	88 0f       	add	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	0a 94       	dec	r0
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <DIO_u8SetPinDirection+0x32e>
    2518:	84 2b       	or	r24, r20
    251a:	8c 93       	st	X, r24
    251c:	2f c0       	rjmp	.+94     	; 0x257c <DIO_u8SetPinDirection+0x39a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); SET_BIT(PORTD,Copy_u8Pin); break;
    251e:	a1 e3       	ldi	r26, 0x31	; 49
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e1 e3       	ldi	r30, 0x31	; 49
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	48 2f       	mov	r20, r24
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 c0       	rjmp	.+4      	; 0x253a <DIO_u8SetPinDirection+0x358>
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	2a 95       	dec	r18
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <DIO_u8SetPinDirection+0x354>
    253e:	80 95       	com	r24
    2540:	84 23       	and	r24, r20
    2542:	8c 93       	st	X, r24
    2544:	a2 e3       	ldi	r26, 0x32	; 50
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e2 e3       	ldi	r30, 0x32	; 50
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <DIO_u8SetPinDirection+0x380>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <DIO_u8SetPinDirection+0x37c>
    2566:	84 2b       	or	r24, r20
    2568:	8c 93       	st	X, r24
    256a:	08 c0       	rjmp	.+16     	; 0x257c <DIO_u8SetPinDirection+0x39a>
			default: Local_u8ErrorState=1; break;
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	05 c0       	rjmp	.+10     	; 0x257c <DIO_u8SetPinDirection+0x39a>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_u8SetPinDirection+0x39a>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    257c:	89 81       	ldd	r24, Y+1	; 0x01
}
    257e:	2a 96       	adiw	r28, 0x0a	; 10
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <DIO_u8SetPortDirection+0x6>
    2596:	00 d0       	rcall	.+0      	; 0x2598 <DIO_u8SetPortDirection+0x8>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    25a2:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	3d 83       	std	Y+5, r19	; 0x05
    25ac:	2c 83       	std	Y+4, r18	; 0x04
    25ae:	8c 81       	ldd	r24, Y+4	; 0x04
    25b0:	9d 81       	ldd	r25, Y+5	; 0x05
    25b2:	81 30       	cpi	r24, 0x01	; 1
    25b4:	91 05       	cpc	r25, r1
    25b6:	d1 f0       	breq	.+52     	; 0x25ec <DIO_u8SetPortDirection+0x5c>
    25b8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ba:	3d 81       	ldd	r19, Y+5	; 0x05
    25bc:	22 30       	cpi	r18, 0x02	; 2
    25be:	31 05       	cpc	r19, r1
    25c0:	2c f4       	brge	.+10     	; 0x25cc <DIO_u8SetPortDirection+0x3c>
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	61 f0       	breq	.+24     	; 0x25e2 <DIO_u8SetPortDirection+0x52>
    25ca:	1f c0       	rjmp	.+62     	; 0x260a <DIO_u8SetPortDirection+0x7a>
    25cc:	2c 81       	ldd	r18, Y+4	; 0x04
    25ce:	3d 81       	ldd	r19, Y+5	; 0x05
    25d0:	22 30       	cpi	r18, 0x02	; 2
    25d2:	31 05       	cpc	r19, r1
    25d4:	81 f0       	breq	.+32     	; 0x25f6 <DIO_u8SetPortDirection+0x66>
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	9d 81       	ldd	r25, Y+5	; 0x05
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	91 05       	cpc	r25, r1
    25de:	81 f0       	breq	.+32     	; 0x2600 <DIO_u8SetPortDirection+0x70>
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA : DDRA = Copy_u8Direction; break;
    25e2:	ea e3       	ldi	r30, 0x3A	; 58
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	80 83       	st	Z, r24
    25ea:	11 c0       	rjmp	.+34     	; 0x260e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB : DDRB = Copy_u8Direction; break;
    25ec:	e7 e3       	ldi	r30, 0x37	; 55
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	80 83       	st	Z, r24
    25f4:	0c c0       	rjmp	.+24     	; 0x260e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC : DDRC = Copy_u8Direction; break;
    25f6:	e4 e3       	ldi	r30, 0x34	; 52
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	80 83       	st	Z, r24
    25fe:	07 c0       	rjmp	.+14     	; 0x260e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD : DDRD = Copy_u8Direction; break;
    2600:	e1 e3       	ldi	r30, 0x31	; 49
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	80 83       	st	Z, r24
    2608:	02 c0       	rjmp	.+4      	; 0x260e <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    260e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	28 97       	sbiw	r28, 0x08	; 8
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	6b 83       	std	Y+3, r22	; 0x03
    2638:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    263a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<= DIO_u8PIN7)
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	88 30       	cpi	r24, 0x08	; 8
    2640:	08 f0       	brcs	.+2      	; 0x2644 <DIO_u8SetPinValue+0x24>
    2642:	f4 c0       	rjmp	.+488    	; 0x282c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    2644:	8c 81       	ldd	r24, Y+4	; 0x04
    2646:	88 23       	and	r24, r24
    2648:	09 f0       	breq	.+2      	; 0x264c <DIO_u8SetPinValue+0x2c>
    264a:	77 c0       	rjmp	.+238    	; 0x273a <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	38 87       	std	Y+8, r19	; 0x08
    2654:	2f 83       	std	Y+7, r18	; 0x07
    2656:	8f 81       	ldd	r24, Y+7	; 0x07
    2658:	98 85       	ldd	r25, Y+8	; 0x08
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	91 05       	cpc	r25, r1
    265e:	59 f1       	breq	.+86     	; 0x26b6 <DIO_u8SetPinValue+0x96>
    2660:	2f 81       	ldd	r18, Y+7	; 0x07
    2662:	38 85       	ldd	r19, Y+8	; 0x08
    2664:	22 30       	cpi	r18, 0x02	; 2
    2666:	31 05       	cpc	r19, r1
    2668:	2c f4       	brge	.+10     	; 0x2674 <DIO_u8SetPinValue+0x54>
    266a:	8f 81       	ldd	r24, Y+7	; 0x07
    266c:	98 85       	ldd	r25, Y+8	; 0x08
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	69 f0       	breq	.+26     	; 0x268c <DIO_u8SetPinValue+0x6c>
    2672:	60 c0       	rjmp	.+192    	; 0x2734 <DIO_u8SetPinValue+0x114>
    2674:	2f 81       	ldd	r18, Y+7	; 0x07
    2676:	38 85       	ldd	r19, Y+8	; 0x08
    2678:	22 30       	cpi	r18, 0x02	; 2
    267a:	31 05       	cpc	r19, r1
    267c:	89 f1       	breq	.+98     	; 0x26e0 <DIO_u8SetPinValue+0xc0>
    267e:	8f 81       	ldd	r24, Y+7	; 0x07
    2680:	98 85       	ldd	r25, Y+8	; 0x08
    2682:	83 30       	cpi	r24, 0x03	; 3
    2684:	91 05       	cpc	r25, r1
    2686:	09 f4       	brne	.+2      	; 0x268a <DIO_u8SetPinValue+0x6a>
    2688:	40 c0       	rjmp	.+128    	; 0x270a <DIO_u8SetPinValue+0xea>
    268a:	54 c0       	rjmp	.+168    	; 0x2734 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    268c:	ab e3       	ldi	r26, 0x3B	; 59
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	eb e3       	ldi	r30, 0x3B	; 59
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	48 2f       	mov	r20, r24
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	02 2e       	mov	r0, r18
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <DIO_u8SetPinValue+0x8a>
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	0a 94       	dec	r0
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <DIO_u8SetPinValue+0x86>
    26ae:	80 95       	com	r24
    26b0:	84 23       	and	r24, r20
    26b2:	8c 93       	st	X, r24
    26b4:	bd c0       	rjmp	.+378    	; 0x2830 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    26b6:	a8 e3       	ldi	r26, 0x38	; 56
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e8 e3       	ldi	r30, 0x38	; 56
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	48 2f       	mov	r20, r24
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	02 2e       	mov	r0, r18
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <DIO_u8SetPinValue+0xb4>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	0a 94       	dec	r0
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <DIO_u8SetPinValue+0xb0>
    26d8:	80 95       	com	r24
    26da:	84 23       	and	r24, r20
    26dc:	8c 93       	st	X, r24
    26de:	a8 c0       	rjmp	.+336    	; 0x2830 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    26e0:	a5 e3       	ldi	r26, 0x35	; 53
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e5 e3       	ldi	r30, 0x35	; 53
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	48 2f       	mov	r20, r24
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	02 2e       	mov	r0, r18
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <DIO_u8SetPinValue+0xde>
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	0a 94       	dec	r0
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <DIO_u8SetPinValue+0xda>
    2702:	80 95       	com	r24
    2704:	84 23       	and	r24, r20
    2706:	8c 93       	st	X, r24
    2708:	93 c0       	rjmp	.+294    	; 0x2830 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    270a:	a2 e3       	ldi	r26, 0x32	; 50
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e2 e3       	ldi	r30, 0x32	; 50
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	48 2f       	mov	r20, r24
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	02 2e       	mov	r0, r18
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <DIO_u8SetPinValue+0x108>
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <DIO_u8SetPinValue+0x104>
    272c:	80 95       	com	r24
    272e:	84 23       	and	r24, r20
    2730:	8c 93       	st	X, r24
    2732:	7e c0       	rjmp	.+252    	; 0x2830 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	7b c0       	rjmp	.+246    	; 0x2830 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_HIGH)
    273a:	8c 81       	ldd	r24, Y+4	; 0x04
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	09 f0       	breq	.+2      	; 0x2742 <DIO_u8SetPinValue+0x122>
    2740:	72 c0       	rjmp	.+228    	; 0x2826 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	3e 83       	std	Y+6, r19	; 0x06
    274a:	2d 83       	std	Y+5, r18	; 0x05
    274c:	8d 81       	ldd	r24, Y+5	; 0x05
    274e:	9e 81       	ldd	r25, Y+6	; 0x06
    2750:	81 30       	cpi	r24, 0x01	; 1
    2752:	91 05       	cpc	r25, r1
    2754:	49 f1       	breq	.+82     	; 0x27a8 <DIO_u8SetPinValue+0x188>
    2756:	2d 81       	ldd	r18, Y+5	; 0x05
    2758:	3e 81       	ldd	r19, Y+6	; 0x06
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 05       	cpc	r19, r1
    275e:	2c f4       	brge	.+10     	; 0x276a <DIO_u8SetPinValue+0x14a>
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	61 f0       	breq	.+24     	; 0x2780 <DIO_u8SetPinValue+0x160>
    2768:	5b c0       	rjmp	.+182    	; 0x2820 <DIO_u8SetPinValue+0x200>
    276a:	2d 81       	ldd	r18, Y+5	; 0x05
    276c:	3e 81       	ldd	r19, Y+6	; 0x06
    276e:	22 30       	cpi	r18, 0x02	; 2
    2770:	31 05       	cpc	r19, r1
    2772:	71 f1       	breq	.+92     	; 0x27d0 <DIO_u8SetPinValue+0x1b0>
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	83 30       	cpi	r24, 0x03	; 3
    277a:	91 05       	cpc	r25, r1
    277c:	e9 f1       	breq	.+122    	; 0x27f8 <DIO_u8SetPinValue+0x1d8>
    277e:	50 c0       	rjmp	.+160    	; 0x2820 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    2780:	ab e3       	ldi	r26, 0x3B	; 59
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	eb e3       	ldi	r30, 0x3B	; 59
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	48 2f       	mov	r20, r24
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	02 2e       	mov	r0, r18
    2798:	02 c0       	rjmp	.+4      	; 0x279e <DIO_u8SetPinValue+0x17e>
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <DIO_u8SetPinValue+0x17a>
    27a2:	84 2b       	or	r24, r20
    27a4:	8c 93       	st	X, r24
    27a6:	44 c0       	rjmp	.+136    	; 0x2830 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    27a8:	a8 e3       	ldi	r26, 0x38	; 56
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e8 e3       	ldi	r30, 0x38	; 56
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	48 2f       	mov	r20, r24
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	28 2f       	mov	r18, r24
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	02 2e       	mov	r0, r18
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <DIO_u8SetPinValue+0x1a6>
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	0a 94       	dec	r0
    27c8:	e2 f7       	brpl	.-8      	; 0x27c2 <DIO_u8SetPinValue+0x1a2>
    27ca:	84 2b       	or	r24, r20
    27cc:	8c 93       	st	X, r24
    27ce:	30 c0       	rjmp	.+96     	; 0x2830 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    27d0:	a5 e3       	ldi	r26, 0x35	; 53
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e5 e3       	ldi	r30, 0x35	; 53
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	48 2f       	mov	r20, r24
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	02 2e       	mov	r0, r18
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <DIO_u8SetPinValue+0x1ce>
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	0a 94       	dec	r0
    27f0:	e2 f7       	brpl	.-8      	; 0x27ea <DIO_u8SetPinValue+0x1ca>
    27f2:	84 2b       	or	r24, r20
    27f4:	8c 93       	st	X, r24
    27f6:	1c c0       	rjmp	.+56     	; 0x2830 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    27f8:	a2 e3       	ldi	r26, 0x32	; 50
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e2 e3       	ldi	r30, 0x32	; 50
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	48 2f       	mov	r20, r24
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	02 2e       	mov	r0, r18
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <DIO_u8SetPinValue+0x1f6>
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	0a 94       	dec	r0
    2818:	e2 f7       	brpl	.-8      	; 0x2812 <DIO_u8SetPinValue+0x1f2>
    281a:	84 2b       	or	r24, r20
    281c:	8c 93       	st	X, r24
    281e:	08 c0       	rjmp	.+16     	; 0x2830 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    2830:	89 81       	ldd	r24, Y+1	; 0x01
}
    2832:	28 96       	adiw	r28, 0x08	; 8
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	00 d0       	rcall	.+0      	; 0x284a <DIO_u8SetPortValue+0x6>
    284a:	00 d0       	rcall	.+0      	; 0x284c <DIO_u8SetPortValue+0x8>
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	8a 83       	std	Y+2, r24	; 0x02
    2854:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2856:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	3d 83       	std	Y+5, r19	; 0x05
    2860:	2c 83       	std	Y+4, r18	; 0x04
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	9d 81       	ldd	r25, Y+5	; 0x05
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	91 05       	cpc	r25, r1
    286a:	d1 f0       	breq	.+52     	; 0x28a0 <DIO_u8SetPortValue+0x5c>
    286c:	2c 81       	ldd	r18, Y+4	; 0x04
    286e:	3d 81       	ldd	r19, Y+5	; 0x05
    2870:	22 30       	cpi	r18, 0x02	; 2
    2872:	31 05       	cpc	r19, r1
    2874:	2c f4       	brge	.+10     	; 0x2880 <DIO_u8SetPortValue+0x3c>
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	9d 81       	ldd	r25, Y+5	; 0x05
    287a:	00 97       	sbiw	r24, 0x00	; 0
    287c:	61 f0       	breq	.+24     	; 0x2896 <DIO_u8SetPortValue+0x52>
    287e:	1f c0       	rjmp	.+62     	; 0x28be <DIO_u8SetPortValue+0x7a>
    2880:	2c 81       	ldd	r18, Y+4	; 0x04
    2882:	3d 81       	ldd	r19, Y+5	; 0x05
    2884:	22 30       	cpi	r18, 0x02	; 2
    2886:	31 05       	cpc	r19, r1
    2888:	81 f0       	breq	.+32     	; 0x28aa <DIO_u8SetPortValue+0x66>
    288a:	8c 81       	ldd	r24, Y+4	; 0x04
    288c:	9d 81       	ldd	r25, Y+5	; 0x05
    288e:	83 30       	cpi	r24, 0x03	; 3
    2890:	91 05       	cpc	r25, r1
    2892:	81 f0       	breq	.+32     	; 0x28b4 <DIO_u8SetPortValue+0x70>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA : PORTA = Copy_u8Value; break;
    2896:	eb e3       	ldi	r30, 0x3B	; 59
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	80 83       	st	Z, r24
    289e:	11 c0       	rjmp	.+34     	; 0x28c2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB : PORTB = Copy_u8Value; break;
    28a0:	e8 e3       	ldi	r30, 0x38	; 56
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	80 83       	st	Z, r24
    28a8:	0c c0       	rjmp	.+24     	; 0x28c2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC : PORTC = Copy_u8Value; break;
    28aa:	e5 e3       	ldi	r30, 0x35	; 53
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	80 83       	st	Z, r24
    28b2:	07 c0       	rjmp	.+14     	; 0x28c2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD : PORTD = Copy_u8Value; break;
    28b4:	e2 e3       	ldi	r30, 0x32	; 50
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	80 83       	st	Z, r24
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <DIO_u8TogglePinValue>:

u8 DIO_u8TogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	00 d0       	rcall	.+0      	; 0x28da <DIO_u8TogglePinValue+0x6>
    28da:	00 d0       	rcall	.+0      	; 0x28dc <DIO_u8TogglePinValue+0x8>
    28dc:	0f 92       	push	r0
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	8a 83       	std	Y+2, r24	; 0x02
    28e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    28e6:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	3d 83       	std	Y+5, r19	; 0x05
    28f0:	2c 83       	std	Y+4, r18	; 0x04
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	9d 81       	ldd	r25, Y+5	; 0x05
    28f6:	81 30       	cpi	r24, 0x01	; 1
    28f8:	91 05       	cpc	r25, r1
    28fa:	49 f1       	breq	.+82     	; 0x294e <DIO_u8TogglePinValue+0x7a>
    28fc:	2c 81       	ldd	r18, Y+4	; 0x04
    28fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2900:	22 30       	cpi	r18, 0x02	; 2
    2902:	31 05       	cpc	r19, r1
    2904:	2c f4       	brge	.+10     	; 0x2910 <DIO_u8TogglePinValue+0x3c>
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	9d 81       	ldd	r25, Y+5	; 0x05
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	61 f0       	breq	.+24     	; 0x2926 <DIO_u8TogglePinValue+0x52>
    290e:	5b c0       	rjmp	.+182    	; 0x29c6 <DIO_u8TogglePinValue+0xf2>
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	22 30       	cpi	r18, 0x02	; 2
    2916:	31 05       	cpc	r19, r1
    2918:	71 f1       	breq	.+92     	; 0x2976 <DIO_u8TogglePinValue+0xa2>
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	91 05       	cpc	r25, r1
    2922:	e9 f1       	breq	.+122    	; 0x299e <DIO_u8TogglePinValue+0xca>
    2924:	50 c0       	rjmp	.+160    	; 0x29c6 <DIO_u8TogglePinValue+0xf2>
	{
	case DIO_u8PORTA: TOOGLE_BIT(PORTA,Copy_u8Pin); break;
    2926:	ab e3       	ldi	r26, 0x3B	; 59
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	eb e3       	ldi	r30, 0x3B	; 59
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	48 2f       	mov	r20, r24
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	28 2f       	mov	r18, r24
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	02 2e       	mov	r0, r18
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <DIO_u8TogglePinValue+0x70>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	0a 94       	dec	r0
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <DIO_u8TogglePinValue+0x6c>
    2948:	84 27       	eor	r24, r20
    294a:	8c 93       	st	X, r24
    294c:	3e c0       	rjmp	.+124    	; 0x29ca <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTB: TOOGLE_BIT(PORTB,Copy_u8Pin); break;
    294e:	a8 e3       	ldi	r26, 0x38	; 56
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e8 e3       	ldi	r30, 0x38	; 56
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	48 2f       	mov	r20, r24
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	02 2e       	mov	r0, r18
    2966:	02 c0       	rjmp	.+4      	; 0x296c <DIO_u8TogglePinValue+0x98>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	0a 94       	dec	r0
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <DIO_u8TogglePinValue+0x94>
    2970:	84 27       	eor	r24, r20
    2972:	8c 93       	st	X, r24
    2974:	2a c0       	rjmp	.+84     	; 0x29ca <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTC: TOOGLE_BIT(PORTC,Copy_u8Pin); break;
    2976:	a5 e3       	ldi	r26, 0x35	; 53
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e5 e3       	ldi	r30, 0x35	; 53
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	48 2f       	mov	r20, r24
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	02 2e       	mov	r0, r18
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <DIO_u8TogglePinValue+0xc0>
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	0a 94       	dec	r0
    2996:	e2 f7       	brpl	.-8      	; 0x2990 <DIO_u8TogglePinValue+0xbc>
    2998:	84 27       	eor	r24, r20
    299a:	8c 93       	st	X, r24
    299c:	16 c0       	rjmp	.+44     	; 0x29ca <DIO_u8TogglePinValue+0xf6>
	case DIO_u8PORTD: TOOGLE_BIT(PORTD,Copy_u8Pin); break;
    299e:	a2 e3       	ldi	r26, 0x32	; 50
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e2 e3       	ldi	r30, 0x32	; 50
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	48 2f       	mov	r20, r24
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	02 2e       	mov	r0, r18
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <DIO_u8TogglePinValue+0xe8>
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	0a 94       	dec	r0
    29be:	e2 f7       	brpl	.-8      	; 0x29b8 <DIO_u8TogglePinValue+0xe4>
    29c0:	84 27       	eor	r24, r20
    29c2:	8c 93       	st	X, r24
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <DIO_u8TogglePinValue+0xf6>
	default: Local_u8ErrorState=1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	27 97       	sbiw	r28, 0x07	; 7
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	8a 83       	std	Y+2, r24	; 0x02
    29f2:	6b 83       	std	Y+3, r22	; 0x03
    29f4:	5d 83       	std	Y+5, r21	; 0x05
    29f6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    29f8:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value!=NULL) && (Copy_u8Pin<= DIO_u8PIN7))
    29fa:	8c 81       	ldd	r24, Y+4	; 0x04
    29fc:	9d 81       	ldd	r25, Y+5	; 0x05
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <DIO_u8GetPinValue+0x28>
    2a02:	78 c0       	rjmp	.+240    	; 0x2af4 <DIO_u8GetPinValue+0x118>
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	88 30       	cpi	r24, 0x08	; 8
    2a08:	08 f0       	brcs	.+2      	; 0x2a0c <DIO_u8GetPinValue+0x30>
    2a0a:	74 c0       	rjmp	.+232    	; 0x2af4 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	3f 83       	std	Y+7, r19	; 0x07
    2a14:	2e 83       	std	Y+6, r18	; 0x06
    2a16:	4e 81       	ldd	r20, Y+6	; 0x06
    2a18:	5f 81       	ldd	r21, Y+7	; 0x07
    2a1a:	41 30       	cpi	r20, 0x01	; 1
    2a1c:	51 05       	cpc	r21, r1
    2a1e:	59 f1       	breq	.+86     	; 0x2a76 <DIO_u8GetPinValue+0x9a>
    2a20:	8e 81       	ldd	r24, Y+6	; 0x06
    2a22:	9f 81       	ldd	r25, Y+7	; 0x07
    2a24:	82 30       	cpi	r24, 0x02	; 2
    2a26:	91 05       	cpc	r25, r1
    2a28:	34 f4       	brge	.+12     	; 0x2a36 <DIO_u8GetPinValue+0x5a>
    2a2a:	2e 81       	ldd	r18, Y+6	; 0x06
    2a2c:	3f 81       	ldd	r19, Y+7	; 0x07
    2a2e:	21 15       	cp	r18, r1
    2a30:	31 05       	cpc	r19, r1
    2a32:	69 f0       	breq	.+26     	; 0x2a4e <DIO_u8GetPinValue+0x72>
    2a34:	5c c0       	rjmp	.+184    	; 0x2aee <DIO_u8GetPinValue+0x112>
    2a36:	4e 81       	ldd	r20, Y+6	; 0x06
    2a38:	5f 81       	ldd	r21, Y+7	; 0x07
    2a3a:	42 30       	cpi	r20, 0x02	; 2
    2a3c:	51 05       	cpc	r21, r1
    2a3e:	79 f1       	breq	.+94     	; 0x2a9e <DIO_u8GetPinValue+0xc2>
    2a40:	8e 81       	ldd	r24, Y+6	; 0x06
    2a42:	9f 81       	ldd	r25, Y+7	; 0x07
    2a44:	83 30       	cpi	r24, 0x03	; 3
    2a46:	91 05       	cpc	r25, r1
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <DIO_u8GetPinValue+0x70>
    2a4a:	3d c0       	rjmp	.+122    	; 0x2ac6 <DIO_u8GetPinValue+0xea>
    2a4c:	50 c0       	rjmp	.+160    	; 0x2aee <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA : *Copy_pu8Value= GET_BIT(PINA , Copy_u8Pin); break;
    2a4e:	e9 e3       	ldi	r30, 0x39	; 57
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a9 01       	movw	r20, r18
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <DIO_u8GetPinValue+0x8a>
    2a62:	55 95       	asr	r21
    2a64:	47 95       	ror	r20
    2a66:	8a 95       	dec	r24
    2a68:	e2 f7       	brpl	.-8      	; 0x2a62 <DIO_u8GetPinValue+0x86>
    2a6a:	ca 01       	movw	r24, r20
    2a6c:	81 70       	andi	r24, 0x01	; 1
    2a6e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a70:	fd 81       	ldd	r31, Y+5	; 0x05
    2a72:	80 83       	st	Z, r24
    2a74:	41 c0       	rjmp	.+130    	; 0x2af8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB : *Copy_pu8Value= GET_BIT(PINB , Copy_u8Pin); break;
    2a76:	e6 e3       	ldi	r30, 0x36	; 54
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	8b 81       	ldd	r24, Y+3	; 0x03
    2a82:	88 2f       	mov	r24, r24
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	a9 01       	movw	r20, r18
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <DIO_u8GetPinValue+0xb2>
    2a8a:	55 95       	asr	r21
    2a8c:	47 95       	ror	r20
    2a8e:	8a 95       	dec	r24
    2a90:	e2 f7       	brpl	.-8      	; 0x2a8a <DIO_u8GetPinValue+0xae>
    2a92:	ca 01       	movw	r24, r20
    2a94:	81 70       	andi	r24, 0x01	; 1
    2a96:	ec 81       	ldd	r30, Y+4	; 0x04
    2a98:	fd 81       	ldd	r31, Y+5	; 0x05
    2a9a:	80 83       	st	Z, r24
    2a9c:	2d c0       	rjmp	.+90     	; 0x2af8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC : *Copy_pu8Value= GET_BIT(PINC , Copy_u8Pin); break;
    2a9e:	e3 e3       	ldi	r30, 0x33	; 51
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	80 81       	ld	r24, Z
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a9 01       	movw	r20, r18
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <DIO_u8GetPinValue+0xda>
    2ab2:	55 95       	asr	r21
    2ab4:	47 95       	ror	r20
    2ab6:	8a 95       	dec	r24
    2ab8:	e2 f7       	brpl	.-8      	; 0x2ab2 <DIO_u8GetPinValue+0xd6>
    2aba:	ca 01       	movw	r24, r20
    2abc:	81 70       	andi	r24, 0x01	; 1
    2abe:	ec 81       	ldd	r30, Y+4	; 0x04
    2ac0:	fd 81       	ldd	r31, Y+5	; 0x05
    2ac2:	80 83       	st	Z, r24
    2ac4:	19 c0       	rjmp	.+50     	; 0x2af8 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD : *Copy_pu8Value= GET_BIT(PIND , Copy_u8Pin); break;
    2ac6:	e0 e3       	ldi	r30, 0x30	; 48
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	88 2f       	mov	r24, r24
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a9 01       	movw	r20, r18
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <DIO_u8GetPinValue+0x102>
    2ada:	55 95       	asr	r21
    2adc:	47 95       	ror	r20
    2ade:	8a 95       	dec	r24
    2ae0:	e2 f7       	brpl	.-8      	; 0x2ada <DIO_u8GetPinValue+0xfe>
    2ae2:	ca 01       	movw	r24, r20
    2ae4:	81 70       	andi	r24, 0x01	; 1
    2ae6:	ec 81       	ldd	r30, Y+4	; 0x04
    2ae8:	fd 81       	ldd	r31, Y+5	; 0x05
    2aea:	80 83       	st	Z, r24
    2aec:	05 c0       	rjmp	.+10     	; 0x2af8 <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState=1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2afa:	27 96       	adiw	r28, 0x07	; 7
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <DIO_u8GetPortValue+0x6>
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <DIO_u8GetPortValue+0x8>
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <DIO_u8GetPortValue+0xa>
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	8a 83       	std	Y+2, r24	; 0x02
    2b1c:	7c 83       	std	Y+4, r23	; 0x04
    2b1e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    2b20:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pu8Value != NULL)
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	9c 81       	ldd	r25, Y+4	; 0x04
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <DIO_u8GetPortValue+0x20>
    2b2a:	3e c0       	rjmp	.+124    	; 0x2ba8 <DIO_u8GetPortValue+0x9c>
	{
		switch(Copy_u8Port)
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	3e 83       	std	Y+6, r19	; 0x06
    2b34:	2d 83       	std	Y+5, r18	; 0x05
    2b36:	8d 81       	ldd	r24, Y+5	; 0x05
    2b38:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3a:	81 30       	cpi	r24, 0x01	; 1
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	e1 f0       	breq	.+56     	; 0x2b78 <DIO_u8GetPortValue+0x6c>
    2b40:	2d 81       	ldd	r18, Y+5	; 0x05
    2b42:	3e 81       	ldd	r19, Y+6	; 0x06
    2b44:	22 30       	cpi	r18, 0x02	; 2
    2b46:	31 05       	cpc	r19, r1
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <DIO_u8GetPortValue+0x48>
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	61 f0       	breq	.+24     	; 0x2b6a <DIO_u8GetPortValue+0x5e>
    2b52:	27 c0       	rjmp	.+78     	; 0x2ba2 <DIO_u8GetPortValue+0x96>
    2b54:	2d 81       	ldd	r18, Y+5	; 0x05
    2b56:	3e 81       	ldd	r19, Y+6	; 0x06
    2b58:	22 30       	cpi	r18, 0x02	; 2
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	a1 f0       	breq	.+40     	; 0x2b86 <DIO_u8GetPortValue+0x7a>
    2b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b60:	9e 81       	ldd	r25, Y+6	; 0x06
    2b62:	83 30       	cpi	r24, 0x03	; 3
    2b64:	91 05       	cpc	r25, r1
    2b66:	b1 f0       	breq	.+44     	; 0x2b94 <DIO_u8GetPortValue+0x88>
    2b68:	1c c0       	rjmp	.+56     	; 0x2ba2 <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8PORTA: *Copy_pu8Value = PINA; break;
    2b6a:	e9 e3       	ldi	r30, 0x39	; 57
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	eb 81       	ldd	r30, Y+3	; 0x03
    2b72:	fc 81       	ldd	r31, Y+4	; 0x04
    2b74:	80 83       	st	Z, r24
    2b76:	1a c0       	rjmp	.+52     	; 0x2bac <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTB: *Copy_pu8Value = PINB; break;
    2b78:	e6 e3       	ldi	r30, 0x36	; 54
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2b80:	fc 81       	ldd	r31, Y+4	; 0x04
    2b82:	80 83       	st	Z, r24
    2b84:	13 c0       	rjmp	.+38     	; 0x2bac <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTC: *Copy_pu8Value = PINC; break;
    2b86:	e3 e3       	ldi	r30, 0x33	; 51
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b8e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b90:	80 83       	st	Z, r24
    2b92:	0c c0       	rjmp	.+24     	; 0x2bac <DIO_u8GetPortValue+0xa0>
		case DIO_u8PORTD: *Copy_pu8Value = PIND; break;
    2b94:	e0 e3       	ldi	r30, 0x30	; 48
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b9e:	80 83       	st	Z, r24
    2ba0:	05 c0       	rjmp	.+10     	; 0x2bac <DIO_u8GetPortValue+0xa0>
		default: Local_u8ErrorState = 1; break;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <DIO_u8GetPortValue+0xa0>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bae:	26 96       	adiw	r28, 0x06	; 6
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <EEPROM_enuWriteData>:
#include "EEPROM_config.h"
#include "EEPROM_private.h"
#include "EEPROM_interface.h"

EEPROM_tenuErrorStatus EEPROM_enuWriteData(u16 Copy_u16Address , u8 Copy_u8Data)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <EEPROM_enuWriteData+0x6>
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <EEPROM_enuWriteData+0x8>
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	9b 83       	std	Y+3, r25	; 0x03
    2bce:	8a 83       	std	Y+2, r24	; 0x02
    2bd0:	6c 83       	std	Y+4, r22	; 0x04
	EEPROM_tenuErrorStatus Local_enuErrorStatus = EEPROM_OK;
    2bd2:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

		// Set up Address Register
		EEARL = Copy_u16Address;
    2bd4:	ee e3       	ldi	r30, 0x3E	; 62
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	9b 81       	ldd	r25, Y+3	; 0x03
    2bdc:	91 83       	std	Z+1, r25	; 0x01
    2bde:	80 83       	st	Z, r24

		// Set Up Data Register
		EEDR = Copy_u8Data ;
    2be0:	ed e3       	ldi	r30, 0x3D	; 61
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	8c 81       	ldd	r24, Y+4	; 0x04
    2be6:	80 83       	st	Z, r24

		// Write one to the EEMWE
		EECR |= (1<<2);
    2be8:	ac e3       	ldi	r26, 0x3C	; 60
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	ec e3       	ldi	r30, 0x3C	; 60
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	84 60       	ori	r24, 0x04	; 4
    2bf4:	8c 93       	st	X, r24

		// Start EEPROM Write by Setting EEWE to 1
		EECR |= (1<<1);
    2bf6:	ac e3       	ldi	r26, 0x3C	; 60
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	ec e3       	ldi	r30, 0x3C	; 60
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	82 60       	ori	r24, 0x02	; 2
    2c02:	8c 93       	st	X, r24

		// Polling on the flag (wait for the write operation to be completed )
		while((EECR >> 1 & 1) == 1);
    2c04:	ec e3       	ldi	r30, 0x3C	; 60
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	86 95       	lsr	r24
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	81 70       	andi	r24, 0x01	; 1
    2c12:	90 70       	andi	r25, 0x00	; 0
    2c14:	88 23       	and	r24, r24
    2c16:	b1 f7       	brne	.-20     	; 0x2c04 <EEPROM_enuWriteData+0x44>
	}
	return Local_enuErrorStatus;
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <EEPROM_u8ReadeData>:

u8 EEPROM_u8ReadeData(u16 Copy_u16Address)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <EEPROM_u8ReadeData+0x6>
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01

	// Set up Address Register
	EEARL = Copy_u16Address;
    2c36:	ee e3       	ldi	r30, 0x3E	; 62
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	91 83       	std	Z+1, r25	; 0x01
    2c40:	80 83       	st	Z, r24

	// Start EEPROM Read by Setting EERE to 1
	EECR |= (1<<0);
    2c42:	ac e3       	ldi	r26, 0x3C	; 60
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	ec e3       	ldi	r30, 0x3C	; 60
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	81 60       	ori	r24, 0x01	; 1
    2c4e:	8c 93       	st	X, r24

	// Reading Operation takes only one cycle so it's not neccessry to polling on the flag
	return EEDR;
    2c50:	ed e3       	ldi	r30, 0x3D	; 61
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z

}
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <KPD_voidInit>:
static u8 Keypad_4x4_adjustKeyNumber (u8 button_number);

#endif

void KPD_voidInit(void)
{
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
	// Setting Column pins to output
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_OUTPUT);
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_OUTPUT);
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	61 e0       	ldi	r22, 0x01	; 1
    2c76:	41 e0       	ldi	r20, 0x01	; 1
    2c78:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_OUTPUT);
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	62 e0       	ldi	r22, 0x02	; 2
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_OUTPUT);
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	63 e0       	ldi	r22, 0x03	; 3
    2c8a:	41 e0       	ldi	r20, 0x01	; 1
    2c8c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN0_PIN,DIO_u8PIN_HIGH);
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	41 e0       	ldi	r20, 0x01	; 1
    2c96:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN1_PIN,DIO_u8PIN_HIGH);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN2_PIN,DIO_u8PIN_HIGH);
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	62 e0       	ldi	r22, 0x02	; 2
    2ca8:	41 e0       	ldi	r20, 0x01	; 1
    2caa:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COLUMN3_PIN,DIO_u8PIN_HIGH);
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	63 e0       	ldi	r22, 0x03	; 3
    2cb2:	41 e0       	ldi	r20, 0x01	; 1
    2cb4:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>

	// Setting Row pins to input or input with pullup enabled
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8PIN_INPULLUP);
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	64 e0       	ldi	r22, 0x04	; 4
    2cbc:	42 e0       	ldi	r20, 0x02	; 2
    2cbe:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8PIN_INPULLUP);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	65 e0       	ldi	r22, 0x05	; 5
    2cc6:	42 e0       	ldi	r20, 0x02	; 2
    2cc8:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8PIN_INPULLUP);
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	66 e0       	ldi	r22, 0x06	; 6
    2cd0:	42 e0       	ldi	r20, 0x02	; 2
    2cd2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8PIN_INPULLUP);
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	67 e0       	ldi	r22, 0x07	; 7
    2cda:	42 e0       	ldi	r20, 0x02	; 2
    2cdc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
}
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <KPD_u8GetPressedKey>:



u8 KPD_u8GetPressedKey(void)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	00 d0       	rcall	.+0      	; 0x2cec <KPD_u8GetPressedKey+0x6>
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    2cf0:	19 82       	std	Y+1, r1	; 0x01
    2cf2:	4c c0       	rjmp	.+152    	; 0x2d8c <KPD_u8GetPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
    2cf4:	ea e3       	ldi	r30, 0x3A	; 58
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	80 e1       	ldi	r24, 0x10	; 16
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <KPD_u8GetPressedKey+0x22>
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	2a 95       	dec	r18
    2d0a:	e2 f7       	brpl	.-8      	; 0x2d04 <KPD_u8GetPressedKey+0x1e>
    2d0c:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
    2d0e:	eb e3       	ldi	r30, 0x3B	; 59
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	80 e1       	ldi	r24, 0x10	; 16
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	02 2e       	mov	r0, r18
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <KPD_u8GetPressedKey+0x3e>
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	0a 94       	dec	r0
    2d26:	e2 f7       	brpl	.-8      	; 0x2d20 <KPD_u8GetPressedKey+0x3a>
    2d28:	80 95       	com	r24
    2d2a:	80 83       	st	Z, r24
			for (row = 0; row < N_ROW; row++)
    2d2c:	1a 82       	std	Y+2, r1	; 0x02
    2d2e:	28 c0       	rjmp	.+80     	; 0x2d80 <KPD_u8GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    2d30:	e9 e3       	ldi	r30, 0x39	; 57
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	a9 01       	movw	r20, r18
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <KPD_u8GetPressedKey+0x62>
    2d44:	55 95       	asr	r21
    2d46:	47 95       	ror	r20
    2d48:	8a 95       	dec	r24
    2d4a:	e2 f7       	brpl	.-8      	; 0x2d44 <KPD_u8GetPressedKey+0x5e>
    2d4c:	ca 01       	movw	r24, r20
    2d4e:	81 70       	andi	r24, 0x01	; 1
    2d50:	90 70       	andi	r25, 0x00	; 0
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	91 f4       	brne	.+36     	; 0x2d7a <KPD_u8GetPressedKey+0x94>
#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	98 2f       	mov	r25, r24
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	89 0f       	add	r24, r25
    2d6a:	8f 5f       	subi	r24, 0xFF	; 255
    2d6c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <Keypad_4x4_adjustKeyNumber>
#endif
				}
			}
		}
	}
}
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	8f 5f       	subi	r24, 0xFF	; 255
    2d7e:	8a 83       	std	Y+2, r24	; 0x02
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	84 30       	cpi	r24, 0x04	; 4
    2d84:	a8 f2       	brcs	.-86     	; 0x2d30 <KPD_u8GetPressedKey+0x4a>
u8 KPD_u8GetPressedKey(void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	84 30       	cpi	r24, 0x04	; 4
    2d90:	08 f4       	brcc	.+2      	; 0x2d94 <KPD_u8GetPressedKey+0xae>
    2d92:	b0 cf       	rjmp	.-160    	; 0x2cf4 <KPD_u8GetPressedKey+0xe>
    2d94:	ad cf       	rjmp	.-166    	; 0x2cf0 <KPD_u8GetPressedKey+0xa>

00002d96 <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

 static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	00 d0       	rcall	.+0      	; 0x2d9c <Keypad_4x4_adjustKeyNumber+0x6>
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <Keypad_4x4_adjustKeyNumber+0x8>
    2d9e:	0f 92       	push	r0
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	3c 83       	std	Y+4, r19	; 0x04
    2dae:	2b 83       	std	Y+3, r18	; 0x03
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	9c 81       	ldd	r25, Y+4	; 0x04
    2db4:	88 30       	cpi	r24, 0x08	; 8
    2db6:	91 05       	cpc	r25, r1
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <Keypad_4x4_adjustKeyNumber+0x26>
    2dba:	70 c0       	rjmp	.+224    	; 0x2e9c <Keypad_4x4_adjustKeyNumber+0x106>
    2dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2dc0:	29 30       	cpi	r18, 0x09	; 9
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	5c f5       	brge	.+86     	; 0x2e1c <Keypad_4x4_adjustKeyNumber+0x86>
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	84 30       	cpi	r24, 0x04	; 4
    2dcc:	91 05       	cpc	r25, r1
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <Keypad_4x4_adjustKeyNumber+0x3c>
    2dd0:	59 c0       	rjmp	.+178    	; 0x2e84 <Keypad_4x4_adjustKeyNumber+0xee>
    2dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd6:	25 30       	cpi	r18, 0x05	; 5
    2dd8:	31 05       	cpc	r19, r1
    2dda:	9c f4       	brge	.+38     	; 0x2e02 <Keypad_4x4_adjustKeyNumber+0x6c>
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	9c 81       	ldd	r25, Y+4	; 0x04
    2de0:	82 30       	cpi	r24, 0x02	; 2
    2de2:	91 05       	cpc	r25, r1
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <Keypad_4x4_adjustKeyNumber+0x52>
    2de6:	48 c0       	rjmp	.+144    	; 0x2e78 <Keypad_4x4_adjustKeyNumber+0xe2>
    2de8:	2b 81       	ldd	r18, Y+3	; 0x03
    2dea:	3c 81       	ldd	r19, Y+4	; 0x04
    2dec:	23 30       	cpi	r18, 0x03	; 3
    2dee:	31 05       	cpc	r19, r1
    2df0:	0c f0       	brlt	.+2      	; 0x2df4 <Keypad_4x4_adjustKeyNumber+0x5e>
    2df2:	45 c0       	rjmp	.+138    	; 0x2e7e <Keypad_4x4_adjustKeyNumber+0xe8>
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <Keypad_4x4_adjustKeyNumber+0x6a>
    2dfe:	39 c0       	rjmp	.+114    	; 0x2e72 <Keypad_4x4_adjustKeyNumber+0xdc>
    2e00:	68 c0       	rjmp	.+208    	; 0x2ed2 <Keypad_4x4_adjustKeyNumber+0x13c>
    2e02:	2b 81       	ldd	r18, Y+3	; 0x03
    2e04:	3c 81       	ldd	r19, Y+4	; 0x04
    2e06:	26 30       	cpi	r18, 0x06	; 6
    2e08:	31 05       	cpc	r19, r1
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <Keypad_4x4_adjustKeyNumber+0x78>
    2e0c:	41 c0       	rjmp	.+130    	; 0x2e90 <Keypad_4x4_adjustKeyNumber+0xfa>
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	9c 81       	ldd	r25, Y+4	; 0x04
    2e12:	87 30       	cpi	r24, 0x07	; 7
    2e14:	91 05       	cpc	r25, r1
    2e16:	0c f0       	brlt	.+2      	; 0x2e1a <Keypad_4x4_adjustKeyNumber+0x84>
    2e18:	3e c0       	rjmp	.+124    	; 0x2e96 <Keypad_4x4_adjustKeyNumber+0x100>
    2e1a:	37 c0       	rjmp	.+110    	; 0x2e8a <Keypad_4x4_adjustKeyNumber+0xf4>
    2e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e20:	2c 30       	cpi	r18, 0x0C	; 12
    2e22:	31 05       	cpc	r19, r1
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <Keypad_4x4_adjustKeyNumber+0x92>
    2e26:	46 c0       	rjmp	.+140    	; 0x2eb4 <Keypad_4x4_adjustKeyNumber+0x11e>
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2c:	8d 30       	cpi	r24, 0x0D	; 13
    2e2e:	91 05       	cpc	r25, r1
    2e30:	5c f4       	brge	.+22     	; 0x2e48 <Keypad_4x4_adjustKeyNumber+0xb2>
    2e32:	2b 81       	ldd	r18, Y+3	; 0x03
    2e34:	3c 81       	ldd	r19, Y+4	; 0x04
    2e36:	2a 30       	cpi	r18, 0x0A	; 10
    2e38:	31 05       	cpc	r19, r1
    2e3a:	b1 f1       	breq	.+108    	; 0x2ea8 <Keypad_4x4_adjustKeyNumber+0x112>
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	8b 30       	cpi	r24, 0x0B	; 11
    2e42:	91 05       	cpc	r25, r1
    2e44:	a4 f5       	brge	.+104    	; 0x2eae <Keypad_4x4_adjustKeyNumber+0x118>
    2e46:	2d c0       	rjmp	.+90     	; 0x2ea2 <Keypad_4x4_adjustKeyNumber+0x10c>
    2e48:	2b 81       	ldd	r18, Y+3	; 0x03
    2e4a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e4c:	2e 30       	cpi	r18, 0x0E	; 14
    2e4e:	31 05       	cpc	r19, r1
    2e50:	b9 f1       	breq	.+110    	; 0x2ec0 <Keypad_4x4_adjustKeyNumber+0x12a>
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	9c 81       	ldd	r25, Y+4	; 0x04
    2e56:	8e 30       	cpi	r24, 0x0E	; 14
    2e58:	91 05       	cpc	r25, r1
    2e5a:	7c f1       	brlt	.+94     	; 0x2eba <Keypad_4x4_adjustKeyNumber+0x124>
    2e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e60:	2f 30       	cpi	r18, 0x0F	; 15
    2e62:	31 05       	cpc	r19, r1
    2e64:	81 f1       	breq	.+96     	; 0x2ec6 <Keypad_4x4_adjustKeyNumber+0x130>
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	80 31       	cpi	r24, 0x10	; 16
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	71 f1       	breq	.+92     	; 0x2ecc <Keypad_4x4_adjustKeyNumber+0x136>
    2e70:	30 c0       	rjmp	.+96     	; 0x2ed2 <Keypad_4x4_adjustKeyNumber+0x13c>
	{
		case 1:		return '!';
    2e72:	91 e2       	ldi	r25, 0x21	; 33
    2e74:	9a 83       	std	Y+2, r25	; 0x02
    2e76:	2e c0       	rjmp	.+92     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 2:		return '@';
    2e78:	20 e4       	ldi	r18, 0x40	; 64
    2e7a:	2a 83       	std	Y+2, r18	; 0x02
    2e7c:	2b c0       	rjmp	.+86     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 3:		return '#';
    2e7e:	33 e2       	ldi	r19, 0x23	; 35
    2e80:	3a 83       	std	Y+2, r19	; 0x02
    2e82:	28 c0       	rjmp	.+80     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 4:		return '$';
    2e84:	84 e2       	ldi	r24, 0x24	; 36
    2e86:	8a 83       	std	Y+2, r24	; 0x02
    2e88:	25 c0       	rjmp	.+74     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 5:		return '*';
    2e8a:	9a e2       	ldi	r25, 0x2A	; 42
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	22 c0       	rjmp	.+68     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 6:		return '4';
    2e90:	24 e3       	ldi	r18, 0x34	; 52
    2e92:	2a 83       	std	Y+2, r18	; 0x02
    2e94:	1f c0       	rjmp	.+62     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 7:		return '7';
    2e96:	37 e3       	ldi	r19, 0x37	; 55
    2e98:	3a 83       	std	Y+2, r19	; 0x02
    2e9a:	1c c0       	rjmp	.+56     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 8:		return '1';
    2e9c:	81 e3       	ldi	r24, 0x31	; 49
    2e9e:	8a 83       	std	Y+2, r24	; 0x02
    2ea0:	19 c0       	rjmp	.+50     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 9:		return '0';
    2ea2:	90 e3       	ldi	r25, 0x30	; 48
    2ea4:	9a 83       	std	Y+2, r25	; 0x02
    2ea6:	16 c0       	rjmp	.+44     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 10:	return '5';
    2ea8:	25 e3       	ldi	r18, 0x35	; 53
    2eaa:	2a 83       	std	Y+2, r18	; 0x02
    2eac:	13 c0       	rjmp	.+38     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 11:	return '8';
    2eae:	38 e3       	ldi	r19, 0x38	; 56
    2eb0:	3a 83       	std	Y+2, r19	; 0x02
    2eb2:	10 c0       	rjmp	.+32     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 12:	return '2';
    2eb4:	82 e3       	ldi	r24, 0x32	; 50
    2eb6:	8a 83       	std	Y+2, r24	; 0x02
    2eb8:	0d c0       	rjmp	.+26     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 13:	return '#';
    2eba:	93 e2       	ldi	r25, 0x23	; 35
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	0a c0       	rjmp	.+20     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 14:	return '6';
    2ec0:	26 e3       	ldi	r18, 0x36	; 54
    2ec2:	2a 83       	std	Y+2, r18	; 0x02
    2ec4:	07 c0       	rjmp	.+14     	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 15:	return '9';
    2ec6:	39 e3       	ldi	r19, 0x39	; 57
    2ec8:	3a 83       	std	Y+2, r19	; 0x02
    2eca:	04 c0       	rjmp	.+8      	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
		break;
		case 16:	return '3';
    2ecc:	83 e3       	ldi	r24, 0x33	; 51
    2ece:	8a 83       	std	Y+2, r24	; 0x02
    2ed0:	01 c0       	rjmp	.+2      	; 0x2ed4 <Keypad_4x4_adjustKeyNumber+0x13e>
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <Keypad_4x4_adjustKeyNumber+0x142>
		break;
	}
}
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	9d 83       	std	Y+5, r25	; 0x05
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	cf 91       	pop	r28
    2ee6:	df 91       	pop	r29
    2ee8:	08 95       	ret

00002eea <LED_u8TurnOn>:
#include "LED_interface.h"
#include "LED_config.h"
#include "LED_private.h"

u8 LED_u8TurnOn(LED_t * LED)
{
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <LED_u8TurnOn+0x6>
    2ef0:	0f 92       	push	r0
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	9b 83       	std	Y+3, r25	; 0x03
    2ef8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    2efa:	19 82       	std	Y+1, r1	; 0x01
	if((LED -> ConnType) == LED_u8SOURSE)
    2efc:	ea 81       	ldd	r30, Y+2	; 0x02
    2efe:	fb 81       	ldd	r31, Y+3	; 0x03
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	88 23       	and	r24, r24
    2f04:	59 f4       	brne	.+22     	; 0x2f1c <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_HIGH);
    2f06:	ea 81       	ldd	r30, Y+2	; 0x02
    2f08:	fb 81       	ldd	r31, Y+3	; 0x03
    2f0a:	80 81       	ld	r24, Z
    2f0c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f0e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f10:	91 81       	ldd	r25, Z+1	; 0x01
    2f12:	69 2f       	mov	r22, r25
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
    2f1a:	12 c0       	rjmp	.+36     	; 0x2f40 <LED_u8TurnOn+0x56>
	}
	else if((LED -> ConnType) == LED_u8SINK)
    2f1c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f1e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	59 f4       	brne	.+22     	; 0x2f3c <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_LOW);
    2f26:	ea 81       	ldd	r30, Y+2	; 0x02
    2f28:	fb 81       	ldd	r31, Y+3	; 0x03
    2f2a:	80 81       	ld	r24, Z
    2f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	69 2f       	mov	r22, r25
    2f34:	40 e0       	ldi	r20, 0x00	; 0
    2f36:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <LED_u8TurnOn+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <LED_u8TurnOff>:

u8 LED_u8TurnOff(LED_t * LED)
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <LED_u8TurnOff+0x6>
    2f54:	0f 92       	push	r0
    2f56:	cd b7       	in	r28, 0x3d	; 61
    2f58:	de b7       	in	r29, 0x3e	; 62
    2f5a:	9b 83       	std	Y+3, r25	; 0x03
    2f5c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    2f5e:	19 82       	std	Y+1, r1	; 0x01

	if((LED -> ConnType) == LED_u8SOURSE)
    2f60:	ea 81       	ldd	r30, Y+2	; 0x02
    2f62:	fb 81       	ldd	r31, Y+3	; 0x03
    2f64:	82 81       	ldd	r24, Z+2	; 0x02
    2f66:	88 23       	and	r24, r24
    2f68:	59 f4       	brne	.+22     	; 0x2f80 <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_LOW);
    2f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f6e:	80 81       	ld	r24, Z
    2f70:	ea 81       	ldd	r30, Y+2	; 0x02
    2f72:	fb 81       	ldd	r31, Y+3	; 0x03
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	69 2f       	mov	r22, r25
    2f78:	40 e0       	ldi	r20, 0x00	; 0
    2f7a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
    2f7e:	12 c0       	rjmp	.+36     	; 0x2fa4 <LED_u8TurnOff+0x56>
	}
	else if((LED -> ConnType) == LED_u8SINK)
    2f80:	ea 81       	ldd	r30, Y+2	; 0x02
    2f82:	fb 81       	ldd	r31, Y+3	; 0x03
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	81 30       	cpi	r24, 0x01	; 1
    2f88:	59 f4       	brne	.+22     	; 0x2fa0 <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinDirection(LED -> Port , LED -> Pin , DIO_u8PIN_HIGH);
    2f8a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f8c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f8e:	80 81       	ld	r24, Z
    2f90:	ea 81       	ldd	r30, Y+2	; 0x02
    2f92:	fb 81       	ldd	r31, Y+3	; 0x03
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	69 2f       	mov	r22, r25
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <DIO_u8SetPinDirection>
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <LED_u8TurnOff+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	08 95       	ret

00002fb2 <main>:
#define Entered_The_Home          0x00
#define Max_Tries                 3


int main(void)
{
    2fb2:	0f 93       	push	r16
    2fb4:	1f 93       	push	r17
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	c0 52       	subi	r28, 0x20	; 32
    2fc0:	d1 40       	sbci	r29, 0x01	; 1
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
	u8 Local_au8Password[4];
	u8 Local_u8Flag = 0;
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e4 5e       	subi	r30, 0xE4	; 228
    2fd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd2:	10 82       	st	Z, r1
	u8 Local_u8ReadPassword = KPD_NO_PRESSED_KEY;
    2fd4:	fe 01       	movw	r30, r28
    2fd6:	e5 5e       	subi	r30, 0xE5	; 229
    2fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fda:	8f ef       	ldi	r24, 0xFF	; 255
    2fdc:	80 83       	st	Z, r24
	u8 Local_u8Tries = Max_Tries;
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e6 5e       	subi	r30, 0xE6	; 230
    2fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe4:	83 e0       	ldi	r24, 0x03	; 3
    2fe6:	80 83       	st	Z, r24
	u8 i;

	/* initialize DIO pins */
	DIO_voidInit();
    2fe8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <DIO_voidInit>

	/* Initialize Character LCD */
	CLCD_voidInit();
    2fec:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <CLCD_voidInit>

	/* Initialize Keypad */
	KPD_voidInit();
    2ff0:	0e 94 30 16 	call	0x2c60	; 0x2c60 <KPD_voidInit>

	/* Initialize DC Motor*/
	DCM_voidInit();
    2ff4:	0e 94 66 10 	call	0x20cc	; 0x20cc <DCM_voidInit>

	/* Control the position (0,0) of the printed characters */
	CLCD_voidGoToXY(0,0);
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>

	if(EEPROM_u8ReadeData(EEPROM_Status_Flag)==First_Use) // to check if its the first time to use the safe
    3000:	80 e2       	ldi	r24, 0x20	; 32
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3008:	8f 3f       	cpi	r24, 0xFF	; 255
    300a:	91 05       	cpc	r25, r1
    300c:	09 f0       	breq	.+2      	; 0x3010 <main+0x5e>
    300e:	08 c1       	rjmp	.+528    	; 0x3220 <main+0x26e>
	{
		CLCD_voidSendString("Set Password:");
    3010:	80 e6       	ldi	r24, 0x60	; 96
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
		for( i=0; i<=3 ; i++)
    3018:	fe 01       	movw	r30, r28
    301a:	e7 5e       	subi	r30, 0xE7	; 231
    301c:	fe 4f       	sbci	r31, 0xFE	; 254
    301e:	10 82       	st	Z, r1
    3020:	f2 c0       	rjmp	.+484    	; 0x3206 <main+0x254>
		{
			do
			{
				Local_u8ReadPassword = KPD_u8GetPressedKey();
    3022:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <KPD_u8GetPressedKey>
    3026:	fe 01       	movw	r30, r28
    3028:	e5 5e       	subi	r30, 0xE5	; 229
    302a:	fe 4f       	sbci	r31, 0xFE	; 254
    302c:	80 83       	st	Z, r24

			} while (Local_u8ReadPassword == KPD_NO_PRESSED_KEY);
    302e:	fe 01       	movw	r30, r28
    3030:	e5 5e       	subi	r30, 0xE5	; 229
    3032:	fe 4f       	sbci	r31, 0xFE	; 254
    3034:	80 81       	ld	r24, Z
    3036:	8f 3f       	cpi	r24, 0xFF	; 255
    3038:	a1 f3       	breq	.-24     	; 0x3022 <main+0x70>

			CLCD_voidGoToXY(1,i);
    303a:	fe 01       	movw	r30, r28
    303c:	e7 5e       	subi	r30, 0xE7	; 231
    303e:	fe 4f       	sbci	r31, 0xFE	; 254
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	60 81       	ld	r22, Z
    3044:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
			CLCD_voidSendData(Local_u8ReadPassword);
    3048:	fe 01       	movw	r30, r28
    304a:	e5 5e       	subi	r30, 0xE5	; 229
    304c:	fe 4f       	sbci	r31, 0xFE	; 254
    304e:	80 81       	ld	r24, Z
    3050:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
    3054:	fe 01       	movw	r30, r28
    3056:	eb 5e       	subi	r30, 0xEB	; 235
    3058:	fe 4f       	sbci	r31, 0xFE	; 254
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	aa ef       	ldi	r26, 0xFA	; 250
    3060:	b3 e4       	ldi	r27, 0x43	; 67
    3062:	80 83       	st	Z, r24
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	a2 83       	std	Z+2, r26	; 0x02
    3068:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306a:	8e 01       	movw	r16, r28
    306c:	0f 5e       	subi	r16, 0xEF	; 239
    306e:	1e 4f       	sbci	r17, 0xFE	; 254
    3070:	fe 01       	movw	r30, r28
    3072:	eb 5e       	subi	r30, 0xEB	; 235
    3074:	fe 4f       	sbci	r31, 0xFE	; 254
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	4a ef       	ldi	r20, 0xFA	; 250
    3084:	54 e4       	ldi	r21, 0x44	; 68
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	f8 01       	movw	r30, r16
    3090:	80 83       	st	Z, r24
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	a2 83       	std	Z+2, r26	; 0x02
    3096:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3098:	fe 01       	movw	r30, r28
    309a:	ef 5e       	subi	r30, 0xEF	; 239
    309c:	fe 4f       	sbci	r31, 0xFE	; 254
    309e:	60 81       	ld	r22, Z
    30a0:	71 81       	ldd	r23, Z+1	; 0x01
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	93 81       	ldd	r25, Z+3	; 0x03
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e8       	ldi	r20, 0x80	; 128
    30ac:	5f e3       	ldi	r21, 0x3F	; 63
    30ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b2:	88 23       	and	r24, r24
    30b4:	44 f4       	brge	.+16     	; 0x30c6 <main+0x114>
		__ticks = 1;
    30b6:	fe 01       	movw	r30, r28
    30b8:	e1 5f       	subi	r30, 0xF1	; 241
    30ba:	fe 4f       	sbci	r31, 0xFE	; 254
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24
    30c4:	64 c0       	rjmp	.+200    	; 0x318e <main+0x1dc>
	else if (__tmp > 65535)
    30c6:	fe 01       	movw	r30, r28
    30c8:	ef 5e       	subi	r30, 0xEF	; 239
    30ca:	fe 4f       	sbci	r31, 0xFE	; 254
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	3f ef       	ldi	r19, 0xFF	; 255
    30d8:	4f e7       	ldi	r20, 0x7F	; 127
    30da:	57 e4       	ldi	r21, 0x47	; 71
    30dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e0:	18 16       	cp	r1, r24
    30e2:	0c f0       	brlt	.+2      	; 0x30e6 <main+0x134>
    30e4:	43 c0       	rjmp	.+134    	; 0x316c <main+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e6:	fe 01       	movw	r30, r28
    30e8:	eb 5e       	subi	r30, 0xEB	; 235
    30ea:	fe 4f       	sbci	r31, 0xFE	; 254
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e2       	ldi	r20, 0x20	; 32
    30fa:	51 e4       	ldi	r21, 0x41	; 65
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	8e 01       	movw	r16, r28
    3106:	01 5f       	subi	r16, 0xF1	; 241
    3108:	1e 4f       	sbci	r17, 0xFE	; 254
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	f8 01       	movw	r30, r16
    3118:	91 83       	std	Z+1, r25	; 0x01
    311a:	80 83       	st	Z, r24
    311c:	1f c0       	rjmp	.+62     	; 0x315c <main+0x1aa>
    311e:	fe 01       	movw	r30, r28
    3120:	e3 5f       	subi	r30, 0xF3	; 243
    3122:	fe 4f       	sbci	r31, 0xFE	; 254
    3124:	88 ec       	ldi	r24, 0xC8	; 200
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
    312c:	fe 01       	movw	r30, r28
    312e:	e3 5f       	subi	r30, 0xF3	; 243
    3130:	fe 4f       	sbci	r31, 0xFE	; 254
    3132:	80 81       	ld	r24, Z
    3134:	91 81       	ldd	r25, Z+1	; 0x01
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <main+0x184>
    313a:	fe 01       	movw	r30, r28
    313c:	e3 5f       	subi	r30, 0xF3	; 243
    313e:	fe 4f       	sbci	r31, 0xFE	; 254
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3144:	de 01       	movw	r26, r28
    3146:	a1 5f       	subi	r26, 0xF1	; 241
    3148:	be 4f       	sbci	r27, 0xFE	; 254
    314a:	fe 01       	movw	r30, r28
    314c:	e1 5f       	subi	r30, 0xF1	; 241
    314e:	fe 4f       	sbci	r31, 0xFE	; 254
    3150:	80 81       	ld	r24, Z
    3152:	91 81       	ldd	r25, Z+1	; 0x01
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	11 96       	adiw	r26, 0x01	; 1
    3158:	9c 93       	st	X, r25
    315a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315c:	fe 01       	movw	r30, r28
    315e:	e1 5f       	subi	r30, 0xF1	; 241
    3160:	fe 4f       	sbci	r31, 0xFE	; 254
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	d1 f6       	brne	.-76     	; 0x311e <main+0x16c>
    316a:	27 c0       	rjmp	.+78     	; 0x31ba <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	8e 01       	movw	r16, r28
    316e:	01 5f       	subi	r16, 0xF1	; 241
    3170:	1e 4f       	sbci	r17, 0xFE	; 254
    3172:	fe 01       	movw	r30, r28
    3174:	ef 5e       	subi	r30, 0xEF	; 239
    3176:	fe 4f       	sbci	r31, 0xFE	; 254
    3178:	60 81       	ld	r22, Z
    317a:	71 81       	ldd	r23, Z+1	; 0x01
    317c:	82 81       	ldd	r24, Z+2	; 0x02
    317e:	93 81       	ldd	r25, Z+3	; 0x03
    3180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	f8 01       	movw	r30, r16
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
    318e:	de 01       	movw	r26, r28
    3190:	a5 5f       	subi	r26, 0xF5	; 245
    3192:	be 4f       	sbci	r27, 0xFE	; 254
    3194:	fe 01       	movw	r30, r28
    3196:	e1 5f       	subi	r30, 0xF1	; 241
    3198:	fe 4f       	sbci	r31, 0xFE	; 254
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	8d 93       	st	X+, r24
    31a0:	9c 93       	st	X, r25
    31a2:	fe 01       	movw	r30, r28
    31a4:	e5 5f       	subi	r30, 0xF5	; 245
    31a6:	fe 4f       	sbci	r31, 0xFE	; 254
    31a8:	80 81       	ld	r24, Z
    31aa:	91 81       	ldd	r25, Z+1	; 0x01
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <main+0x1fa>
    31b0:	fe 01       	movw	r30, r28
    31b2:	e5 5f       	subi	r30, 0xF5	; 245
    31b4:	fe 4f       	sbci	r31, 0xFE	; 254
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	80 83       	st	Z, r24
			_delay_ms(500);
			CLCD_voidGoToXY(1,i);
    31ba:	fe 01       	movw	r30, r28
    31bc:	e7 5e       	subi	r30, 0xE7	; 231
    31be:	fe 4f       	sbci	r31, 0xFE	; 254
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	60 81       	ld	r22, Z
    31c4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
			CLCD_voidSendData('*');
    31c8:	8a e2       	ldi	r24, 0x2A	; 42
    31ca:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
			EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
    31ce:	fe 01       	movw	r30, r28
    31d0:	e7 5e       	subi	r30, 0xE7	; 231
    31d2:	fe 4f       	sbci	r31, 0xFE	; 254
    31d4:	80 81       	ld	r24, Z
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	ac 01       	movw	r20, r24
    31dc:	4f 5d       	subi	r20, 0xDF	; 223
    31de:	5f 4f       	sbci	r21, 0xFF	; 255
    31e0:	fe 01       	movw	r30, r28
    31e2:	e5 5e       	subi	r30, 0xE5	; 229
    31e4:	fe 4f       	sbci	r31, 0xFE	; 254
    31e6:	80 81       	ld	r24, Z
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	ca 01       	movw	r24, r20
    31ee:	b9 01       	movw	r22, r18
    31f0:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <EEPROM_enuWriteData>
	CLCD_voidGoToXY(0,0);

	if(EEPROM_u8ReadeData(EEPROM_Status_Flag)==First_Use) // to check if its the first time to use the safe
	{
		CLCD_voidSendString("Set Password:");
		for( i=0; i<=3 ; i++)
    31f4:	de 01       	movw	r26, r28
    31f6:	a7 5e       	subi	r26, 0xE7	; 231
    31f8:	be 4f       	sbci	r27, 0xFE	; 254
    31fa:	fe 01       	movw	r30, r28
    31fc:	e7 5e       	subi	r30, 0xE7	; 231
    31fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3200:	80 81       	ld	r24, Z
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	8c 93       	st	X, r24
    3206:	fe 01       	movw	r30, r28
    3208:	e7 5e       	subi	r30, 0xE7	; 231
    320a:	fe 4f       	sbci	r31, 0xFE	; 254
    320c:	80 81       	ld	r24, Z
    320e:	84 30       	cpi	r24, 0x04	; 4
    3210:	08 f4       	brcc	.+2      	; 0x3214 <main+0x262>
    3212:	07 cf       	rjmp	.-498    	; 0x3022 <main+0x70>
			CLCD_voidGoToXY(1,i);
			CLCD_voidSendData('*');
			EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
		}

		EEPROM_enuWriteData(EEPROM_Status_Flag,Entered_The_Home); // set the flag to 0
    3214:	80 e2       	ldi	r24, 0x20	; 32
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <EEPROM_enuWriteData>
	}


	/* Clear LCD */
	CLCD_voidClearScreen();
    3220:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>

	/* Control the position (0,2) of the printed characters */
	CLCD_voidGoToXY(0,2);
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	62 e0       	ldi	r22, 0x02	; 2
    3228:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>

	/* Print string in LCD */
	CLCD_voidSendString("Welcome To Home");
    322c:	8e e6       	ldi	r24, 0x6E	; 110
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
    3234:	fe 01       	movw	r30, r28
    3236:	e9 5f       	subi	r30, 0xF9	; 249
    3238:	fe 4f       	sbci	r31, 0xFE	; 254
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	aa e7       	ldi	r26, 0x7A	; 122
    3240:	b4 e4       	ldi	r27, 0x44	; 68
    3242:	80 83       	st	Z, r24
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	a2 83       	std	Z+2, r26	; 0x02
    3248:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324a:	8e 01       	movw	r16, r28
    324c:	0d 5f       	subi	r16, 0xFD	; 253
    324e:	1e 4f       	sbci	r17, 0xFE	; 254
    3250:	fe 01       	movw	r30, r28
    3252:	e9 5f       	subi	r30, 0xF9	; 249
    3254:	fe 4f       	sbci	r31, 0xFE	; 254
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	82 81       	ldd	r24, Z+2	; 0x02
    325c:	93 81       	ldd	r25, Z+3	; 0x03
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	4a ef       	ldi	r20, 0xFA	; 250
    3264:	54 e4       	ldi	r21, 0x44	; 68
    3266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	f8 01       	movw	r30, r16
    3270:	80 83       	st	Z, r24
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	a2 83       	std	Z+2, r26	; 0x02
    3276:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3278:	fe 01       	movw	r30, r28
    327a:	ed 5f       	subi	r30, 0xFD	; 253
    327c:	fe 4f       	sbci	r31, 0xFE	; 254
    327e:	60 81       	ld	r22, Z
    3280:	71 81       	ldd	r23, Z+1	; 0x01
    3282:	82 81       	ldd	r24, Z+2	; 0x02
    3284:	93 81       	ldd	r25, Z+3	; 0x03
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	40 e8       	ldi	r20, 0x80	; 128
    328c:	5f e3       	ldi	r21, 0x3F	; 63
    328e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3292:	88 23       	and	r24, r24
    3294:	44 f4       	brge	.+16     	; 0x32a6 <main+0x2f4>
		__ticks = 1;
    3296:	fe 01       	movw	r30, r28
    3298:	ef 5f       	subi	r30, 0xFF	; 255
    329a:	fe 4f       	sbci	r31, 0xFE	; 254
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	91 83       	std	Z+1, r25	; 0x01
    32a2:	80 83       	st	Z, r24
    32a4:	65 c0       	rjmp	.+202    	; 0x3370 <main+0x3be>
	else if (__tmp > 65535)
    32a6:	fe 01       	movw	r30, r28
    32a8:	ed 5f       	subi	r30, 0xFD	; 253
    32aa:	fe 4f       	sbci	r31, 0xFE	; 254
    32ac:	60 81       	ld	r22, Z
    32ae:	71 81       	ldd	r23, Z+1	; 0x01
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	93 81       	ldd	r25, Z+3	; 0x03
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	3f ef       	ldi	r19, 0xFF	; 255
    32b8:	4f e7       	ldi	r20, 0x7F	; 127
    32ba:	57 e4       	ldi	r21, 0x47	; 71
    32bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c0:	18 16       	cp	r1, r24
    32c2:	0c f0       	brlt	.+2      	; 0x32c6 <main+0x314>
    32c4:	44 c0       	rjmp	.+136    	; 0x334e <main+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c6:	fe 01       	movw	r30, r28
    32c8:	e9 5f       	subi	r30, 0xF9	; 249
    32ca:	fe 4f       	sbci	r31, 0xFE	; 254
    32cc:	60 81       	ld	r22, Z
    32ce:	71 81       	ldd	r23, Z+1	; 0x01
    32d0:	82 81       	ldd	r24, Z+2	; 0x02
    32d2:	93 81       	ldd	r25, Z+3	; 0x03
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e2       	ldi	r20, 0x20	; 32
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	8e 01       	movw	r16, r28
    32e6:	0f 5f       	subi	r16, 0xFF	; 255
    32e8:	1e 4f       	sbci	r17, 0xFE	; 254
    32ea:	bc 01       	movw	r22, r24
    32ec:	cd 01       	movw	r24, r26
    32ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	f8 01       	movw	r30, r16
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
    32fc:	1f c0       	rjmp	.+62     	; 0x333c <main+0x38a>
    32fe:	fe 01       	movw	r30, r28
    3300:	e1 50       	subi	r30, 0x01	; 1
    3302:	ff 4f       	sbci	r31, 0xFF	; 255
    3304:	88 ec       	ldi	r24, 0xC8	; 200
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	91 83       	std	Z+1, r25	; 0x01
    330a:	80 83       	st	Z, r24
    330c:	fe 01       	movw	r30, r28
    330e:	e1 50       	subi	r30, 0x01	; 1
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	91 81       	ldd	r25, Z+1	; 0x01
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <main+0x364>
    331a:	fe 01       	movw	r30, r28
    331c:	e1 50       	subi	r30, 0x01	; 1
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3324:	de 01       	movw	r26, r28
    3326:	af 5f       	subi	r26, 0xFF	; 255
    3328:	be 4f       	sbci	r27, 0xFE	; 254
    332a:	fe 01       	movw	r30, r28
    332c:	ef 5f       	subi	r30, 0xFF	; 255
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	80 81       	ld	r24, Z
    3332:	91 81       	ldd	r25, Z+1	; 0x01
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	11 96       	adiw	r26, 0x01	; 1
    3338:	9c 93       	st	X, r25
    333a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333c:	fe 01       	movw	r30, r28
    333e:	ef 5f       	subi	r30, 0xFF	; 255
    3340:	fe 4f       	sbci	r31, 0xFE	; 254
    3342:	80 81       	ld	r24, Z
    3344:	91 81       	ldd	r25, Z+1	; 0x01
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	d1 f6       	brne	.-76     	; 0x32fe <main+0x34c>
    334a:	0c 94 09 28 	jmp	0x5012	; 0x5012 <main+0x2060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334e:	8e 01       	movw	r16, r28
    3350:	0f 5f       	subi	r16, 0xFF	; 255
    3352:	1e 4f       	sbci	r17, 0xFE	; 254
    3354:	fe 01       	movw	r30, r28
    3356:	ed 5f       	subi	r30, 0xFD	; 253
    3358:	fe 4f       	sbci	r31, 0xFE	; 254
    335a:	60 81       	ld	r22, Z
    335c:	71 81       	ldd	r23, Z+1	; 0x01
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	93 81       	ldd	r25, Z+3	; 0x03
    3362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	f8 01       	movw	r30, r16
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	80 83       	st	Z, r24
    3370:	de 01       	movw	r26, r28
    3372:	a3 50       	subi	r26, 0x03	; 3
    3374:	bf 4f       	sbci	r27, 0xFF	; 255
    3376:	fe 01       	movw	r30, r28
    3378:	ef 5f       	subi	r30, 0xFF	; 255
    337a:	fe 4f       	sbci	r31, 0xFE	; 254
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	11 96       	adiw	r26, 0x01	; 1
    3382:	9c 93       	st	X, r25
    3384:	8e 93       	st	-X, r24
    3386:	fe 01       	movw	r30, r28
    3388:	e3 50       	subi	r30, 0x03	; 3
    338a:	ff 4f       	sbci	r31, 0xFF	; 255
    338c:	80 81       	ld	r24, Z
    338e:	91 81       	ldd	r25, Z+1	; 0x01
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	f1 f7       	brne	.-4      	; 0x3390 <main+0x3de>
    3394:	fe 01       	movw	r30, r28
    3396:	e3 50       	subi	r30, 0x03	; 3
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	91 83       	std	Z+1, r25	; 0x01
    339c:	80 83       	st	Z, r24
    339e:	0c 94 09 28 	jmp	0x5012	; 0x5012 <main+0x2060>
	for(;;)
	{
		while(Local_u8Flag == 0)
		{
			/* Clear LCD */
			CLCD_voidClearScreen();
    33a2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>

			/* Control the position (0,2) and print string in LCD  */
			CLCD_voidGoToXY(0,2);
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	62 e0       	ldi	r22, 0x02	; 2
    33aa:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
			CLCD_voidSendString("Chose a Mode");
    33ae:	8e e7       	ldi	r24, 0x7E	; 126
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
    33b6:	fe 01       	movw	r30, r28
    33b8:	e7 50       	subi	r30, 0x07	; 7
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	a8 ec       	ldi	r26, 0xC8	; 200
    33c2:	b2 e4       	ldi	r27, 0x42	; 66
    33c4:	80 83       	st	Z, r24
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	a2 83       	std	Z+2, r26	; 0x02
    33ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33cc:	8e 01       	movw	r16, r28
    33ce:	0b 50       	subi	r16, 0x0B	; 11
    33d0:	1f 4f       	sbci	r17, 0xFF	; 255
    33d2:	fe 01       	movw	r30, r28
    33d4:	e7 50       	subi	r30, 0x07	; 7
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	60 81       	ld	r22, Z
    33da:	71 81       	ldd	r23, Z+1	; 0x01
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	4a ef       	ldi	r20, 0xFA	; 250
    33e6:	54 e4       	ldi	r21, 0x44	; 68
    33e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	f8 01       	movw	r30, r16
    33f2:	80 83       	st	Z, r24
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	a2 83       	std	Z+2, r26	; 0x02
    33f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33fa:	fe 01       	movw	r30, r28
    33fc:	eb 50       	subi	r30, 0x0B	; 11
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	60 81       	ld	r22, Z
    3402:	71 81       	ldd	r23, Z+1	; 0x01
    3404:	82 81       	ldd	r24, Z+2	; 0x02
    3406:	93 81       	ldd	r25, Z+3	; 0x03
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	40 e8       	ldi	r20, 0x80	; 128
    340e:	5f e3       	ldi	r21, 0x3F	; 63
    3410:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3414:	88 23       	and	r24, r24
    3416:	44 f4       	brge	.+16     	; 0x3428 <main+0x476>
		__ticks = 1;
    3418:	fe 01       	movw	r30, r28
    341a:	ed 50       	subi	r30, 0x0D	; 13
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
    3426:	64 c0       	rjmp	.+200    	; 0x34f0 <main+0x53e>
	else if (__tmp > 65535)
    3428:	fe 01       	movw	r30, r28
    342a:	eb 50       	subi	r30, 0x0B	; 11
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	3f ef       	ldi	r19, 0xFF	; 255
    343a:	4f e7       	ldi	r20, 0x7F	; 127
    343c:	57 e4       	ldi	r21, 0x47	; 71
    343e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3442:	18 16       	cp	r1, r24
    3444:	0c f0       	brlt	.+2      	; 0x3448 <main+0x496>
    3446:	43 c0       	rjmp	.+134    	; 0x34ce <main+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3448:	fe 01       	movw	r30, r28
    344a:	e7 50       	subi	r30, 0x07	; 7
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	60 81       	ld	r22, Z
    3450:	71 81       	ldd	r23, Z+1	; 0x01
    3452:	82 81       	ldd	r24, Z+2	; 0x02
    3454:	93 81       	ldd	r25, Z+3	; 0x03
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	40 e2       	ldi	r20, 0x20	; 32
    345c:	51 e4       	ldi	r21, 0x41	; 65
    345e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	8e 01       	movw	r16, r28
    3468:	0d 50       	subi	r16, 0x0D	; 13
    346a:	1f 4f       	sbci	r17, 0xFF	; 255
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	f8 01       	movw	r30, r16
    347a:	91 83       	std	Z+1, r25	; 0x01
    347c:	80 83       	st	Z, r24
    347e:	1f c0       	rjmp	.+62     	; 0x34be <main+0x50c>
    3480:	fe 01       	movw	r30, r28
    3482:	ef 50       	subi	r30, 0x0F	; 15
    3484:	ff 4f       	sbci	r31, 0xFF	; 255
    3486:	88 ec       	ldi	r24, 0xC8	; 200
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	91 83       	std	Z+1, r25	; 0x01
    348c:	80 83       	st	Z, r24
    348e:	fe 01       	movw	r30, r28
    3490:	ef 50       	subi	r30, 0x0F	; 15
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	80 81       	ld	r24, Z
    3496:	91 81       	ldd	r25, Z+1	; 0x01
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <main+0x4e6>
    349c:	fe 01       	movw	r30, r28
    349e:	ef 50       	subi	r30, 0x0F	; 15
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	91 83       	std	Z+1, r25	; 0x01
    34a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a6:	de 01       	movw	r26, r28
    34a8:	ad 50       	subi	r26, 0x0D	; 13
    34aa:	bf 4f       	sbci	r27, 0xFF	; 255
    34ac:	fe 01       	movw	r30, r28
    34ae:	ed 50       	subi	r30, 0x0D	; 13
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	11 96       	adiw	r26, 0x01	; 1
    34ba:	9c 93       	st	X, r25
    34bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34be:	fe 01       	movw	r30, r28
    34c0:	ed 50       	subi	r30, 0x0D	; 13
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	00 97       	sbiw	r24, 0x00	; 0
    34ca:	d1 f6       	brne	.-76     	; 0x3480 <main+0x4ce>
    34cc:	27 c0       	rjmp	.+78     	; 0x351c <main+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ce:	8e 01       	movw	r16, r28
    34d0:	0d 50       	subi	r16, 0x0D	; 13
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	fe 01       	movw	r30, r28
    34d6:	eb 50       	subi	r30, 0x0B	; 11
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	60 81       	ld	r22, Z
    34dc:	71 81       	ldd	r23, Z+1	; 0x01
    34de:	82 81       	ldd	r24, Z+2	; 0x02
    34e0:	93 81       	ldd	r25, Z+3	; 0x03
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	f8 01       	movw	r30, r16
    34ec:	91 83       	std	Z+1, r25	; 0x01
    34ee:	80 83       	st	Z, r24
    34f0:	de 01       	movw	r26, r28
    34f2:	a1 51       	subi	r26, 0x11	; 17
    34f4:	bf 4f       	sbci	r27, 0xFF	; 255
    34f6:	fe 01       	movw	r30, r28
    34f8:	ed 50       	subi	r30, 0x0D	; 13
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	8d 93       	st	X+, r24
    3502:	9c 93       	st	X, r25
    3504:	fe 01       	movw	r30, r28
    3506:	e1 51       	subi	r30, 0x11	; 17
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	80 81       	ld	r24, Z
    350c:	91 81       	ldd	r25, Z+1	; 0x01
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <main+0x55c>
    3512:	fe 01       	movw	r30, r28
    3514:	e1 51       	subi	r30, 0x11	; 17
    3516:	ff 4f       	sbci	r31, 0xFF	; 255
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24

			/* wait 1000 ms */
			_delay_ms(100);

			/* Clear LCD */
			CLCD_voidClearScreen();
    351c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>

			Local_u8ReadPassword = KPD_NO_PRESSED_KEY;
    3520:	fe 01       	movw	r30, r28
    3522:	e5 5e       	subi	r30, 0xE5	; 229
    3524:	fe 4f       	sbci	r31, 0xFE	; 254
    3526:	8f ef       	ldi	r24, 0xFF	; 255
    3528:	80 83       	st	Z, r24
			CLCD_voidSendString("1-Enter Pass");
    352a:	8b e8       	ldi	r24, 0x8B	; 139
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
			CLCD_voidGoToXY(1,0);
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
			CLCD_voidSendString("2-Change Pass");
    353a:	88 e9       	ldi	r24, 0x98	; 152
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
			do
			{
				Local_u8ReadPassword = KPD_u8GetPressedKey();
    3542:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <KPD_u8GetPressedKey>
    3546:	fe 01       	movw	r30, r28
    3548:	e5 5e       	subi	r30, 0xE5	; 229
    354a:	fe 4f       	sbci	r31, 0xFE	; 254
    354c:	80 83       	st	Z, r24

			} while (Local_u8ReadPassword == KPD_NO_PRESSED_KEY);
    354e:	fe 01       	movw	r30, r28
    3550:	e5 5e       	subi	r30, 0xE5	; 229
    3552:	fe 4f       	sbci	r31, 0xFE	; 254
    3554:	80 81       	ld	r24, Z
    3556:	8f 3f       	cpi	r24, 0xFF	; 255
    3558:	a1 f3       	breq	.-24     	; 0x3542 <main+0x590>
    355a:	fe 01       	movw	r30, r28
    355c:	e5 51       	subi	r30, 0x15	; 21
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	aa ef       	ldi	r26, 0xFA	; 250
    3566:	b3 e4       	ldi	r27, 0x43	; 67
    3568:	80 83       	st	Z, r24
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	a2 83       	std	Z+2, r26	; 0x02
    356e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3570:	8e 01       	movw	r16, r28
    3572:	09 51       	subi	r16, 0x19	; 25
    3574:	1f 4f       	sbci	r17, 0xFF	; 255
    3576:	fe 01       	movw	r30, r28
    3578:	e5 51       	subi	r30, 0x15	; 21
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	93 81       	ldd	r25, Z+3	; 0x03
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	4a ef       	ldi	r20, 0xFA	; 250
    358a:	54 e4       	ldi	r21, 0x44	; 68
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	f8 01       	movw	r30, r16
    3596:	80 83       	st	Z, r24
    3598:	91 83       	std	Z+1, r25	; 0x01
    359a:	a2 83       	std	Z+2, r26	; 0x02
    359c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    359e:	fe 01       	movw	r30, r28
    35a0:	e9 51       	subi	r30, 0x19	; 25
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	60 81       	ld	r22, Z
    35a6:	71 81       	ldd	r23, Z+1	; 0x01
    35a8:	82 81       	ldd	r24, Z+2	; 0x02
    35aa:	93 81       	ldd	r25, Z+3	; 0x03
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	40 e8       	ldi	r20, 0x80	; 128
    35b2:	5f e3       	ldi	r21, 0x3F	; 63
    35b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35b8:	88 23       	and	r24, r24
    35ba:	44 f4       	brge	.+16     	; 0x35cc <main+0x61a>
		__ticks = 1;
    35bc:	fe 01       	movw	r30, r28
    35be:	eb 51       	subi	r30, 0x1B	; 27
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	80 83       	st	Z, r24
    35ca:	64 c0       	rjmp	.+200    	; 0x3694 <main+0x6e2>
	else if (__tmp > 65535)
    35cc:	fe 01       	movw	r30, r28
    35ce:	e9 51       	subi	r30, 0x19	; 25
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	60 81       	ld	r22, Z
    35d4:	71 81       	ldd	r23, Z+1	; 0x01
    35d6:	82 81       	ldd	r24, Z+2	; 0x02
    35d8:	93 81       	ldd	r25, Z+3	; 0x03
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	3f ef       	ldi	r19, 0xFF	; 255
    35de:	4f e7       	ldi	r20, 0x7F	; 127
    35e0:	57 e4       	ldi	r21, 0x47	; 71
    35e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35e6:	18 16       	cp	r1, r24
    35e8:	0c f0       	brlt	.+2      	; 0x35ec <main+0x63a>
    35ea:	43 c0       	rjmp	.+134    	; 0x3672 <main+0x6c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ec:	fe 01       	movw	r30, r28
    35ee:	e5 51       	subi	r30, 0x15	; 21
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	60 81       	ld	r22, Z
    35f4:	71 81       	ldd	r23, Z+1	; 0x01
    35f6:	82 81       	ldd	r24, Z+2	; 0x02
    35f8:	93 81       	ldd	r25, Z+3	; 0x03
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e2       	ldi	r20, 0x20	; 32
    3600:	51 e4       	ldi	r21, 0x41	; 65
    3602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	8e 01       	movw	r16, r28
    360c:	0b 51       	subi	r16, 0x1B	; 27
    360e:	1f 4f       	sbci	r17, 0xFF	; 255
    3610:	bc 01       	movw	r22, r24
    3612:	cd 01       	movw	r24, r26
    3614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	f8 01       	movw	r30, r16
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
    3622:	1f c0       	rjmp	.+62     	; 0x3662 <main+0x6b0>
    3624:	fe 01       	movw	r30, r28
    3626:	ed 51       	subi	r30, 0x1D	; 29
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	88 ec       	ldi	r24, 0xC8	; 200
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
    3632:	fe 01       	movw	r30, r28
    3634:	ed 51       	subi	r30, 0x1D	; 29
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	80 81       	ld	r24, Z
    363a:	91 81       	ldd	r25, Z+1	; 0x01
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	f1 f7       	brne	.-4      	; 0x363c <main+0x68a>
    3640:	fe 01       	movw	r30, r28
    3642:	ed 51       	subi	r30, 0x1D	; 29
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    364a:	de 01       	movw	r26, r28
    364c:	ab 51       	subi	r26, 0x1B	; 27
    364e:	bf 4f       	sbci	r27, 0xFF	; 255
    3650:	fe 01       	movw	r30, r28
    3652:	eb 51       	subi	r30, 0x1B	; 27
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	80 81       	ld	r24, Z
    3658:	91 81       	ldd	r25, Z+1	; 0x01
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	11 96       	adiw	r26, 0x01	; 1
    365e:	9c 93       	st	X, r25
    3660:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3662:	fe 01       	movw	r30, r28
    3664:	eb 51       	subi	r30, 0x1B	; 27
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	80 81       	ld	r24, Z
    366a:	91 81       	ldd	r25, Z+1	; 0x01
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	d1 f6       	brne	.-76     	; 0x3624 <main+0x672>
    3670:	28 c0       	rjmp	.+80     	; 0x36c2 <main+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3672:	8e 01       	movw	r16, r28
    3674:	0b 51       	subi	r16, 0x1B	; 27
    3676:	1f 4f       	sbci	r17, 0xFF	; 255
    3678:	fe 01       	movw	r30, r28
    367a:	e9 51       	subi	r30, 0x19	; 25
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	60 81       	ld	r22, Z
    3680:	71 81       	ldd	r23, Z+1	; 0x01
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	93 81       	ldd	r25, Z+3	; 0x03
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	f8 01       	movw	r30, r16
    3690:	91 83       	std	Z+1, r25	; 0x01
    3692:	80 83       	st	Z, r24
    3694:	de 01       	movw	r26, r28
    3696:	af 51       	subi	r26, 0x1F	; 31
    3698:	bf 4f       	sbci	r27, 0xFF	; 255
    369a:	fe 01       	movw	r30, r28
    369c:	eb 51       	subi	r30, 0x1B	; 27
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	11 96       	adiw	r26, 0x01	; 1
    36a6:	9c 93       	st	X, r25
    36a8:	8e 93       	st	-X, r24
    36aa:	fe 01       	movw	r30, r28
    36ac:	ef 51       	subi	r30, 0x1F	; 31
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	80 81       	ld	r24, Z
    36b2:	91 81       	ldd	r25, Z+1	; 0x01
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <main+0x702>
    36b8:	fe 01       	movw	r30, r28
    36ba:	ef 51       	subi	r30, 0x1F	; 31
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
			_delay_ms(500);
			if(Local_u8ReadPassword == '1')
    36c2:	fe 01       	movw	r30, r28
    36c4:	e5 5e       	subi	r30, 0xE5	; 229
    36c6:	fe 4f       	sbci	r31, 0xFE	; 254
    36c8:	80 81       	ld	r24, Z
    36ca:	81 33       	cpi	r24, 0x31	; 49
    36cc:	11 f0       	breq	.+4      	; 0x36d2 <main+0x720>
    36ce:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <main+0x1818>
			{
				CLCD_voidClearScreen();
    36d2:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
				CLCD_voidSendString("Enter Password:");
    36d6:	86 ea       	ldi	r24, 0xA6	; 166
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
				for( i =0 ; i<=3 ; i++)
    36de:	fe 01       	movw	r30, r28
    36e0:	e7 5e       	subi	r30, 0xE7	; 231
    36e2:	fe 4f       	sbci	r31, 0xFE	; 254
    36e4:	10 82       	st	Z, r1
    36e6:	bc c1       	rjmp	.+888    	; 0x3a60 <main+0xaae>
				{
					do
					{
						CLCD_voidGoToXY(1,i);
    36e8:	fe 01       	movw	r30, r28
    36ea:	e7 5e       	subi	r30, 0xE7	; 231
    36ec:	fe 4f       	sbci	r31, 0xFE	; 254
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	60 81       	ld	r22, Z
    36f2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>

						/* Turn on LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_ON);
    36f6:	8e e0       	ldi	r24, 0x0E	; 14
    36f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    36fc:	fe 01       	movw	r30, r28
    36fe:	e3 52       	subi	r30, 0x23	; 35
    3700:	ff 4f       	sbci	r31, 0xFF	; 255
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a8 ec       	ldi	r26, 0xC8	; 200
    3708:	b2 e4       	ldi	r27, 0x42	; 66
    370a:	80 83       	st	Z, r24
    370c:	91 83       	std	Z+1, r25	; 0x01
    370e:	a2 83       	std	Z+2, r26	; 0x02
    3710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3712:	8e 01       	movw	r16, r28
    3714:	07 52       	subi	r16, 0x27	; 39
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	fe 01       	movw	r30, r28
    371a:	e3 52       	subi	r30, 0x23	; 35
    371c:	ff 4f       	sbci	r31, 0xFF	; 255
    371e:	60 81       	ld	r22, Z
    3720:	71 81       	ldd	r23, Z+1	; 0x01
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	93 81       	ldd	r25, Z+3	; 0x03
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	4a ef       	ldi	r20, 0xFA	; 250
    372c:	54 e4       	ldi	r21, 0x44	; 68
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	f8 01       	movw	r30, r16
    3738:	80 83       	st	Z, r24
    373a:	91 83       	std	Z+1, r25	; 0x01
    373c:	a2 83       	std	Z+2, r26	; 0x02
    373e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3740:	fe 01       	movw	r30, r28
    3742:	e7 52       	subi	r30, 0x27	; 39
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e8       	ldi	r20, 0x80	; 128
    3754:	5f e3       	ldi	r21, 0x3F	; 63
    3756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    375a:	88 23       	and	r24, r24
    375c:	44 f4       	brge	.+16     	; 0x376e <main+0x7bc>
		__ticks = 1;
    375e:	fe 01       	movw	r30, r28
    3760:	e9 52       	subi	r30, 0x29	; 41
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	80 83       	st	Z, r24
    376c:	64 c0       	rjmp	.+200    	; 0x3836 <main+0x884>
	else if (__tmp > 65535)
    376e:	fe 01       	movw	r30, r28
    3770:	e7 52       	subi	r30, 0x27	; 39
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	60 81       	ld	r22, Z
    3776:	71 81       	ldd	r23, Z+1	; 0x01
    3778:	82 81       	ldd	r24, Z+2	; 0x02
    377a:	93 81       	ldd	r25, Z+3	; 0x03
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	3f ef       	ldi	r19, 0xFF	; 255
    3780:	4f e7       	ldi	r20, 0x7F	; 127
    3782:	57 e4       	ldi	r21, 0x47	; 71
    3784:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3788:	18 16       	cp	r1, r24
    378a:	0c f0       	brlt	.+2      	; 0x378e <main+0x7dc>
    378c:	43 c0       	rjmp	.+134    	; 0x3814 <main+0x862>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378e:	fe 01       	movw	r30, r28
    3790:	e3 52       	subi	r30, 0x23	; 35
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	60 81       	ld	r22, Z
    3796:	71 81       	ldd	r23, Z+1	; 0x01
    3798:	82 81       	ldd	r24, Z+2	; 0x02
    379a:	93 81       	ldd	r25, Z+3	; 0x03
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e2       	ldi	r20, 0x20	; 32
    37a2:	51 e4       	ldi	r21, 0x41	; 65
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	8e 01       	movw	r16, r28
    37ae:	09 52       	subi	r16, 0x29	; 41
    37b0:	1f 4f       	sbci	r17, 0xFF	; 255
    37b2:	bc 01       	movw	r22, r24
    37b4:	cd 01       	movw	r24, r26
    37b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	f8 01       	movw	r30, r16
    37c0:	91 83       	std	Z+1, r25	; 0x01
    37c2:	80 83       	st	Z, r24
    37c4:	1f c0       	rjmp	.+62     	; 0x3804 <main+0x852>
    37c6:	fe 01       	movw	r30, r28
    37c8:	eb 52       	subi	r30, 0x2B	; 43
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	88 ec       	ldi	r24, 0xC8	; 200
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	91 83       	std	Z+1, r25	; 0x01
    37d2:	80 83       	st	Z, r24
    37d4:	fe 01       	movw	r30, r28
    37d6:	eb 52       	subi	r30, 0x2B	; 43
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 81       	ld	r24, Z
    37dc:	91 81       	ldd	r25, Z+1	; 0x01
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	f1 f7       	brne	.-4      	; 0x37de <main+0x82c>
    37e2:	fe 01       	movw	r30, r28
    37e4:	eb 52       	subi	r30, 0x2B	; 43
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	de 01       	movw	r26, r28
    37ee:	a9 52       	subi	r26, 0x29	; 41
    37f0:	bf 4f       	sbci	r27, 0xFF	; 255
    37f2:	fe 01       	movw	r30, r28
    37f4:	e9 52       	subi	r30, 0x29	; 41
    37f6:	ff 4f       	sbci	r31, 0xFF	; 255
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	01 97       	sbiw	r24, 0x01	; 1
    37fe:	11 96       	adiw	r26, 0x01	; 1
    3800:	9c 93       	st	X, r25
    3802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3804:	fe 01       	movw	r30, r28
    3806:	e9 52       	subi	r30, 0x29	; 41
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 81       	ld	r24, Z
    380c:	91 81       	ldd	r25, Z+1	; 0x01
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	d1 f6       	brne	.-76     	; 0x37c6 <main+0x814>
    3812:	27 c0       	rjmp	.+78     	; 0x3862 <main+0x8b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3814:	8e 01       	movw	r16, r28
    3816:	09 52       	subi	r16, 0x29	; 41
    3818:	1f 4f       	sbci	r17, 0xFF	; 255
    381a:	fe 01       	movw	r30, r28
    381c:	e7 52       	subi	r30, 0x27	; 39
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	60 81       	ld	r22, Z
    3822:	71 81       	ldd	r23, Z+1	; 0x01
    3824:	82 81       	ldd	r24, Z+2	; 0x02
    3826:	93 81       	ldd	r25, Z+3	; 0x03
    3828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	f8 01       	movw	r30, r16
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	de 01       	movw	r26, r28
    3838:	ad 52       	subi	r26, 0x2D	; 45
    383a:	bf 4f       	sbci	r27, 0xFF	; 255
    383c:	fe 01       	movw	r30, r28
    383e:	e9 52       	subi	r30, 0x29	; 41
    3840:	ff 4f       	sbci	r31, 0xFF	; 255
    3842:	80 81       	ld	r24, Z
    3844:	91 81       	ldd	r25, Z+1	; 0x01
    3846:	8d 93       	st	X+, r24
    3848:	9c 93       	st	X, r25
    384a:	fe 01       	movw	r30, r28
    384c:	ed 52       	subi	r30, 0x2D	; 45
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <main+0x8a2>
    3858:	fe 01       	movw	r30, r28
    385a:	ed 52       	subi	r30, 0x2D	; 45
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	80 83       	st	Z, r24

						/* wait 100 ms */
						_delay_ms(100);

						/* Turn off LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_OFF);
    3862:	8c e0       	ldi	r24, 0x0C	; 12
    3864:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

						Local_au8Password[i] = KPD_u8GetPressedKey();
    3868:	fe 01       	movw	r30, r28
    386a:	e7 5e       	subi	r30, 0xE7	; 231
    386c:	fe 4f       	sbci	r31, 0xFE	; 254
    386e:	80 81       	ld	r24, Z
    3870:	08 2f       	mov	r16, r24
    3872:	10 e0       	ldi	r17, 0x00	; 0
    3874:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <KPD_u8GetPressedKey>
    3878:	28 2f       	mov	r18, r24
    387a:	ce 01       	movw	r24, r28
    387c:	83 5e       	subi	r24, 0xE3	; 227
    387e:	9e 4f       	sbci	r25, 0xFE	; 254
    3880:	fc 01       	movw	r30, r24
    3882:	e0 0f       	add	r30, r16
    3884:	f1 1f       	adc	r31, r17
    3886:	20 83       	st	Z, r18
					} while (Local_au8Password[i]==KPD_NO_PRESSED_KEY);
    3888:	fe 01       	movw	r30, r28
    388a:	e7 5e       	subi	r30, 0xE7	; 231
    388c:	fe 4f       	sbci	r31, 0xFE	; 254
    388e:	80 81       	ld	r24, Z
    3890:	28 2f       	mov	r18, r24
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	ce 01       	movw	r24, r28
    3896:	83 5e       	subi	r24, 0xE3	; 227
    3898:	9e 4f       	sbci	r25, 0xFE	; 254
    389a:	fc 01       	movw	r30, r24
    389c:	e2 0f       	add	r30, r18
    389e:	f3 1f       	adc	r31, r19
    38a0:	80 81       	ld	r24, Z
    38a2:	8f 3f       	cpi	r24, 0xFF	; 255
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <main+0x8f6>
    38a6:	20 cf       	rjmp	.-448    	; 0x36e8 <main+0x736>

					CLCD_voidGoToXY(1,i);
    38a8:	fe 01       	movw	r30, r28
    38aa:	e7 5e       	subi	r30, 0xE7	; 231
    38ac:	fe 4f       	sbci	r31, 0xFE	; 254
    38ae:	81 e0       	ldi	r24, 0x01	; 1
    38b0:	60 81       	ld	r22, Z
    38b2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendData(Local_au8Password[i]);
    38b6:	fe 01       	movw	r30, r28
    38b8:	e7 5e       	subi	r30, 0xE7	; 231
    38ba:	fe 4f       	sbci	r31, 0xFE	; 254
    38bc:	80 81       	ld	r24, Z
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	ce 01       	movw	r24, r28
    38c4:	83 5e       	subi	r24, 0xE3	; 227
    38c6:	9e 4f       	sbci	r25, 0xFE	; 254
    38c8:	fc 01       	movw	r30, r24
    38ca:	e2 0f       	add	r30, r18
    38cc:	f3 1f       	adc	r31, r19
    38ce:	80 81       	ld	r24, Z
    38d0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
    38d4:	fe 01       	movw	r30, r28
    38d6:	e1 53       	subi	r30, 0x31	; 49
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	aa ef       	ldi	r26, 0xFA	; 250
    38e0:	b3 e4       	ldi	r27, 0x43	; 67
    38e2:	80 83       	st	Z, r24
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	a2 83       	std	Z+2, r26	; 0x02
    38e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ea:	8e 01       	movw	r16, r28
    38ec:	05 53       	subi	r16, 0x35	; 53
    38ee:	1f 4f       	sbci	r17, 0xFF	; 255
    38f0:	fe 01       	movw	r30, r28
    38f2:	e1 53       	subi	r30, 0x31	; 49
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 81       	ld	r22, Z
    38f8:	71 81       	ldd	r23, Z+1	; 0x01
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	4a ef       	ldi	r20, 0xFA	; 250
    3904:	54 e4       	ldi	r21, 0x44	; 68
    3906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	f8 01       	movw	r30, r16
    3910:	80 83       	st	Z, r24
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	a2 83       	std	Z+2, r26	; 0x02
    3916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3918:	fe 01       	movw	r30, r28
    391a:	e5 53       	subi	r30, 0x35	; 53
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	60 81       	ld	r22, Z
    3920:	71 81       	ldd	r23, Z+1	; 0x01
    3922:	82 81       	ldd	r24, Z+2	; 0x02
    3924:	93 81       	ldd	r25, Z+3	; 0x03
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e8       	ldi	r20, 0x80	; 128
    392c:	5f e3       	ldi	r21, 0x3F	; 63
    392e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3932:	88 23       	and	r24, r24
    3934:	44 f4       	brge	.+16     	; 0x3946 <main+0x994>
		__ticks = 1;
    3936:	fe 01       	movw	r30, r28
    3938:	e7 53       	subi	r30, 0x37	; 55
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	80 83       	st	Z, r24
    3944:	64 c0       	rjmp	.+200    	; 0x3a0e <main+0xa5c>
	else if (__tmp > 65535)
    3946:	fe 01       	movw	r30, r28
    3948:	e5 53       	subi	r30, 0x35	; 53
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	60 81       	ld	r22, Z
    394e:	71 81       	ldd	r23, Z+1	; 0x01
    3950:	82 81       	ldd	r24, Z+2	; 0x02
    3952:	93 81       	ldd	r25, Z+3	; 0x03
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	3f ef       	ldi	r19, 0xFF	; 255
    3958:	4f e7       	ldi	r20, 0x7F	; 127
    395a:	57 e4       	ldi	r21, 0x47	; 71
    395c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3960:	18 16       	cp	r1, r24
    3962:	0c f0       	brlt	.+2      	; 0x3966 <main+0x9b4>
    3964:	43 c0       	rjmp	.+134    	; 0x39ec <main+0xa3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3966:	fe 01       	movw	r30, r28
    3968:	e1 53       	subi	r30, 0x31	; 49
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	60 81       	ld	r22, Z
    396e:	71 81       	ldd	r23, Z+1	; 0x01
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e2       	ldi	r20, 0x20	; 32
    397a:	51 e4       	ldi	r21, 0x41	; 65
    397c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	8e 01       	movw	r16, r28
    3986:	07 53       	subi	r16, 0x37	; 55
    3988:	1f 4f       	sbci	r17, 0xFF	; 255
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	f8 01       	movw	r30, r16
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	80 83       	st	Z, r24
    399c:	1f c0       	rjmp	.+62     	; 0x39dc <main+0xa2a>
    399e:	fe 01       	movw	r30, r28
    39a0:	e9 53       	subi	r30, 0x39	; 57
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	88 ec       	ldi	r24, 0xC8	; 200
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	91 83       	std	Z+1, r25	; 0x01
    39aa:	80 83       	st	Z, r24
    39ac:	fe 01       	movw	r30, r28
    39ae:	e9 53       	subi	r30, 0x39	; 57
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	f1 f7       	brne	.-4      	; 0x39b6 <main+0xa04>
    39ba:	fe 01       	movw	r30, r28
    39bc:	e9 53       	subi	r30, 0x39	; 57
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c4:	de 01       	movw	r26, r28
    39c6:	a7 53       	subi	r26, 0x37	; 55
    39c8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ca:	fe 01       	movw	r30, r28
    39cc:	e7 53       	subi	r30, 0x37	; 55
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	11 96       	adiw	r26, 0x01	; 1
    39d8:	9c 93       	st	X, r25
    39da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39dc:	fe 01       	movw	r30, r28
    39de:	e7 53       	subi	r30, 0x37	; 55
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	d1 f6       	brne	.-76     	; 0x399e <main+0x9ec>
    39ea:	27 c0       	rjmp	.+78     	; 0x3a3a <main+0xa88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ec:	8e 01       	movw	r16, r28
    39ee:	07 53       	subi	r16, 0x37	; 55
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	fe 01       	movw	r30, r28
    39f4:	e5 53       	subi	r30, 0x35	; 53
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	f8 01       	movw	r30, r16
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
    3a0e:	de 01       	movw	r26, r28
    3a10:	ab 53       	subi	r26, 0x3B	; 59
    3a12:	bf 4f       	sbci	r27, 0xFF	; 255
    3a14:	fe 01       	movw	r30, r28
    3a16:	e7 53       	subi	r30, 0x37	; 55
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 81       	ld	r24, Z
    3a1c:	91 81       	ldd	r25, Z+1	; 0x01
    3a1e:	8d 93       	st	X+, r24
    3a20:	9c 93       	st	X, r25
    3a22:	fe 01       	movw	r30, r28
    3a24:	eb 53       	subi	r30, 0x3B	; 59
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	80 81       	ld	r24, Z
    3a2a:	91 81       	ldd	r25, Z+1	; 0x01
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	f1 f7       	brne	.-4      	; 0x3a2c <main+0xa7a>
    3a30:	fe 01       	movw	r30, r28
    3a32:	eb 53       	subi	r30, 0x3B	; 59
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	80 83       	st	Z, r24
					_delay_ms(500);
					CLCD_voidGoToXY(1,i);
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	e7 5e       	subi	r30, 0xE7	; 231
    3a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	60 81       	ld	r22, Z
    3a44:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendData('*');
    3a48:	8a e2       	ldi	r24, 0x2A	; 42
    3a4a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
			_delay_ms(500);
			if(Local_u8ReadPassword == '1')
			{
				CLCD_voidClearScreen();
				CLCD_voidSendString("Enter Password:");
				for( i =0 ; i<=3 ; i++)
    3a4e:	de 01       	movw	r26, r28
    3a50:	a7 5e       	subi	r26, 0xE7	; 231
    3a52:	be 4f       	sbci	r27, 0xFE	; 254
    3a54:	fe 01       	movw	r30, r28
    3a56:	e7 5e       	subi	r30, 0xE7	; 231
    3a58:	fe 4f       	sbci	r31, 0xFE	; 254
    3a5a:	80 81       	ld	r24, Z
    3a5c:	8f 5f       	subi	r24, 0xFF	; 255
    3a5e:	8c 93       	st	X, r24
    3a60:	fe 01       	movw	r30, r28
    3a62:	e7 5e       	subi	r30, 0xE7	; 231
    3a64:	fe 4f       	sbci	r31, 0xFE	; 254
    3a66:	80 81       	ld	r24, Z
    3a68:	84 30       	cpi	r24, 0x04	; 4
    3a6a:	08 f4       	brcc	.+2      	; 0x3a6e <main+0xabc>
    3a6c:	3d ce       	rjmp	.-902    	; 0x36e8 <main+0x736>
					_delay_ms(500);
					CLCD_voidGoToXY(1,i);
					CLCD_voidSendData('*');
				}

				if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[0]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[3]) )
    3a6e:	81 e2       	ldi	r24, 0x21	; 33
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3a76:	9c 01       	movw	r18, r24
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e3 5e       	subi	r30, 0xE3	; 227
    3a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7e:	80 81       	ld	r24, Z
    3a80:	88 2f       	mov	r24, r24
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	28 17       	cp	r18, r24
    3a86:	39 07       	cpc	r19, r25
    3a88:	09 f0       	breq	.+2      	; 0x3a8c <main+0xada>
    3a8a:	78 c2       	rjmp	.+1264   	; 0x3f7c <main+0xfca>
    3a8c:	82 e2       	ldi	r24, 0x22	; 34
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3a94:	9c 01       	movw	r18, r24
    3a96:	fe 01       	movw	r30, r28
    3a98:	e3 5e       	subi	r30, 0xE3	; 227
    3a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a9c:	81 81       	ldd	r24, Z+1	; 0x01
    3a9e:	88 2f       	mov	r24, r24
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	28 17       	cp	r18, r24
    3aa4:	39 07       	cpc	r19, r25
    3aa6:	09 f0       	breq	.+2      	; 0x3aaa <main+0xaf8>
    3aa8:	69 c2       	rjmp	.+1234   	; 0x3f7c <main+0xfca>
    3aaa:	83 e2       	ldi	r24, 0x23	; 35
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3ab2:	9c 01       	movw	r18, r24
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e3 5e       	subi	r30, 0xE3	; 227
    3ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    3aba:	82 81       	ldd	r24, Z+2	; 0x02
    3abc:	88 2f       	mov	r24, r24
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	28 17       	cp	r18, r24
    3ac2:	39 07       	cpc	r19, r25
    3ac4:	09 f0       	breq	.+2      	; 0x3ac8 <main+0xb16>
    3ac6:	5a c2       	rjmp	.+1204   	; 0x3f7c <main+0xfca>
    3ac8:	84 e2       	ldi	r24, 0x24	; 36
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3ad0:	9c 01       	movw	r18, r24
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e3 5e       	subi	r30, 0xE3	; 227
    3ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad8:	83 81       	ldd	r24, Z+3	; 0x03
    3ada:	88 2f       	mov	r24, r24
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	28 17       	cp	r18, r24
    3ae0:	39 07       	cpc	r19, r25
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <main+0xb34>
    3ae4:	4b c2       	rjmp	.+1174   	; 0x3f7c <main+0xfca>
				{
					CLCD_voidClearScreen();
    3ae6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
					CLCD_voidGoToXY(0,2);
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	62 e0       	ldi	r22, 0x02	; 2
    3aee:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendString("Welcome Back");
    3af2:	86 eb       	ldi	r24, 0xB6	; 182
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>

					/* Turn on the indicator green led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_HIGH);
    3afa:	83 e0       	ldi	r24, 0x03	; 3
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	41 e0       	ldi	r20, 0x01	; 1
    3b00:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_LOW);
    3b04:	83 e0       	ldi	r24, 0x03	; 3
    3b06:	61 e0       	ldi	r22, 0x01	; 1
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>

					/* Open the door */
					DCM_voidRotate(CW_STATE);
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	0e 94 a3 10 	call	0x2146	; 0x2146 <DCM_voidRotate>
    3b14:	fe 01       	movw	r30, r28
    3b16:	ef 53       	subi	r30, 0x3F	; 63
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	aa e7       	ldi	r26, 0x7A	; 122
    3b20:	b4 e4       	ldi	r27, 0x44	; 68
    3b22:	80 83       	st	Z, r24
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	a2 83       	std	Z+2, r26	; 0x02
    3b28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b2a:	8e 01       	movw	r16, r28
    3b2c:	03 54       	subi	r16, 0x43	; 67
    3b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b30:	fe 01       	movw	r30, r28
    3b32:	ef 53       	subi	r30, 0x3F	; 63
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	60 81       	ld	r22, Z
    3b38:	71 81       	ldd	r23, Z+1	; 0x01
    3b3a:	82 81       	ldd	r24, Z+2	; 0x02
    3b3c:	93 81       	ldd	r25, Z+3	; 0x03
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	4a ef       	ldi	r20, 0xFA	; 250
    3b44:	54 e4       	ldi	r21, 0x44	; 68
    3b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	f8 01       	movw	r30, r16
    3b50:	80 83       	st	Z, r24
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	a2 83       	std	Z+2, r26	; 0x02
    3b56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e3 54       	subi	r30, 0x43	; 67
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	82 81       	ldd	r24, Z+2	; 0x02
    3b64:	93 81       	ldd	r25, Z+3	; 0x03
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e8       	ldi	r20, 0x80	; 128
    3b6c:	5f e3       	ldi	r21, 0x3F	; 63
    3b6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b72:	88 23       	and	r24, r24
    3b74:	44 f4       	brge	.+16     	; 0x3b86 <main+0xbd4>
		__ticks = 1;
    3b76:	fe 01       	movw	r30, r28
    3b78:	e5 54       	subi	r30, 0x45	; 69
    3b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	91 83       	std	Z+1, r25	; 0x01
    3b82:	80 83       	st	Z, r24
    3b84:	64 c0       	rjmp	.+200    	; 0x3c4e <main+0xc9c>
	else if (__tmp > 65535)
    3b86:	fe 01       	movw	r30, r28
    3b88:	e3 54       	subi	r30, 0x43	; 67
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	3f ef       	ldi	r19, 0xFF	; 255
    3b98:	4f e7       	ldi	r20, 0x7F	; 127
    3b9a:	57 e4       	ldi	r21, 0x47	; 71
    3b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ba0:	18 16       	cp	r1, r24
    3ba2:	0c f0       	brlt	.+2      	; 0x3ba6 <main+0xbf4>
    3ba4:	43 c0       	rjmp	.+134    	; 0x3c2c <main+0xc7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba6:	fe 01       	movw	r30, r28
    3ba8:	ef 53       	subi	r30, 0x3F	; 63
    3baa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	82 81       	ldd	r24, Z+2	; 0x02
    3bb2:	93 81       	ldd	r25, Z+3	; 0x03
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	40 e2       	ldi	r20, 0x20	; 32
    3bba:	51 e4       	ldi	r21, 0x41	; 65
    3bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc0:	dc 01       	movw	r26, r24
    3bc2:	cb 01       	movw	r24, r22
    3bc4:	8e 01       	movw	r16, r28
    3bc6:	05 54       	subi	r16, 0x45	; 69
    3bc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bca:	bc 01       	movw	r22, r24
    3bcc:	cd 01       	movw	r24, r26
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	f8 01       	movw	r30, r16
    3bd8:	91 83       	std	Z+1, r25	; 0x01
    3bda:	80 83       	st	Z, r24
    3bdc:	1f c0       	rjmp	.+62     	; 0x3c1c <main+0xc6a>
    3bde:	fe 01       	movw	r30, r28
    3be0:	e7 54       	subi	r30, 0x47	; 71
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	88 ec       	ldi	r24, 0xC8	; 200
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	80 83       	st	Z, r24
    3bec:	fe 01       	movw	r30, r28
    3bee:	e7 54       	subi	r30, 0x47	; 71
    3bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf2:	80 81       	ld	r24, Z
    3bf4:	91 81       	ldd	r25, Z+1	; 0x01
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <main+0xc44>
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	e7 54       	subi	r30, 0x47	; 71
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	91 83       	std	Z+1, r25	; 0x01
    3c02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c04:	de 01       	movw	r26, r28
    3c06:	a5 54       	subi	r26, 0x45	; 69
    3c08:	bf 4f       	sbci	r27, 0xFF	; 255
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e5 54       	subi	r30, 0x45	; 69
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	80 81       	ld	r24, Z
    3c12:	91 81       	ldd	r25, Z+1	; 0x01
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	11 96       	adiw	r26, 0x01	; 1
    3c18:	9c 93       	st	X, r25
    3c1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1c:	fe 01       	movw	r30, r28
    3c1e:	e5 54       	subi	r30, 0x45	; 69
    3c20:	ff 4f       	sbci	r31, 0xFF	; 255
    3c22:	80 81       	ld	r24, Z
    3c24:	91 81       	ldd	r25, Z+1	; 0x01
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	d1 f6       	brne	.-76     	; 0x3bde <main+0xc2c>
    3c2a:	27 c0       	rjmp	.+78     	; 0x3c7a <main+0xcc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c2c:	8e 01       	movw	r16, r28
    3c2e:	05 54       	subi	r16, 0x45	; 69
    3c30:	1f 4f       	sbci	r17, 0xFF	; 255
    3c32:	fe 01       	movw	r30, r28
    3c34:	e3 54       	subi	r30, 0x43	; 67
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	60 81       	ld	r22, Z
    3c3a:	71 81       	ldd	r23, Z+1	; 0x01
    3c3c:	82 81       	ldd	r24, Z+2	; 0x02
    3c3e:	93 81       	ldd	r25, Z+3	; 0x03
    3c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	f8 01       	movw	r30, r16
    3c4a:	91 83       	std	Z+1, r25	; 0x01
    3c4c:	80 83       	st	Z, r24
    3c4e:	de 01       	movw	r26, r28
    3c50:	a9 54       	subi	r26, 0x49	; 73
    3c52:	bf 4f       	sbci	r27, 0xFF	; 255
    3c54:	fe 01       	movw	r30, r28
    3c56:	e5 54       	subi	r30, 0x45	; 69
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	80 81       	ld	r24, Z
    3c5c:	91 81       	ldd	r25, Z+1	; 0x01
    3c5e:	8d 93       	st	X+, r24
    3c60:	9c 93       	st	X, r25
    3c62:	fe 01       	movw	r30, r28
    3c64:	e9 54       	subi	r30, 0x49	; 73
    3c66:	ff 4f       	sbci	r31, 0xFF	; 255
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	f1 f7       	brne	.-4      	; 0x3c6c <main+0xcba>
    3c70:	fe 01       	movw	r30, r28
    3c72:	e9 54       	subi	r30, 0x49	; 73
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	91 83       	std	Z+1, r25	; 0x01
    3c78:	80 83       	st	Z, r24
					_delay_ms(1000);

					/* Stop Motor */
					DCM_voidRotate(STOP_STATE);
    3c7a:	83 e0       	ldi	r24, 0x03	; 3
    3c7c:	0e 94 a3 10 	call	0x2146	; 0x2146 <DCM_voidRotate>
    3c80:	fe 01       	movw	r30, r28
    3c82:	ed 54       	subi	r30, 0x4D	; 77
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	aa e7       	ldi	r26, 0x7A	; 122
    3c8c:	b5 e4       	ldi	r27, 0x45	; 69
    3c8e:	80 83       	st	Z, r24
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	a2 83       	std	Z+2, r26	; 0x02
    3c94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c96:	8e 01       	movw	r16, r28
    3c98:	01 55       	subi	r16, 0x51	; 81
    3c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	ed 54       	subi	r30, 0x4D	; 77
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	60 81       	ld	r22, Z
    3ca4:	71 81       	ldd	r23, Z+1	; 0x01
    3ca6:	82 81       	ldd	r24, Z+2	; 0x02
    3ca8:	93 81       	ldd	r25, Z+3	; 0x03
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	30 e0       	ldi	r19, 0x00	; 0
    3cae:	4a ef       	ldi	r20, 0xFA	; 250
    3cb0:	54 e4       	ldi	r21, 0x44	; 68
    3cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	f8 01       	movw	r30, r16
    3cbc:	80 83       	st	Z, r24
    3cbe:	91 83       	std	Z+1, r25	; 0x01
    3cc0:	a2 83       	std	Z+2, r26	; 0x02
    3cc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e1 55       	subi	r30, 0x51	; 81
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	60 81       	ld	r22, Z
    3ccc:	71 81       	ldd	r23, Z+1	; 0x01
    3cce:	82 81       	ldd	r24, Z+2	; 0x02
    3cd0:	93 81       	ldd	r25, Z+3	; 0x03
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	40 e8       	ldi	r20, 0x80	; 128
    3cd8:	5f e3       	ldi	r21, 0x3F	; 63
    3cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cde:	88 23       	and	r24, r24
    3ce0:	44 f4       	brge	.+16     	; 0x3cf2 <main+0xd40>
		__ticks = 1;
    3ce2:	fe 01       	movw	r30, r28
    3ce4:	e3 55       	subi	r30, 0x53	; 83
    3ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	91 83       	std	Z+1, r25	; 0x01
    3cee:	80 83       	st	Z, r24
    3cf0:	64 c0       	rjmp	.+200    	; 0x3dba <main+0xe08>
	else if (__tmp > 65535)
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	e1 55       	subi	r30, 0x51	; 81
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	60 81       	ld	r22, Z
    3cfa:	71 81       	ldd	r23, Z+1	; 0x01
    3cfc:	82 81       	ldd	r24, Z+2	; 0x02
    3cfe:	93 81       	ldd	r25, Z+3	; 0x03
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	3f ef       	ldi	r19, 0xFF	; 255
    3d04:	4f e7       	ldi	r20, 0x7F	; 127
    3d06:	57 e4       	ldi	r21, 0x47	; 71
    3d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d0c:	18 16       	cp	r1, r24
    3d0e:	0c f0       	brlt	.+2      	; 0x3d12 <main+0xd60>
    3d10:	43 c0       	rjmp	.+134    	; 0x3d98 <main+0xde6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d12:	fe 01       	movw	r30, r28
    3d14:	ed 54       	subi	r30, 0x4D	; 77
    3d16:	ff 4f       	sbci	r31, 0xFF	; 255
    3d18:	60 81       	ld	r22, Z
    3d1a:	71 81       	ldd	r23, Z+1	; 0x01
    3d1c:	82 81       	ldd	r24, Z+2	; 0x02
    3d1e:	93 81       	ldd	r25, Z+3	; 0x03
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	40 e2       	ldi	r20, 0x20	; 32
    3d26:	51 e4       	ldi	r21, 0x41	; 65
    3d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	8e 01       	movw	r16, r28
    3d32:	03 55       	subi	r16, 0x53	; 83
    3d34:	1f 4f       	sbci	r17, 0xFF	; 255
    3d36:	bc 01       	movw	r22, r24
    3d38:	cd 01       	movw	r24, r26
    3d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	f8 01       	movw	r30, r16
    3d44:	91 83       	std	Z+1, r25	; 0x01
    3d46:	80 83       	st	Z, r24
    3d48:	1f c0       	rjmp	.+62     	; 0x3d88 <main+0xdd6>
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e5 55       	subi	r30, 0x55	; 85
    3d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d50:	88 ec       	ldi	r24, 0xC8	; 200
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	91 83       	std	Z+1, r25	; 0x01
    3d56:	80 83       	st	Z, r24
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e5 55       	subi	r30, 0x55	; 85
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	f1 f7       	brne	.-4      	; 0x3d62 <main+0xdb0>
    3d66:	fe 01       	movw	r30, r28
    3d68:	e5 55       	subi	r30, 0x55	; 85
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d70:	de 01       	movw	r26, r28
    3d72:	a3 55       	subi	r26, 0x53	; 83
    3d74:	bf 4f       	sbci	r27, 0xFF	; 255
    3d76:	fe 01       	movw	r30, r28
    3d78:	e3 55       	subi	r30, 0x53	; 83
    3d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7c:	80 81       	ld	r24, Z
    3d7e:	91 81       	ldd	r25, Z+1	; 0x01
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	11 96       	adiw	r26, 0x01	; 1
    3d84:	9c 93       	st	X, r25
    3d86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e3 55       	subi	r30, 0x53	; 83
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 81       	ld	r24, Z
    3d90:	91 81       	ldd	r25, Z+1	; 0x01
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	d1 f6       	brne	.-76     	; 0x3d4a <main+0xd98>
    3d96:	27 c0       	rjmp	.+78     	; 0x3de6 <main+0xe34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d98:	8e 01       	movw	r16, r28
    3d9a:	03 55       	subi	r16, 0x53	; 83
    3d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9e:	fe 01       	movw	r30, r28
    3da0:	e1 55       	subi	r30, 0x51	; 81
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	f8 01       	movw	r30, r16
    3db6:	91 83       	std	Z+1, r25	; 0x01
    3db8:	80 83       	st	Z, r24
    3dba:	de 01       	movw	r26, r28
    3dbc:	a7 55       	subi	r26, 0x57	; 87
    3dbe:	bf 4f       	sbci	r27, 0xFF	; 255
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	e3 55       	subi	r30, 0x53	; 83
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	80 81       	ld	r24, Z
    3dc8:	91 81       	ldd	r25, Z+1	; 0x01
    3dca:	8d 93       	st	X+, r24
    3dcc:	9c 93       	st	X, r25
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e7 55       	subi	r30, 0x57	; 87
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	80 81       	ld	r24, Z
    3dd6:	91 81       	ldd	r25, Z+1	; 0x01
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <main+0xe26>
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e7 55       	subi	r30, 0x57	; 87
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	91 83       	std	Z+1, r25	; 0x01
    3de4:	80 83       	st	Z, r24

					/* The door will open for 4 seconds */
					_delay_ms(4000);

					/* Close the door */
					DCM_voidRotate(CWW_STATE);
    3de6:	82 e0       	ldi	r24, 0x02	; 2
    3de8:	0e 94 a3 10 	call	0x2146	; 0x2146 <DCM_voidRotate>
    3dec:	fe 01       	movw	r30, r28
    3dee:	eb 55       	subi	r30, 0x5B	; 91
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	aa e7       	ldi	r26, 0x7A	; 122
    3df8:	b4 e4       	ldi	r27, 0x44	; 68
    3dfa:	80 83       	st	Z, r24
    3dfc:	91 83       	std	Z+1, r25	; 0x01
    3dfe:	a2 83       	std	Z+2, r26	; 0x02
    3e00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e02:	8e 01       	movw	r16, r28
    3e04:	0f 55       	subi	r16, 0x5F	; 95
    3e06:	1f 4f       	sbci	r17, 0xFF	; 255
    3e08:	fe 01       	movw	r30, r28
    3e0a:	eb 55       	subi	r30, 0x5B	; 91
    3e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0e:	60 81       	ld	r22, Z
    3e10:	71 81       	ldd	r23, Z+1	; 0x01
    3e12:	82 81       	ldd	r24, Z+2	; 0x02
    3e14:	93 81       	ldd	r25, Z+3	; 0x03
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	4a ef       	ldi	r20, 0xFA	; 250
    3e1c:	54 e4       	ldi	r21, 0x44	; 68
    3e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	f8 01       	movw	r30, r16
    3e28:	80 83       	st	Z, r24
    3e2a:	91 83       	std	Z+1, r25	; 0x01
    3e2c:	a2 83       	std	Z+2, r26	; 0x02
    3e2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e30:	fe 01       	movw	r30, r28
    3e32:	ef 55       	subi	r30, 0x5F	; 95
    3e34:	ff 4f       	sbci	r31, 0xFF	; 255
    3e36:	60 81       	ld	r22, Z
    3e38:	71 81       	ldd	r23, Z+1	; 0x01
    3e3a:	82 81       	ldd	r24, Z+2	; 0x02
    3e3c:	93 81       	ldd	r25, Z+3	; 0x03
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e8       	ldi	r20, 0x80	; 128
    3e44:	5f e3       	ldi	r21, 0x3F	; 63
    3e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e4a:	88 23       	and	r24, r24
    3e4c:	44 f4       	brge	.+16     	; 0x3e5e <main+0xeac>
		__ticks = 1;
    3e4e:	fe 01       	movw	r30, r28
    3e50:	e1 56       	subi	r30, 0x61	; 97
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	80 83       	st	Z, r24
    3e5c:	64 c0       	rjmp	.+200    	; 0x3f26 <main+0xf74>
	else if (__tmp > 65535)
    3e5e:	fe 01       	movw	r30, r28
    3e60:	ef 55       	subi	r30, 0x5F	; 95
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	60 81       	ld	r22, Z
    3e66:	71 81       	ldd	r23, Z+1	; 0x01
    3e68:	82 81       	ldd	r24, Z+2	; 0x02
    3e6a:	93 81       	ldd	r25, Z+3	; 0x03
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	3f ef       	ldi	r19, 0xFF	; 255
    3e70:	4f e7       	ldi	r20, 0x7F	; 127
    3e72:	57 e4       	ldi	r21, 0x47	; 71
    3e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e78:	18 16       	cp	r1, r24
    3e7a:	0c f0       	brlt	.+2      	; 0x3e7e <main+0xecc>
    3e7c:	43 c0       	rjmp	.+134    	; 0x3f04 <main+0xf52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7e:	fe 01       	movw	r30, r28
    3e80:	eb 55       	subi	r30, 0x5B	; 91
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	60 81       	ld	r22, Z
    3e86:	71 81       	ldd	r23, Z+1	; 0x01
    3e88:	82 81       	ldd	r24, Z+2	; 0x02
    3e8a:	93 81       	ldd	r25, Z+3	; 0x03
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e2       	ldi	r20, 0x20	; 32
    3e92:	51 e4       	ldi	r21, 0x41	; 65
    3e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	8e 01       	movw	r16, r28
    3e9e:	01 56       	subi	r16, 0x61	; 97
    3ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea2:	bc 01       	movw	r22, r24
    3ea4:	cd 01       	movw	r24, r26
    3ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	f8 01       	movw	r30, r16
    3eb0:	91 83       	std	Z+1, r25	; 0x01
    3eb2:	80 83       	st	Z, r24
    3eb4:	1f c0       	rjmp	.+62     	; 0x3ef4 <main+0xf42>
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	e3 56       	subi	r30, 0x63	; 99
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	88 ec       	ldi	r24, 0xC8	; 200
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	80 83       	st	Z, r24
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e3 56       	subi	r30, 0x63	; 99
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	80 81       	ld	r24, Z
    3ecc:	91 81       	ldd	r25, Z+1	; 0x01
    3ece:	01 97       	sbiw	r24, 0x01	; 1
    3ed0:	f1 f7       	brne	.-4      	; 0x3ece <main+0xf1c>
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	e3 56       	subi	r30, 0x63	; 99
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	91 83       	std	Z+1, r25	; 0x01
    3eda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3edc:	de 01       	movw	r26, r28
    3ede:	a1 56       	subi	r26, 0x61	; 97
    3ee0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e1 56       	subi	r30, 0x61	; 97
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	11 96       	adiw	r26, 0x01	; 1
    3ef0:	9c 93       	st	X, r25
    3ef2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e1 56       	subi	r30, 0x61	; 97
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	91 81       	ldd	r25, Z+1	; 0x01
    3efe:	00 97       	sbiw	r24, 0x00	; 0
    3f00:	d1 f6       	brne	.-76     	; 0x3eb6 <main+0xf04>
    3f02:	27 c0       	rjmp	.+78     	; 0x3f52 <main+0xfa0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f04:	8e 01       	movw	r16, r28
    3f06:	01 56       	subi	r16, 0x61	; 97
    3f08:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	ef 55       	subi	r30, 0x5F	; 95
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	60 81       	ld	r22, Z
    3f12:	71 81       	ldd	r23, Z+1	; 0x01
    3f14:	82 81       	ldd	r24, Z+2	; 0x02
    3f16:	93 81       	ldd	r25, Z+3	; 0x03
    3f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	f8 01       	movw	r30, r16
    3f22:	91 83       	std	Z+1, r25	; 0x01
    3f24:	80 83       	st	Z, r24
    3f26:	de 01       	movw	r26, r28
    3f28:	a5 56       	subi	r26, 0x65	; 101
    3f2a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	e1 56       	subi	r30, 0x61	; 97
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	80 81       	ld	r24, Z
    3f34:	91 81       	ldd	r25, Z+1	; 0x01
    3f36:	8d 93       	st	X+, r24
    3f38:	9c 93       	st	X, r25
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e5 56       	subi	r30, 0x65	; 101
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	80 81       	ld	r24, Z
    3f42:	91 81       	ldd	r25, Z+1	; 0x01
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <main+0xf92>
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e5 56       	subi	r30, 0x65	; 101
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	80 83       	st	Z, r24
					_delay_ms(1000);

					/* Stop Motor */
					DCM_voidRotate(STOP_STATE);
    3f52:	83 e0       	ldi	r24, 0x03	; 3
    3f54:	0e 94 a3 10 	call	0x2146	; 0x2146 <DCM_voidRotate>

					/* Turn on the indicator red led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_LOW);
    3f58:	83 e0       	ldi	r24, 0x03	; 3
    3f5a:	60 e0       	ldi	r22, 0x00	; 0
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    3f62:	83 e0       	ldi	r24, 0x03	; 3
    3f64:	61 e0       	ldi	r22, 0x01	; 1
    3f66:	41 e0       	ldi	r20, 0x01	; 1
    3f68:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>

					/* Clear LCD */
					CLCD_voidClearScreen();
    3f6c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
					Local_u8Flag=0;
    3f70:	fe 01       	movw	r30, r28
    3f72:	e4 5e       	subi	r30, 0xE4	; 228
    3f74:	fe 4f       	sbci	r31, 0xFE	; 254
    3f76:	10 82       	st	Z, r1
    3f78:	0c 94 09 28 	jmp	0x5012	; 0x5012 <main+0x2060>

				}
				else if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[3]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[0]) )
    3f7c:	81 e2       	ldi	r24, 0x21	; 33
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3f84:	9c 01       	movw	r18, r24
    3f86:	fe 01       	movw	r30, r28
    3f88:	e3 5e       	subi	r30, 0xE3	; 227
    3f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8c:	83 81       	ldd	r24, Z+3	; 0x03
    3f8e:	88 2f       	mov	r24, r24
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	28 17       	cp	r18, r24
    3f94:	39 07       	cpc	r19, r25
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <main+0xfe8>
    3f98:	05 c1       	rjmp	.+522    	; 0x41a4 <main+0x11f2>
    3f9a:	82 e2       	ldi	r24, 0x22	; 34
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3fa2:	9c 01       	movw	r18, r24
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e3 5e       	subi	r30, 0xE3	; 227
    3fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    3faa:	82 81       	ldd	r24, Z+2	; 0x02
    3fac:	88 2f       	mov	r24, r24
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	28 17       	cp	r18, r24
    3fb2:	39 07       	cpc	r19, r25
    3fb4:	09 f0       	breq	.+2      	; 0x3fb8 <main+0x1006>
    3fb6:	f6 c0       	rjmp	.+492    	; 0x41a4 <main+0x11f2>
    3fb8:	83 e2       	ldi	r24, 0x23	; 35
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3fc0:	9c 01       	movw	r18, r24
    3fc2:	fe 01       	movw	r30, r28
    3fc4:	e3 5e       	subi	r30, 0xE3	; 227
    3fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fc8:	81 81       	ldd	r24, Z+1	; 0x01
    3fca:	88 2f       	mov	r24, r24
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	28 17       	cp	r18, r24
    3fd0:	39 07       	cpc	r19, r25
    3fd2:	09 f0       	breq	.+2      	; 0x3fd6 <main+0x1024>
    3fd4:	e7 c0       	rjmp	.+462    	; 0x41a4 <main+0x11f2>
    3fd6:	84 e2       	ldi	r24, 0x24	; 36
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    3fde:	9c 01       	movw	r18, r24
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e3 5e       	subi	r30, 0xE3	; 227
    3fe4:	fe 4f       	sbci	r31, 0xFE	; 254
    3fe6:	80 81       	ld	r24, Z
    3fe8:	88 2f       	mov	r24, r24
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	28 17       	cp	r18, r24
    3fee:	39 07       	cpc	r19, r25
    3ff0:	09 f0       	breq	.+2      	; 0x3ff4 <main+0x1042>
    3ff2:	d8 c0       	rjmp	.+432    	; 0x41a4 <main+0x11f2>
				{
					CLCD_voidClearScreen();
    3ff4:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
					CLCD_voidGoToXY(0,1);
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	61 e0       	ldi	r22, 0x01	; 1
    3ffc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendString("Calling Police");
    4000:	83 ec       	ldi	r24, 0xC3	; 195
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>

					/* Turn on the indicator blue led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_LOW);
    4008:	83 e0       	ldi	r24, 0x03	; 3
    400a:	61 e0       	ldi	r22, 0x01	; 1
    400c:	40 e0       	ldi	r20, 0x00	; 0
    400e:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_HIGH);
    4012:	83 e0       	ldi	r24, 0x03	; 3
    4014:	62 e0       	ldi	r22, 0x02	; 2
    4016:	41 e0       	ldi	r20, 0x01	; 1
    4018:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    401c:	fe 01       	movw	r30, r28
    401e:	e9 56       	subi	r30, 0x69	; 105
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 e0       	ldi	r24, 0x00	; 0
    4024:	90 e4       	ldi	r25, 0x40	; 64
    4026:	ac e9       	ldi	r26, 0x9C	; 156
    4028:	b5 e4       	ldi	r27, 0x45	; 69
    402a:	80 83       	st	Z, r24
    402c:	91 83       	std	Z+1, r25	; 0x01
    402e:	a2 83       	std	Z+2, r26	; 0x02
    4030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4032:	8e 01       	movw	r16, r28
    4034:	0d 56       	subi	r16, 0x6D	; 109
    4036:	1f 4f       	sbci	r17, 0xFF	; 255
    4038:	fe 01       	movw	r30, r28
    403a:	e9 56       	subi	r30, 0x69	; 105
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	60 81       	ld	r22, Z
    4040:	71 81       	ldd	r23, Z+1	; 0x01
    4042:	82 81       	ldd	r24, Z+2	; 0x02
    4044:	93 81       	ldd	r25, Z+3	; 0x03
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	4a ef       	ldi	r20, 0xFA	; 250
    404c:	54 e4       	ldi	r21, 0x44	; 68
    404e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	f8 01       	movw	r30, r16
    4058:	80 83       	st	Z, r24
    405a:	91 83       	std	Z+1, r25	; 0x01
    405c:	a2 83       	std	Z+2, r26	; 0x02
    405e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4060:	fe 01       	movw	r30, r28
    4062:	ed 56       	subi	r30, 0x6D	; 109
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	60 81       	ld	r22, Z
    4068:	71 81       	ldd	r23, Z+1	; 0x01
    406a:	82 81       	ldd	r24, Z+2	; 0x02
    406c:	93 81       	ldd	r25, Z+3	; 0x03
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e8       	ldi	r20, 0x80	; 128
    4074:	5f e3       	ldi	r21, 0x3F	; 63
    4076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    407a:	88 23       	and	r24, r24
    407c:	44 f4       	brge	.+16     	; 0x408e <main+0x10dc>
		__ticks = 1;
    407e:	fe 01       	movw	r30, r28
    4080:	ef 56       	subi	r30, 0x6F	; 111
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
    408c:	64 c0       	rjmp	.+200    	; 0x4156 <main+0x11a4>
	else if (__tmp > 65535)
    408e:	fe 01       	movw	r30, r28
    4090:	ed 56       	subi	r30, 0x6D	; 109
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	60 81       	ld	r22, Z
    4096:	71 81       	ldd	r23, Z+1	; 0x01
    4098:	82 81       	ldd	r24, Z+2	; 0x02
    409a:	93 81       	ldd	r25, Z+3	; 0x03
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	3f ef       	ldi	r19, 0xFF	; 255
    40a0:	4f e7       	ldi	r20, 0x7F	; 127
    40a2:	57 e4       	ldi	r21, 0x47	; 71
    40a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40a8:	18 16       	cp	r1, r24
    40aa:	0c f0       	brlt	.+2      	; 0x40ae <main+0x10fc>
    40ac:	43 c0       	rjmp	.+134    	; 0x4134 <main+0x1182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ae:	fe 01       	movw	r30, r28
    40b0:	e9 56       	subi	r30, 0x69	; 105
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	60 81       	ld	r22, Z
    40b6:	71 81       	ldd	r23, Z+1	; 0x01
    40b8:	82 81       	ldd	r24, Z+2	; 0x02
    40ba:	93 81       	ldd	r25, Z+3	; 0x03
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 e2       	ldi	r20, 0x20	; 32
    40c2:	51 e4       	ldi	r21, 0x41	; 65
    40c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	8e 01       	movw	r16, r28
    40ce:	0f 56       	subi	r16, 0x6F	; 111
    40d0:	1f 4f       	sbci	r17, 0xFF	; 255
    40d2:	bc 01       	movw	r22, r24
    40d4:	cd 01       	movw	r24, r26
    40d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	f8 01       	movw	r30, r16
    40e0:	91 83       	std	Z+1, r25	; 0x01
    40e2:	80 83       	st	Z, r24
    40e4:	1f c0       	rjmp	.+62     	; 0x4124 <main+0x1172>
    40e6:	fe 01       	movw	r30, r28
    40e8:	e1 57       	subi	r30, 0x71	; 113
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	88 ec       	ldi	r24, 0xC8	; 200
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	80 83       	st	Z, r24
    40f4:	fe 01       	movw	r30, r28
    40f6:	e1 57       	subi	r30, 0x71	; 113
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	80 81       	ld	r24, Z
    40fc:	91 81       	ldd	r25, Z+1	; 0x01
    40fe:	01 97       	sbiw	r24, 0x01	; 1
    4100:	f1 f7       	brne	.-4      	; 0x40fe <main+0x114c>
    4102:	fe 01       	movw	r30, r28
    4104:	e1 57       	subi	r30, 0x71	; 113
    4106:	ff 4f       	sbci	r31, 0xFF	; 255
    4108:	91 83       	std	Z+1, r25	; 0x01
    410a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410c:	de 01       	movw	r26, r28
    410e:	af 56       	subi	r26, 0x6F	; 111
    4110:	bf 4f       	sbci	r27, 0xFF	; 255
    4112:	fe 01       	movw	r30, r28
    4114:	ef 56       	subi	r30, 0x6F	; 111
    4116:	ff 4f       	sbci	r31, 0xFF	; 255
    4118:	80 81       	ld	r24, Z
    411a:	91 81       	ldd	r25, Z+1	; 0x01
    411c:	01 97       	sbiw	r24, 0x01	; 1
    411e:	11 96       	adiw	r26, 0x01	; 1
    4120:	9c 93       	st	X, r25
    4122:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4124:	fe 01       	movw	r30, r28
    4126:	ef 56       	subi	r30, 0x6F	; 111
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	80 81       	ld	r24, Z
    412c:	91 81       	ldd	r25, Z+1	; 0x01
    412e:	00 97       	sbiw	r24, 0x00	; 0
    4130:	d1 f6       	brne	.-76     	; 0x40e6 <main+0x1134>
    4132:	27 c0       	rjmp	.+78     	; 0x4182 <main+0x11d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4134:	8e 01       	movw	r16, r28
    4136:	0f 56       	subi	r16, 0x6F	; 111
    4138:	1f 4f       	sbci	r17, 0xFF	; 255
    413a:	fe 01       	movw	r30, r28
    413c:	ed 56       	subi	r30, 0x6D	; 109
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	60 81       	ld	r22, Z
    4142:	71 81       	ldd	r23, Z+1	; 0x01
    4144:	82 81       	ldd	r24, Z+2	; 0x02
    4146:	93 81       	ldd	r25, Z+3	; 0x03
    4148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	f8 01       	movw	r30, r16
    4152:	91 83       	std	Z+1, r25	; 0x01
    4154:	80 83       	st	Z, r24
    4156:	de 01       	movw	r26, r28
    4158:	a3 57       	subi	r26, 0x73	; 115
    415a:	bf 4f       	sbci	r27, 0xFF	; 255
    415c:	fe 01       	movw	r30, r28
    415e:	ef 56       	subi	r30, 0x6F	; 111
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	80 81       	ld	r24, Z
    4164:	91 81       	ldd	r25, Z+1	; 0x01
    4166:	8d 93       	st	X+, r24
    4168:	9c 93       	st	X, r25
    416a:	fe 01       	movw	r30, r28
    416c:	e3 57       	subi	r30, 0x73	; 115
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	80 81       	ld	r24, Z
    4172:	91 81       	ldd	r25, Z+1	; 0x01
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <main+0x11c2>
    4178:	fe 01       	movw	r30, r28
    417a:	e3 57       	subi	r30, 0x73	; 115
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	91 83       	std	Z+1, r25	; 0x01
    4180:	80 83       	st	Z, r24

					/* wait 5000 ms */
					_delay_ms(5000);

					/* Turn on the indicator red led */
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_HIGH);
    4182:	83 e0       	ldi	r24, 0x03	; 3
    4184:	61 e0       	ldi	r22, 0x01	; 1
    4186:	41 e0       	ldi	r20, 0x01	; 1
    4188:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
					DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_LOW);
    418c:	83 e0       	ldi	r24, 0x03	; 3
    418e:	62 e0       	ldi	r22, 0x02	; 2
    4190:	40 e0       	ldi	r20, 0x00	; 0
    4192:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>

					/* Clear LCD */
					CLCD_voidClearScreen();
    4196:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>

					Local_u8Flag=0;
    419a:	fe 01       	movw	r30, r28
    419c:	e4 5e       	subi	r30, 0xE4	; 228
    419e:	fe 4f       	sbci	r31, 0xFE	; 254
    41a0:	10 82       	st	Z, r1
    41a2:	37 c7       	rjmp	.+3694   	; 0x5012 <main+0x2060>
				}
				else
				{
					Local_u8Tries--;
    41a4:	de 01       	movw	r26, r28
    41a6:	a6 5e       	subi	r26, 0xE6	; 230
    41a8:	be 4f       	sbci	r27, 0xFE	; 254
    41aa:	fe 01       	movw	r30, r28
    41ac:	e6 5e       	subi	r30, 0xE6	; 230
    41ae:	fe 4f       	sbci	r31, 0xFE	; 254
    41b0:	80 81       	ld	r24, Z
    41b2:	81 50       	subi	r24, 0x01	; 1
    41b4:	8c 93       	st	X, r24
					/* Check if the three tries are */
					if(Local_u8Tries>0)
    41b6:	fe 01       	movw	r30, r28
    41b8:	e6 5e       	subi	r30, 0xE6	; 230
    41ba:	fe 4f       	sbci	r31, 0xFE	; 254
    41bc:	80 81       	ld	r24, Z
    41be:	88 23       	and	r24, r24
    41c0:	09 f4       	brne	.+2      	; 0x41c4 <main+0x1212>
    41c2:	7f c1       	rjmp	.+766    	; 0x44c2 <main+0x1510>
					{
						CLCD_voidClearScreen();
    41c4:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
						CLCD_voidGoToXY(0,1);
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	61 e0       	ldi	r22, 0x01	; 1
    41cc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
						CLCD_voidSendString("Wrong Password");
    41d0:	82 ed       	ldi	r24, 0xD2	; 210
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
    41d8:	fe 01       	movw	r30, r28
    41da:	e7 57       	subi	r30, 0x77	; 119
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	80 e0       	ldi	r24, 0x00	; 0
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	aa e7       	ldi	r26, 0x7A	; 122
    41e4:	b4 e4       	ldi	r27, 0x44	; 68
    41e6:	80 83       	st	Z, r24
    41e8:	91 83       	std	Z+1, r25	; 0x01
    41ea:	a2 83       	std	Z+2, r26	; 0x02
    41ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41ee:	8e 01       	movw	r16, r28
    41f0:	0b 57       	subi	r16, 0x7B	; 123
    41f2:	1f 4f       	sbci	r17, 0xFF	; 255
    41f4:	fe 01       	movw	r30, r28
    41f6:	e7 57       	subi	r30, 0x77	; 119
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	60 81       	ld	r22, Z
    41fc:	71 81       	ldd	r23, Z+1	; 0x01
    41fe:	82 81       	ldd	r24, Z+2	; 0x02
    4200:	93 81       	ldd	r25, Z+3	; 0x03
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	4a ef       	ldi	r20, 0xFA	; 250
    4208:	54 e4       	ldi	r21, 0x44	; 68
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	f8 01       	movw	r30, r16
    4214:	80 83       	st	Z, r24
    4216:	91 83       	std	Z+1, r25	; 0x01
    4218:	a2 83       	std	Z+2, r26	; 0x02
    421a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    421c:	fe 01       	movw	r30, r28
    421e:	eb 57       	subi	r30, 0x7B	; 123
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	60 81       	ld	r22, Z
    4224:	71 81       	ldd	r23, Z+1	; 0x01
    4226:	82 81       	ldd	r24, Z+2	; 0x02
    4228:	93 81       	ldd	r25, Z+3	; 0x03
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e8       	ldi	r20, 0x80	; 128
    4230:	5f e3       	ldi	r21, 0x3F	; 63
    4232:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4236:	88 23       	and	r24, r24
    4238:	44 f4       	brge	.+16     	; 0x424a <main+0x1298>
		__ticks = 1;
    423a:	fe 01       	movw	r30, r28
    423c:	ed 57       	subi	r30, 0x7D	; 125
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	91 83       	std	Z+1, r25	; 0x01
    4246:	80 83       	st	Z, r24
    4248:	64 c0       	rjmp	.+200    	; 0x4312 <main+0x1360>
	else if (__tmp > 65535)
    424a:	fe 01       	movw	r30, r28
    424c:	eb 57       	subi	r30, 0x7B	; 123
    424e:	ff 4f       	sbci	r31, 0xFF	; 255
    4250:	60 81       	ld	r22, Z
    4252:	71 81       	ldd	r23, Z+1	; 0x01
    4254:	82 81       	ldd	r24, Z+2	; 0x02
    4256:	93 81       	ldd	r25, Z+3	; 0x03
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	3f ef       	ldi	r19, 0xFF	; 255
    425c:	4f e7       	ldi	r20, 0x7F	; 127
    425e:	57 e4       	ldi	r21, 0x47	; 71
    4260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4264:	18 16       	cp	r1, r24
    4266:	0c f0       	brlt	.+2      	; 0x426a <main+0x12b8>
    4268:	43 c0       	rjmp	.+134    	; 0x42f0 <main+0x133e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    426a:	fe 01       	movw	r30, r28
    426c:	e7 57       	subi	r30, 0x77	; 119
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	82 81       	ldd	r24, Z+2	; 0x02
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	40 e2       	ldi	r20, 0x20	; 32
    427e:	51 e4       	ldi	r21, 0x41	; 65
    4280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	8e 01       	movw	r16, r28
    428a:	0d 57       	subi	r16, 0x7D	; 125
    428c:	1f 4f       	sbci	r17, 0xFF	; 255
    428e:	bc 01       	movw	r22, r24
    4290:	cd 01       	movw	r24, r26
    4292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4296:	dc 01       	movw	r26, r24
    4298:	cb 01       	movw	r24, r22
    429a:	f8 01       	movw	r30, r16
    429c:	91 83       	std	Z+1, r25	; 0x01
    429e:	80 83       	st	Z, r24
    42a0:	1f c0       	rjmp	.+62     	; 0x42e0 <main+0x132e>
    42a2:	fe 01       	movw	r30, r28
    42a4:	ef 57       	subi	r30, 0x7F	; 127
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	88 ec       	ldi	r24, 0xC8	; 200
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	91 83       	std	Z+1, r25	; 0x01
    42ae:	80 83       	st	Z, r24
    42b0:	fe 01       	movw	r30, r28
    42b2:	ef 57       	subi	r30, 0x7F	; 127
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	80 81       	ld	r24, Z
    42b8:	91 81       	ldd	r25, Z+1	; 0x01
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	f1 f7       	brne	.-4      	; 0x42ba <main+0x1308>
    42be:	fe 01       	movw	r30, r28
    42c0:	ef 57       	subi	r30, 0x7F	; 127
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	91 83       	std	Z+1, r25	; 0x01
    42c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c8:	de 01       	movw	r26, r28
    42ca:	ad 57       	subi	r26, 0x7D	; 125
    42cc:	bf 4f       	sbci	r27, 0xFF	; 255
    42ce:	fe 01       	movw	r30, r28
    42d0:	ed 57       	subi	r30, 0x7D	; 125
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	80 81       	ld	r24, Z
    42d6:	91 81       	ldd	r25, Z+1	; 0x01
    42d8:	01 97       	sbiw	r24, 0x01	; 1
    42da:	11 96       	adiw	r26, 0x01	; 1
    42dc:	9c 93       	st	X, r25
    42de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e0:	fe 01       	movw	r30, r28
    42e2:	ed 57       	subi	r30, 0x7D	; 125
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	80 81       	ld	r24, Z
    42e8:	91 81       	ldd	r25, Z+1	; 0x01
    42ea:	00 97       	sbiw	r24, 0x00	; 0
    42ec:	d1 f6       	brne	.-76     	; 0x42a2 <main+0x12f0>
    42ee:	27 c0       	rjmp	.+78     	; 0x433e <main+0x138c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f0:	8e 01       	movw	r16, r28
    42f2:	0d 57       	subi	r16, 0x7D	; 125
    42f4:	1f 4f       	sbci	r17, 0xFF	; 255
    42f6:	fe 01       	movw	r30, r28
    42f8:	eb 57       	subi	r30, 0x7B	; 123
    42fa:	ff 4f       	sbci	r31, 0xFF	; 255
    42fc:	60 81       	ld	r22, Z
    42fe:	71 81       	ldd	r23, Z+1	; 0x01
    4300:	82 81       	ldd	r24, Z+2	; 0x02
    4302:	93 81       	ldd	r25, Z+3	; 0x03
    4304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	f8 01       	movw	r30, r16
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	80 83       	st	Z, r24
    4312:	de 01       	movw	r26, r28
    4314:	a1 58       	subi	r26, 0x81	; 129
    4316:	bf 4f       	sbci	r27, 0xFF	; 255
    4318:	fe 01       	movw	r30, r28
    431a:	ed 57       	subi	r30, 0x7D	; 125
    431c:	ff 4f       	sbci	r31, 0xFF	; 255
    431e:	80 81       	ld	r24, Z
    4320:	91 81       	ldd	r25, Z+1	; 0x01
    4322:	8d 93       	st	X+, r24
    4324:	9c 93       	st	X, r25
    4326:	fe 01       	movw	r30, r28
    4328:	e1 58       	subi	r30, 0x81	; 129
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	80 81       	ld	r24, Z
    432e:	91 81       	ldd	r25, Z+1	; 0x01
    4330:	01 97       	sbiw	r24, 0x01	; 1
    4332:	f1 f7       	brne	.-4      	; 0x4330 <main+0x137e>
    4334:	fe 01       	movw	r30, r28
    4336:	e1 58       	subi	r30, 0x81	; 129
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
						_delay_ms(1000);
						CLCD_voidClearScreen();
    433e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
						CLCD_voidSendString("Tries Left:");
    4342:	81 ee       	ldi	r24, 0xE1	; 225
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
						CLCD_voidSendData(Local_u8Tries+48);
    434a:	fe 01       	movw	r30, r28
    434c:	e6 5e       	subi	r30, 0xE6	; 230
    434e:	fe 4f       	sbci	r31, 0xFE	; 254
    4350:	80 81       	ld	r24, Z
    4352:	80 5d       	subi	r24, 0xD0	; 208
    4354:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
    4358:	fe 01       	movw	r30, r28
    435a:	e5 58       	subi	r30, 0x85	; 133
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	aa e7       	ldi	r26, 0x7A	; 122
    4364:	b4 e4       	ldi	r27, 0x44	; 68
    4366:	80 83       	st	Z, r24
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	a2 83       	std	Z+2, r26	; 0x02
    436c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    436e:	8e 01       	movw	r16, r28
    4370:	09 58       	subi	r16, 0x89	; 137
    4372:	1f 4f       	sbci	r17, 0xFF	; 255
    4374:	fe 01       	movw	r30, r28
    4376:	e5 58       	subi	r30, 0x85	; 133
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	60 81       	ld	r22, Z
    437c:	71 81       	ldd	r23, Z+1	; 0x01
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	4a ef       	ldi	r20, 0xFA	; 250
    4388:	54 e4       	ldi	r21, 0x44	; 68
    438a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	f8 01       	movw	r30, r16
    4394:	80 83       	st	Z, r24
    4396:	91 83       	std	Z+1, r25	; 0x01
    4398:	a2 83       	std	Z+2, r26	; 0x02
    439a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    439c:	fe 01       	movw	r30, r28
    439e:	e9 58       	subi	r30, 0x89	; 137
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	82 81       	ldd	r24, Z+2	; 0x02
    43a8:	93 81       	ldd	r25, Z+3	; 0x03
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	40 e8       	ldi	r20, 0x80	; 128
    43b0:	5f e3       	ldi	r21, 0x3F	; 63
    43b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    43b6:	88 23       	and	r24, r24
    43b8:	44 f4       	brge	.+16     	; 0x43ca <main+0x1418>
		__ticks = 1;
    43ba:	fe 01       	movw	r30, r28
    43bc:	eb 58       	subi	r30, 0x8B	; 139
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	91 83       	std	Z+1, r25	; 0x01
    43c6:	80 83       	st	Z, r24
    43c8:	64 c0       	rjmp	.+200    	; 0x4492 <main+0x14e0>
	else if (__tmp > 65535)
    43ca:	fe 01       	movw	r30, r28
    43cc:	e9 58       	subi	r30, 0x89	; 137
    43ce:	ff 4f       	sbci	r31, 0xFF	; 255
    43d0:	60 81       	ld	r22, Z
    43d2:	71 81       	ldd	r23, Z+1	; 0x01
    43d4:	82 81       	ldd	r24, Z+2	; 0x02
    43d6:	93 81       	ldd	r25, Z+3	; 0x03
    43d8:	20 e0       	ldi	r18, 0x00	; 0
    43da:	3f ef       	ldi	r19, 0xFF	; 255
    43dc:	4f e7       	ldi	r20, 0x7F	; 127
    43de:	57 e4       	ldi	r21, 0x47	; 71
    43e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43e4:	18 16       	cp	r1, r24
    43e6:	0c f0       	brlt	.+2      	; 0x43ea <main+0x1438>
    43e8:	43 c0       	rjmp	.+134    	; 0x4470 <main+0x14be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ea:	fe 01       	movw	r30, r28
    43ec:	e5 58       	subi	r30, 0x85	; 133
    43ee:	ff 4f       	sbci	r31, 0xFF	; 255
    43f0:	60 81       	ld	r22, Z
    43f2:	71 81       	ldd	r23, Z+1	; 0x01
    43f4:	82 81       	ldd	r24, Z+2	; 0x02
    43f6:	93 81       	ldd	r25, Z+3	; 0x03
    43f8:	20 e0       	ldi	r18, 0x00	; 0
    43fa:	30 e0       	ldi	r19, 0x00	; 0
    43fc:	40 e2       	ldi	r20, 0x20	; 32
    43fe:	51 e4       	ldi	r21, 0x41	; 65
    4400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4404:	dc 01       	movw	r26, r24
    4406:	cb 01       	movw	r24, r22
    4408:	8e 01       	movw	r16, r28
    440a:	0b 58       	subi	r16, 0x8B	; 139
    440c:	1f 4f       	sbci	r17, 0xFF	; 255
    440e:	bc 01       	movw	r22, r24
    4410:	cd 01       	movw	r24, r26
    4412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	f8 01       	movw	r30, r16
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	80 83       	st	Z, r24
    4420:	1f c0       	rjmp	.+62     	; 0x4460 <main+0x14ae>
    4422:	fe 01       	movw	r30, r28
    4424:	ed 58       	subi	r30, 0x8D	; 141
    4426:	ff 4f       	sbci	r31, 0xFF	; 255
    4428:	88 ec       	ldi	r24, 0xC8	; 200
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	91 83       	std	Z+1, r25	; 0x01
    442e:	80 83       	st	Z, r24
    4430:	fe 01       	movw	r30, r28
    4432:	ed 58       	subi	r30, 0x8D	; 141
    4434:	ff 4f       	sbci	r31, 0xFF	; 255
    4436:	80 81       	ld	r24, Z
    4438:	91 81       	ldd	r25, Z+1	; 0x01
    443a:	01 97       	sbiw	r24, 0x01	; 1
    443c:	f1 f7       	brne	.-4      	; 0x443a <main+0x1488>
    443e:	fe 01       	movw	r30, r28
    4440:	ed 58       	subi	r30, 0x8D	; 141
    4442:	ff 4f       	sbci	r31, 0xFF	; 255
    4444:	91 83       	std	Z+1, r25	; 0x01
    4446:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4448:	de 01       	movw	r26, r28
    444a:	ab 58       	subi	r26, 0x8B	; 139
    444c:	bf 4f       	sbci	r27, 0xFF	; 255
    444e:	fe 01       	movw	r30, r28
    4450:	eb 58       	subi	r30, 0x8B	; 139
    4452:	ff 4f       	sbci	r31, 0xFF	; 255
    4454:	80 81       	ld	r24, Z
    4456:	91 81       	ldd	r25, Z+1	; 0x01
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	11 96       	adiw	r26, 0x01	; 1
    445c:	9c 93       	st	X, r25
    445e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4460:	fe 01       	movw	r30, r28
    4462:	eb 58       	subi	r30, 0x8B	; 139
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	80 81       	ld	r24, Z
    4468:	91 81       	ldd	r25, Z+1	; 0x01
    446a:	00 97       	sbiw	r24, 0x00	; 0
    446c:	d1 f6       	brne	.-76     	; 0x4422 <main+0x1470>
    446e:	d1 c5       	rjmp	.+2978   	; 0x5012 <main+0x2060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4470:	8e 01       	movw	r16, r28
    4472:	0b 58       	subi	r16, 0x8B	; 139
    4474:	1f 4f       	sbci	r17, 0xFF	; 255
    4476:	fe 01       	movw	r30, r28
    4478:	e9 58       	subi	r30, 0x89	; 137
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	60 81       	ld	r22, Z
    447e:	71 81       	ldd	r23, Z+1	; 0x01
    4480:	82 81       	ldd	r24, Z+2	; 0x02
    4482:	93 81       	ldd	r25, Z+3	; 0x03
    4484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4488:	dc 01       	movw	r26, r24
    448a:	cb 01       	movw	r24, r22
    448c:	f8 01       	movw	r30, r16
    448e:	91 83       	std	Z+1, r25	; 0x01
    4490:	80 83       	st	Z, r24
    4492:	de 01       	movw	r26, r28
    4494:	af 58       	subi	r26, 0x8F	; 143
    4496:	bf 4f       	sbci	r27, 0xFF	; 255
    4498:	fe 01       	movw	r30, r28
    449a:	eb 58       	subi	r30, 0x8B	; 139
    449c:	ff 4f       	sbci	r31, 0xFF	; 255
    449e:	80 81       	ld	r24, Z
    44a0:	91 81       	ldd	r25, Z+1	; 0x01
    44a2:	11 96       	adiw	r26, 0x01	; 1
    44a4:	9c 93       	st	X, r25
    44a6:	8e 93       	st	-X, r24
    44a8:	fe 01       	movw	r30, r28
    44aa:	ef 58       	subi	r30, 0x8F	; 143
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 81       	ld	r24, Z
    44b0:	91 81       	ldd	r25, Z+1	; 0x01
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <main+0x1500>
    44b6:	fe 01       	movw	r30, r28
    44b8:	ef 58       	subi	r30, 0x8F	; 143
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	91 83       	std	Z+1, r25	; 0x01
    44be:	80 83       	st	Z, r24
    44c0:	a8 c5       	rjmp	.+2896   	; 0x5012 <main+0x2060>
    44c2:	fe 01       	movw	r30, r28
    44c4:	e3 59       	subi	r30, 0x93	; 147
    44c6:	ff 4f       	sbci	r31, 0xFF	; 255
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	aa ef       	ldi	r26, 0xFA	; 250
    44ce:	b3 e4       	ldi	r27, 0x43	; 67
    44d0:	80 83       	st	Z, r24
    44d2:	91 83       	std	Z+1, r25	; 0x01
    44d4:	a2 83       	std	Z+2, r26	; 0x02
    44d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d8:	8e 01       	movw	r16, r28
    44da:	07 59       	subi	r16, 0x97	; 151
    44dc:	1f 4f       	sbci	r17, 0xFF	; 255
    44de:	fe 01       	movw	r30, r28
    44e0:	e3 59       	subi	r30, 0x93	; 147
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	4a ef       	ldi	r20, 0xFA	; 250
    44f2:	54 e4       	ldi	r21, 0x44	; 68
    44f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	f8 01       	movw	r30, r16
    44fe:	80 83       	st	Z, r24
    4500:	91 83       	std	Z+1, r25	; 0x01
    4502:	a2 83       	std	Z+2, r26	; 0x02
    4504:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4506:	fe 01       	movw	r30, r28
    4508:	e7 59       	subi	r30, 0x97	; 151
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	60 81       	ld	r22, Z
    450e:	71 81       	ldd	r23, Z+1	; 0x01
    4510:	82 81       	ldd	r24, Z+2	; 0x02
    4512:	93 81       	ldd	r25, Z+3	; 0x03
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e8       	ldi	r20, 0x80	; 128
    451a:	5f e3       	ldi	r21, 0x3F	; 63
    451c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4520:	88 23       	and	r24, r24
    4522:	44 f4       	brge	.+16     	; 0x4534 <main+0x1582>
		__ticks = 1;
    4524:	fe 01       	movw	r30, r28
    4526:	e9 59       	subi	r30, 0x99	; 153
    4528:	ff 4f       	sbci	r31, 0xFF	; 255
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	91 83       	std	Z+1, r25	; 0x01
    4530:	80 83       	st	Z, r24
    4532:	64 c0       	rjmp	.+200    	; 0x45fc <main+0x164a>
	else if (__tmp > 65535)
    4534:	fe 01       	movw	r30, r28
    4536:	e7 59       	subi	r30, 0x97	; 151
    4538:	ff 4f       	sbci	r31, 0xFF	; 255
    453a:	60 81       	ld	r22, Z
    453c:	71 81       	ldd	r23, Z+1	; 0x01
    453e:	82 81       	ldd	r24, Z+2	; 0x02
    4540:	93 81       	ldd	r25, Z+3	; 0x03
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	3f ef       	ldi	r19, 0xFF	; 255
    4546:	4f e7       	ldi	r20, 0x7F	; 127
    4548:	57 e4       	ldi	r21, 0x47	; 71
    454a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    454e:	18 16       	cp	r1, r24
    4550:	0c f0       	brlt	.+2      	; 0x4554 <main+0x15a2>
    4552:	43 c0       	rjmp	.+134    	; 0x45da <main+0x1628>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4554:	fe 01       	movw	r30, r28
    4556:	e3 59       	subi	r30, 0x93	; 147
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	60 81       	ld	r22, Z
    455c:	71 81       	ldd	r23, Z+1	; 0x01
    455e:	82 81       	ldd	r24, Z+2	; 0x02
    4560:	93 81       	ldd	r25, Z+3	; 0x03
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	40 e2       	ldi	r20, 0x20	; 32
    4568:	51 e4       	ldi	r21, 0x41	; 65
    456a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    456e:	dc 01       	movw	r26, r24
    4570:	cb 01       	movw	r24, r22
    4572:	8e 01       	movw	r16, r28
    4574:	09 59       	subi	r16, 0x99	; 153
    4576:	1f 4f       	sbci	r17, 0xFF	; 255
    4578:	bc 01       	movw	r22, r24
    457a:	cd 01       	movw	r24, r26
    457c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	f8 01       	movw	r30, r16
    4586:	91 83       	std	Z+1, r25	; 0x01
    4588:	80 83       	st	Z, r24
    458a:	1f c0       	rjmp	.+62     	; 0x45ca <main+0x1618>
    458c:	fe 01       	movw	r30, r28
    458e:	eb 59       	subi	r30, 0x9B	; 155
    4590:	ff 4f       	sbci	r31, 0xFF	; 255
    4592:	88 ec       	ldi	r24, 0xC8	; 200
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	91 83       	std	Z+1, r25	; 0x01
    4598:	80 83       	st	Z, r24
    459a:	fe 01       	movw	r30, r28
    459c:	eb 59       	subi	r30, 0x9B	; 155
    459e:	ff 4f       	sbci	r31, 0xFF	; 255
    45a0:	80 81       	ld	r24, Z
    45a2:	91 81       	ldd	r25, Z+1	; 0x01
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	f1 f7       	brne	.-4      	; 0x45a4 <main+0x15f2>
    45a8:	fe 01       	movw	r30, r28
    45aa:	eb 59       	subi	r30, 0x9B	; 155
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	91 83       	std	Z+1, r25	; 0x01
    45b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b2:	de 01       	movw	r26, r28
    45b4:	a9 59       	subi	r26, 0x99	; 153
    45b6:	bf 4f       	sbci	r27, 0xFF	; 255
    45b8:	fe 01       	movw	r30, r28
    45ba:	e9 59       	subi	r30, 0x99	; 153
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	80 81       	ld	r24, Z
    45c0:	91 81       	ldd	r25, Z+1	; 0x01
    45c2:	01 97       	sbiw	r24, 0x01	; 1
    45c4:	11 96       	adiw	r26, 0x01	; 1
    45c6:	9c 93       	st	X, r25
    45c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ca:	fe 01       	movw	r30, r28
    45cc:	e9 59       	subi	r30, 0x99	; 153
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	80 81       	ld	r24, Z
    45d2:	91 81       	ldd	r25, Z+1	; 0x01
    45d4:	00 97       	sbiw	r24, 0x00	; 0
    45d6:	d1 f6       	brne	.-76     	; 0x458c <main+0x15da>
    45d8:	27 c0       	rjmp	.+78     	; 0x4628 <main+0x1676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45da:	8e 01       	movw	r16, r28
    45dc:	09 59       	subi	r16, 0x99	; 153
    45de:	1f 4f       	sbci	r17, 0xFF	; 255
    45e0:	fe 01       	movw	r30, r28
    45e2:	e7 59       	subi	r30, 0x97	; 151
    45e4:	ff 4f       	sbci	r31, 0xFF	; 255
    45e6:	60 81       	ld	r22, Z
    45e8:	71 81       	ldd	r23, Z+1	; 0x01
    45ea:	82 81       	ldd	r24, Z+2	; 0x02
    45ec:	93 81       	ldd	r25, Z+3	; 0x03
    45ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	f8 01       	movw	r30, r16
    45f8:	91 83       	std	Z+1, r25	; 0x01
    45fa:	80 83       	st	Z, r24
    45fc:	de 01       	movw	r26, r28
    45fe:	ad 59       	subi	r26, 0x9D	; 157
    4600:	bf 4f       	sbci	r27, 0xFF	; 255
    4602:	fe 01       	movw	r30, r28
    4604:	e9 59       	subi	r30, 0x99	; 153
    4606:	ff 4f       	sbci	r31, 0xFF	; 255
    4608:	80 81       	ld	r24, Z
    460a:	91 81       	ldd	r25, Z+1	; 0x01
    460c:	8d 93       	st	X+, r24
    460e:	9c 93       	st	X, r25
    4610:	fe 01       	movw	r30, r28
    4612:	ed 59       	subi	r30, 0x9D	; 157
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	80 81       	ld	r24, Z
    4618:	91 81       	ldd	r25, Z+1	; 0x01
    461a:	01 97       	sbiw	r24, 0x01	; 1
    461c:	f1 f7       	brne	.-4      	; 0x461a <main+0x1668>
    461e:	fe 01       	movw	r30, r28
    4620:	ed 59       	subi	r30, 0x9D	; 157
    4622:	ff 4f       	sbci	r31, 0xFF	; 255
    4624:	91 83       	std	Z+1, r25	; 0x01
    4626:	80 83       	st	Z, r24
					{
						/* wait 500 ms */
						_delay_ms(500);

						/* Clear LCD */
						CLCD_voidClearScreen();
    4628:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>

						/* Control the position (0,1) and print string in LCD  */
						CLCD_voidGoToXY(0,2);
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	62 e0       	ldi	r22, 0x02	; 2
    4630:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
						CLCD_voidSendString("LOGIN BLOCKED");
    4634:	8d ee       	ldi	r24, 0xED	; 237
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>

						/* Turn on buzzer */
						DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_HIGH);
    463c:	83 e0       	ldi	r24, 0x03	; 3
    463e:	63 e0       	ldi	r22, 0x03	; 3
    4640:	41 e0       	ldi	r20, 0x01	; 1
    4642:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
    4646:	fe 01       	movw	r30, r28
    4648:	e1 5a       	subi	r30, 0xA1	; 161
    464a:	ff 4f       	sbci	r31, 0xFF	; 255
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	90 e4       	ldi	r25, 0x40	; 64
    4650:	ac e1       	ldi	r26, 0x1C	; 28
    4652:	b6 e4       	ldi	r27, 0x46	; 70
    4654:	80 83       	st	Z, r24
    4656:	91 83       	std	Z+1, r25	; 0x01
    4658:	a2 83       	std	Z+2, r26	; 0x02
    465a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465c:	8e 01       	movw	r16, r28
    465e:	05 5a       	subi	r16, 0xA5	; 165
    4660:	1f 4f       	sbci	r17, 0xFF	; 255
    4662:	fe 01       	movw	r30, r28
    4664:	e1 5a       	subi	r30, 0xA1	; 161
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	60 81       	ld	r22, Z
    466a:	71 81       	ldd	r23, Z+1	; 0x01
    466c:	82 81       	ldd	r24, Z+2	; 0x02
    466e:	93 81       	ldd	r25, Z+3	; 0x03
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	4a ef       	ldi	r20, 0xFA	; 250
    4676:	54 e4       	ldi	r21, 0x44	; 68
    4678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	f8 01       	movw	r30, r16
    4682:	80 83       	st	Z, r24
    4684:	91 83       	std	Z+1, r25	; 0x01
    4686:	a2 83       	std	Z+2, r26	; 0x02
    4688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    468a:	fe 01       	movw	r30, r28
    468c:	e5 5a       	subi	r30, 0xA5	; 165
    468e:	ff 4f       	sbci	r31, 0xFF	; 255
    4690:	60 81       	ld	r22, Z
    4692:	71 81       	ldd	r23, Z+1	; 0x01
    4694:	82 81       	ldd	r24, Z+2	; 0x02
    4696:	93 81       	ldd	r25, Z+3	; 0x03
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	40 e8       	ldi	r20, 0x80	; 128
    469e:	5f e3       	ldi	r21, 0x3F	; 63
    46a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46a4:	88 23       	and	r24, r24
    46a6:	44 f4       	brge	.+16     	; 0x46b8 <main+0x1706>
		__ticks = 1;
    46a8:	fe 01       	movw	r30, r28
    46aa:	e7 5a       	subi	r30, 0xA7	; 167
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	80 83       	st	Z, r24
    46b6:	64 c0       	rjmp	.+200    	; 0x4780 <main+0x17ce>
	else if (__tmp > 65535)
    46b8:	fe 01       	movw	r30, r28
    46ba:	e5 5a       	subi	r30, 0xA5	; 165
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	60 81       	ld	r22, Z
    46c0:	71 81       	ldd	r23, Z+1	; 0x01
    46c2:	82 81       	ldd	r24, Z+2	; 0x02
    46c4:	93 81       	ldd	r25, Z+3	; 0x03
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	3f ef       	ldi	r19, 0xFF	; 255
    46ca:	4f e7       	ldi	r20, 0x7F	; 127
    46cc:	57 e4       	ldi	r21, 0x47	; 71
    46ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46d2:	18 16       	cp	r1, r24
    46d4:	0c f0       	brlt	.+2      	; 0x46d8 <main+0x1726>
    46d6:	43 c0       	rjmp	.+134    	; 0x475e <main+0x17ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d8:	fe 01       	movw	r30, r28
    46da:	e1 5a       	subi	r30, 0xA1	; 161
    46dc:	ff 4f       	sbci	r31, 0xFF	; 255
    46de:	60 81       	ld	r22, Z
    46e0:	71 81       	ldd	r23, Z+1	; 0x01
    46e2:	82 81       	ldd	r24, Z+2	; 0x02
    46e4:	93 81       	ldd	r25, Z+3	; 0x03
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e2       	ldi	r20, 0x20	; 32
    46ec:	51 e4       	ldi	r21, 0x41	; 65
    46ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	8e 01       	movw	r16, r28
    46f8:	07 5a       	subi	r16, 0xA7	; 167
    46fa:	1f 4f       	sbci	r17, 0xFF	; 255
    46fc:	bc 01       	movw	r22, r24
    46fe:	cd 01       	movw	r24, r26
    4700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4704:	dc 01       	movw	r26, r24
    4706:	cb 01       	movw	r24, r22
    4708:	f8 01       	movw	r30, r16
    470a:	91 83       	std	Z+1, r25	; 0x01
    470c:	80 83       	st	Z, r24
    470e:	1f c0       	rjmp	.+62     	; 0x474e <main+0x179c>
    4710:	fe 01       	movw	r30, r28
    4712:	e9 5a       	subi	r30, 0xA9	; 169
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	88 ec       	ldi	r24, 0xC8	; 200
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	80 83       	st	Z, r24
    471e:	fe 01       	movw	r30, r28
    4720:	e9 5a       	subi	r30, 0xA9	; 169
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	80 81       	ld	r24, Z
    4726:	91 81       	ldd	r25, Z+1	; 0x01
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <main+0x1776>
    472c:	fe 01       	movw	r30, r28
    472e:	e9 5a       	subi	r30, 0xA9	; 169
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4736:	de 01       	movw	r26, r28
    4738:	a7 5a       	subi	r26, 0xA7	; 167
    473a:	bf 4f       	sbci	r27, 0xFF	; 255
    473c:	fe 01       	movw	r30, r28
    473e:	e7 5a       	subi	r30, 0xA7	; 167
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	80 81       	ld	r24, Z
    4744:	91 81       	ldd	r25, Z+1	; 0x01
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	11 96       	adiw	r26, 0x01	; 1
    474a:	9c 93       	st	X, r25
    474c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474e:	fe 01       	movw	r30, r28
    4750:	e7 5a       	subi	r30, 0xA7	; 167
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 81       	ld	r24, Z
    4756:	91 81       	ldd	r25, Z+1	; 0x01
    4758:	00 97       	sbiw	r24, 0x00	; 0
    475a:	d1 f6       	brne	.-76     	; 0x4710 <main+0x175e>
    475c:	27 c0       	rjmp	.+78     	; 0x47ac <main+0x17fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475e:	8e 01       	movw	r16, r28
    4760:	07 5a       	subi	r16, 0xA7	; 167
    4762:	1f 4f       	sbci	r17, 0xFF	; 255
    4764:	fe 01       	movw	r30, r28
    4766:	e5 5a       	subi	r30, 0xA5	; 165
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	60 81       	ld	r22, Z
    476c:	71 81       	ldd	r23, Z+1	; 0x01
    476e:	82 81       	ldd	r24, Z+2	; 0x02
    4770:	93 81       	ldd	r25, Z+3	; 0x03
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	f8 01       	movw	r30, r16
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	80 83       	st	Z, r24
    4780:	de 01       	movw	r26, r28
    4782:	ab 5a       	subi	r26, 0xAB	; 171
    4784:	bf 4f       	sbci	r27, 0xFF	; 255
    4786:	fe 01       	movw	r30, r28
    4788:	e7 5a       	subi	r30, 0xA7	; 167
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	80 81       	ld	r24, Z
    478e:	91 81       	ldd	r25, Z+1	; 0x01
    4790:	8d 93       	st	X+, r24
    4792:	9c 93       	st	X, r25
    4794:	fe 01       	movw	r30, r28
    4796:	eb 5a       	subi	r30, 0xAB	; 171
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	80 81       	ld	r24, Z
    479c:	91 81       	ldd	r25, Z+1	; 0x01
    479e:	01 97       	sbiw	r24, 0x01	; 1
    47a0:	f1 f7       	brne	.-4      	; 0x479e <main+0x17ec>
    47a2:	fe 01       	movw	r30, r28
    47a4:	eb 5a       	subi	r30, 0xAB	; 171
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24

						_delay_ms(10000);

						/* Turn off buzzer */
						DIO_u8SetPinValue(DIO_u8PORTD,DIO_u8PIN3,DIO_u8PIN_LOW);
    47ac:	83 e0       	ldi	r24, 0x03	; 3
    47ae:	63 e0       	ldi	r22, 0x03	; 3
    47b0:	40 e0       	ldi	r20, 0x00	; 0
    47b2:	0e 94 10 13 	call	0x2620	; 0x2620 <DIO_u8SetPinValue>
						Local_u8Tries = 3;
    47b6:	fe 01       	movw	r30, r28
    47b8:	e6 5e       	subi	r30, 0xE6	; 230
    47ba:	fe 4f       	sbci	r31, 0xFE	; 254
    47bc:	83 e0       	ldi	r24, 0x03	; 3
    47be:	80 83       	st	Z, r24
						Local_u8Flag=0;
    47c0:	fe 01       	movw	r30, r28
    47c2:	e4 5e       	subi	r30, 0xE4	; 228
    47c4:	fe 4f       	sbci	r31, 0xFE	; 254
    47c6:	10 82       	st	Z, r1
    47c8:	24 c4       	rjmp	.+2120   	; 0x5012 <main+0x2060>
						/* exit the for loop and start from super loop */
						continue;
					}
				}
			}
			else if(Local_u8ReadPassword == '2')
    47ca:	fe 01       	movw	r30, r28
    47cc:	e5 5e       	subi	r30, 0xE5	; 229
    47ce:	fe 4f       	sbci	r31, 0xFE	; 254
    47d0:	80 81       	ld	r24, Z
    47d2:	82 33       	cpi	r24, 0x32	; 50
    47d4:	09 f0       	breq	.+2      	; 0x47d8 <main+0x1826>
    47d6:	a5 c3       	rjmp	.+1866   	; 0x4f22 <main+0x1f70>
			{
				CLCD_voidClearScreen();
    47d8:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
				CLCD_voidSendString("Old Password:");
    47dc:	8b ef       	ldi	r24, 0xFB	; 251
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
				for( i =0 ; i<=3 ; i++)
    47e4:	fe 01       	movw	r30, r28
    47e6:	e7 5e       	subi	r30, 0xE7	; 231
    47e8:	fe 4f       	sbci	r31, 0xFE	; 254
    47ea:	10 82       	st	Z, r1
    47ec:	8e c1       	rjmp	.+796    	; 0x4b0a <main+0x1b58>
				{
					do
					{
						CLCD_voidGoToXY(1,i);
    47ee:	fe 01       	movw	r30, r28
    47f0:	e7 5e       	subi	r30, 0xE7	; 231
    47f2:	fe 4f       	sbci	r31, 0xFE	; 254
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	60 81       	ld	r22, Z
    47f8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
						/* Turn on LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_ON);
    47fc:	8e e0       	ldi	r24, 0x0E	; 14
    47fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    4802:	fe 01       	movw	r30, r28
    4804:	ef 5a       	subi	r30, 0xAF	; 175
    4806:	ff 4f       	sbci	r31, 0xFF	; 255
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	a8 ec       	ldi	r26, 0xC8	; 200
    480e:	b2 e4       	ldi	r27, 0x42	; 66
    4810:	80 83       	st	Z, r24
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	a2 83       	std	Z+2, r26	; 0x02
    4816:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4818:	8e 01       	movw	r16, r28
    481a:	03 5b       	subi	r16, 0xB3	; 179
    481c:	1f 4f       	sbci	r17, 0xFF	; 255
    481e:	fe 01       	movw	r30, r28
    4820:	ef 5a       	subi	r30, 0xAF	; 175
    4822:	ff 4f       	sbci	r31, 0xFF	; 255
    4824:	60 81       	ld	r22, Z
    4826:	71 81       	ldd	r23, Z+1	; 0x01
    4828:	82 81       	ldd	r24, Z+2	; 0x02
    482a:	93 81       	ldd	r25, Z+3	; 0x03
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	4a ef       	ldi	r20, 0xFA	; 250
    4832:	54 e4       	ldi	r21, 0x44	; 68
    4834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	f8 01       	movw	r30, r16
    483e:	80 83       	st	Z, r24
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	a2 83       	std	Z+2, r26	; 0x02
    4844:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4846:	fe 01       	movw	r30, r28
    4848:	e3 5b       	subi	r30, 0xB3	; 179
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	60 81       	ld	r22, Z
    484e:	71 81       	ldd	r23, Z+1	; 0x01
    4850:	82 81       	ldd	r24, Z+2	; 0x02
    4852:	93 81       	ldd	r25, Z+3	; 0x03
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e8       	ldi	r20, 0x80	; 128
    485a:	5f e3       	ldi	r21, 0x3F	; 63
    485c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4860:	88 23       	and	r24, r24
    4862:	44 f4       	brge	.+16     	; 0x4874 <main+0x18c2>
		__ticks = 1;
    4864:	fe 01       	movw	r30, r28
    4866:	e5 5b       	subi	r30, 0xB5	; 181
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	91 83       	std	Z+1, r25	; 0x01
    4870:	80 83       	st	Z, r24
    4872:	64 c0       	rjmp	.+200    	; 0x493c <main+0x198a>
	else if (__tmp > 65535)
    4874:	fe 01       	movw	r30, r28
    4876:	e3 5b       	subi	r30, 0xB3	; 179
    4878:	ff 4f       	sbci	r31, 0xFF	; 255
    487a:	60 81       	ld	r22, Z
    487c:	71 81       	ldd	r23, Z+1	; 0x01
    487e:	82 81       	ldd	r24, Z+2	; 0x02
    4880:	93 81       	ldd	r25, Z+3	; 0x03
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	3f ef       	ldi	r19, 0xFF	; 255
    4886:	4f e7       	ldi	r20, 0x7F	; 127
    4888:	57 e4       	ldi	r21, 0x47	; 71
    488a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    488e:	18 16       	cp	r1, r24
    4890:	0c f0       	brlt	.+2      	; 0x4894 <main+0x18e2>
    4892:	43 c0       	rjmp	.+134    	; 0x491a <main+0x1968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4894:	fe 01       	movw	r30, r28
    4896:	ef 5a       	subi	r30, 0xAF	; 175
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	60 81       	ld	r22, Z
    489c:	71 81       	ldd	r23, Z+1	; 0x01
    489e:	82 81       	ldd	r24, Z+2	; 0x02
    48a0:	93 81       	ldd	r25, Z+3	; 0x03
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	40 e2       	ldi	r20, 0x20	; 32
    48a8:	51 e4       	ldi	r21, 0x41	; 65
    48aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ae:	dc 01       	movw	r26, r24
    48b0:	cb 01       	movw	r24, r22
    48b2:	8e 01       	movw	r16, r28
    48b4:	05 5b       	subi	r16, 0xB5	; 181
    48b6:	1f 4f       	sbci	r17, 0xFF	; 255
    48b8:	bc 01       	movw	r22, r24
    48ba:	cd 01       	movw	r24, r26
    48bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	f8 01       	movw	r30, r16
    48c6:	91 83       	std	Z+1, r25	; 0x01
    48c8:	80 83       	st	Z, r24
    48ca:	1f c0       	rjmp	.+62     	; 0x490a <main+0x1958>
    48cc:	fe 01       	movw	r30, r28
    48ce:	e7 5b       	subi	r30, 0xB7	; 183
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	88 ec       	ldi	r24, 0xC8	; 200
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	91 83       	std	Z+1, r25	; 0x01
    48d8:	80 83       	st	Z, r24
    48da:	fe 01       	movw	r30, r28
    48dc:	e7 5b       	subi	r30, 0xB7	; 183
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	80 81       	ld	r24, Z
    48e2:	91 81       	ldd	r25, Z+1	; 0x01
    48e4:	01 97       	sbiw	r24, 0x01	; 1
    48e6:	f1 f7       	brne	.-4      	; 0x48e4 <main+0x1932>
    48e8:	fe 01       	movw	r30, r28
    48ea:	e7 5b       	subi	r30, 0xB7	; 183
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	91 83       	std	Z+1, r25	; 0x01
    48f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f2:	de 01       	movw	r26, r28
    48f4:	a5 5b       	subi	r26, 0xB5	; 181
    48f6:	bf 4f       	sbci	r27, 0xFF	; 255
    48f8:	fe 01       	movw	r30, r28
    48fa:	e5 5b       	subi	r30, 0xB5	; 181
    48fc:	ff 4f       	sbci	r31, 0xFF	; 255
    48fe:	80 81       	ld	r24, Z
    4900:	91 81       	ldd	r25, Z+1	; 0x01
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	11 96       	adiw	r26, 0x01	; 1
    4906:	9c 93       	st	X, r25
    4908:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    490a:	fe 01       	movw	r30, r28
    490c:	e5 5b       	subi	r30, 0xB5	; 181
    490e:	ff 4f       	sbci	r31, 0xFF	; 255
    4910:	80 81       	ld	r24, Z
    4912:	91 81       	ldd	r25, Z+1	; 0x01
    4914:	00 97       	sbiw	r24, 0x00	; 0
    4916:	d1 f6       	brne	.-76     	; 0x48cc <main+0x191a>
    4918:	27 c0       	rjmp	.+78     	; 0x4968 <main+0x19b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    491a:	8e 01       	movw	r16, r28
    491c:	05 5b       	subi	r16, 0xB5	; 181
    491e:	1f 4f       	sbci	r17, 0xFF	; 255
    4920:	fe 01       	movw	r30, r28
    4922:	e3 5b       	subi	r30, 0xB3	; 179
    4924:	ff 4f       	sbci	r31, 0xFF	; 255
    4926:	60 81       	ld	r22, Z
    4928:	71 81       	ldd	r23, Z+1	; 0x01
    492a:	82 81       	ldd	r24, Z+2	; 0x02
    492c:	93 81       	ldd	r25, Z+3	; 0x03
    492e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4932:	dc 01       	movw	r26, r24
    4934:	cb 01       	movw	r24, r22
    4936:	f8 01       	movw	r30, r16
    4938:	91 83       	std	Z+1, r25	; 0x01
    493a:	80 83       	st	Z, r24
    493c:	de 01       	movw	r26, r28
    493e:	a9 5b       	subi	r26, 0xB9	; 185
    4940:	bf 4f       	sbci	r27, 0xFF	; 255
    4942:	fe 01       	movw	r30, r28
    4944:	e5 5b       	subi	r30, 0xB5	; 181
    4946:	ff 4f       	sbci	r31, 0xFF	; 255
    4948:	80 81       	ld	r24, Z
    494a:	91 81       	ldd	r25, Z+1	; 0x01
    494c:	8d 93       	st	X+, r24
    494e:	9c 93       	st	X, r25
    4950:	fe 01       	movw	r30, r28
    4952:	e9 5b       	subi	r30, 0xB9	; 185
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	80 81       	ld	r24, Z
    4958:	91 81       	ldd	r25, Z+1	; 0x01
    495a:	01 97       	sbiw	r24, 0x01	; 1
    495c:	f1 f7       	brne	.-4      	; 0x495a <main+0x19a8>
    495e:	fe 01       	movw	r30, r28
    4960:	e9 5b       	subi	r30, 0xB9	; 185
    4962:	ff 4f       	sbci	r31, 0xFF	; 255
    4964:	91 83       	std	Z+1, r25	; 0x01
    4966:	80 83       	st	Z, r24

						/* wait 100 ms */
						_delay_ms(100);

						/* Turn off LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_OFF);
    4968:	8c e0       	ldi	r24, 0x0C	; 12
    496a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

						Local_au8Password[i] = KPD_u8GetPressedKey();
    496e:	fe 01       	movw	r30, r28
    4970:	e7 5e       	subi	r30, 0xE7	; 231
    4972:	fe 4f       	sbci	r31, 0xFE	; 254
    4974:	80 81       	ld	r24, Z
    4976:	08 2f       	mov	r16, r24
    4978:	10 e0       	ldi	r17, 0x00	; 0
    497a:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <KPD_u8GetPressedKey>
    497e:	28 2f       	mov	r18, r24
    4980:	ce 01       	movw	r24, r28
    4982:	83 5e       	subi	r24, 0xE3	; 227
    4984:	9e 4f       	sbci	r25, 0xFE	; 254
    4986:	fc 01       	movw	r30, r24
    4988:	e0 0f       	add	r30, r16
    498a:	f1 1f       	adc	r31, r17
    498c:	20 83       	st	Z, r18
					} while (Local_au8Password[i]==KPD_NO_PRESSED_KEY);
    498e:	fe 01       	movw	r30, r28
    4990:	e7 5e       	subi	r30, 0xE7	; 231
    4992:	fe 4f       	sbci	r31, 0xFE	; 254
    4994:	80 81       	ld	r24, Z
    4996:	28 2f       	mov	r18, r24
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	ce 01       	movw	r24, r28
    499c:	83 5e       	subi	r24, 0xE3	; 227
    499e:	9e 4f       	sbci	r25, 0xFE	; 254
    49a0:	fc 01       	movw	r30, r24
    49a2:	e2 0f       	add	r30, r18
    49a4:	f3 1f       	adc	r31, r19
    49a6:	80 81       	ld	r24, Z
    49a8:	8f 3f       	cpi	r24, 0xFF	; 255
    49aa:	09 f4       	brne	.+2      	; 0x49ae <main+0x19fc>
    49ac:	20 cf       	rjmp	.-448    	; 0x47ee <main+0x183c>

					CLCD_voidGoToXY(1,i);
    49ae:	fe 01       	movw	r30, r28
    49b0:	e7 5e       	subi	r30, 0xE7	; 231
    49b2:	fe 4f       	sbci	r31, 0xFE	; 254
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	60 81       	ld	r22, Z
    49b8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendData(Local_au8Password[i]);
    49bc:	fe 01       	movw	r30, r28
    49be:	e7 5e       	subi	r30, 0xE7	; 231
    49c0:	fe 4f       	sbci	r31, 0xFE	; 254
    49c2:	80 81       	ld	r24, Z
    49c4:	28 2f       	mov	r18, r24
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	ce 01       	movw	r24, r28
    49ca:	83 5e       	subi	r24, 0xE3	; 227
    49cc:	9e 4f       	sbci	r25, 0xFE	; 254
    49ce:	fc 01       	movw	r30, r24
    49d0:	e2 0f       	add	r30, r18
    49d2:	f3 1f       	adc	r31, r19
    49d4:	80 81       	ld	r24, Z
    49d6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
    49da:	fe 01       	movw	r30, r28
    49dc:	ed 5b       	subi	r30, 0xBD	; 189
    49de:	ff 4f       	sbci	r31, 0xFF	; 255
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	aa ef       	ldi	r26, 0xFA	; 250
    49e6:	b3 e4       	ldi	r27, 0x43	; 67
    49e8:	80 83       	st	Z, r24
    49ea:	91 83       	std	Z+1, r25	; 0x01
    49ec:	a2 83       	std	Z+2, r26	; 0x02
    49ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f0:	8e 01       	movw	r16, r28
    49f2:	01 5c       	subi	r16, 0xC1	; 193
    49f4:	1f 4f       	sbci	r17, 0xFF	; 255
    49f6:	fe 01       	movw	r30, r28
    49f8:	ed 5b       	subi	r30, 0xBD	; 189
    49fa:	ff 4f       	sbci	r31, 0xFF	; 255
    49fc:	60 81       	ld	r22, Z
    49fe:	71 81       	ldd	r23, Z+1	; 0x01
    4a00:	82 81       	ldd	r24, Z+2	; 0x02
    4a02:	93 81       	ldd	r25, Z+3	; 0x03
    4a04:	20 e0       	ldi	r18, 0x00	; 0
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	4a ef       	ldi	r20, 0xFA	; 250
    4a0a:	54 e4       	ldi	r21, 0x44	; 68
    4a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a10:	dc 01       	movw	r26, r24
    4a12:	cb 01       	movw	r24, r22
    4a14:	f8 01       	movw	r30, r16
    4a16:	80 83       	st	Z, r24
    4a18:	91 83       	std	Z+1, r25	; 0x01
    4a1a:	a2 83       	std	Z+2, r26	; 0x02
    4a1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a1e:	fe 01       	movw	r30, r28
    4a20:	ff 96       	adiw	r30, 0x3f	; 63
    4a22:	60 81       	ld	r22, Z
    4a24:	71 81       	ldd	r23, Z+1	; 0x01
    4a26:	82 81       	ldd	r24, Z+2	; 0x02
    4a28:	93 81       	ldd	r25, Z+3	; 0x03
    4a2a:	20 e0       	ldi	r18, 0x00	; 0
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	40 e8       	ldi	r20, 0x80	; 128
    4a30:	5f e3       	ldi	r21, 0x3F	; 63
    4a32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a36:	88 23       	and	r24, r24
    4a38:	2c f4       	brge	.+10     	; 0x4a44 <main+0x1a92>
		__ticks = 1;
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	9e af       	std	Y+62, r25	; 0x3e
    4a40:	8d af       	std	Y+61, r24	; 0x3d
    4a42:	46 c0       	rjmp	.+140    	; 0x4ad0 <main+0x1b1e>
	else if (__tmp > 65535)
    4a44:	fe 01       	movw	r30, r28
    4a46:	ff 96       	adiw	r30, 0x3f	; 63
    4a48:	60 81       	ld	r22, Z
    4a4a:	71 81       	ldd	r23, Z+1	; 0x01
    4a4c:	82 81       	ldd	r24, Z+2	; 0x02
    4a4e:	93 81       	ldd	r25, Z+3	; 0x03
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	3f ef       	ldi	r19, 0xFF	; 255
    4a54:	4f e7       	ldi	r20, 0x7F	; 127
    4a56:	57 e4       	ldi	r21, 0x47	; 71
    4a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a5c:	18 16       	cp	r1, r24
    4a5e:	64 f5       	brge	.+88     	; 0x4ab8 <main+0x1b06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a60:	fe 01       	movw	r30, r28
    4a62:	ed 5b       	subi	r30, 0xBD	; 189
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
    4a66:	60 81       	ld	r22, Z
    4a68:	71 81       	ldd	r23, Z+1	; 0x01
    4a6a:	82 81       	ldd	r24, Z+2	; 0x02
    4a6c:	93 81       	ldd	r25, Z+3	; 0x03
    4a6e:	20 e0       	ldi	r18, 0x00	; 0
    4a70:	30 e0       	ldi	r19, 0x00	; 0
    4a72:	40 e2       	ldi	r20, 0x20	; 32
    4a74:	51 e4       	ldi	r21, 0x41	; 65
    4a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	bc 01       	movw	r22, r24
    4a80:	cd 01       	movw	r24, r26
    4a82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	9e af       	std	Y+62, r25	; 0x3e
    4a8c:	8d af       	std	Y+61, r24	; 0x3d
    4a8e:	0f c0       	rjmp	.+30     	; 0x4aae <main+0x1afc>
    4a90:	88 ec       	ldi	r24, 0xC8	; 200
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	9c af       	std	Y+60, r25	; 0x3c
    4a96:	8b af       	std	Y+59, r24	; 0x3b
    4a98:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a9a:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a9c:	01 97       	sbiw	r24, 0x01	; 1
    4a9e:	f1 f7       	brne	.-4      	; 0x4a9c <main+0x1aea>
    4aa0:	9c af       	std	Y+60, r25	; 0x3c
    4aa2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4aa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    4aa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	9e af       	std	Y+62, r25	; 0x3e
    4aac:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aae:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ab0:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ab2:	00 97       	sbiw	r24, 0x00	; 0
    4ab4:	69 f7       	brne	.-38     	; 0x4a90 <main+0x1ade>
    4ab6:	16 c0       	rjmp	.+44     	; 0x4ae4 <main+0x1b32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab8:	fe 01       	movw	r30, r28
    4aba:	ff 96       	adiw	r30, 0x3f	; 63
    4abc:	60 81       	ld	r22, Z
    4abe:	71 81       	ldd	r23, Z+1	; 0x01
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	9e af       	std	Y+62, r25	; 0x3e
    4ace:	8d af       	std	Y+61, r24	; 0x3d
    4ad0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ad2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ad4:	9a af       	std	Y+58, r25	; 0x3a
    4ad6:	89 af       	std	Y+57, r24	; 0x39
    4ad8:	89 ad       	ldd	r24, Y+57	; 0x39
    4ada:	9a ad       	ldd	r25, Y+58	; 0x3a
    4adc:	01 97       	sbiw	r24, 0x01	; 1
    4ade:	f1 f7       	brne	.-4      	; 0x4adc <main+0x1b2a>
    4ae0:	9a af       	std	Y+58, r25	; 0x3a
    4ae2:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(500);
					CLCD_voidGoToXY(1,i);
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	e7 5e       	subi	r30, 0xE7	; 231
    4ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	60 81       	ld	r22, Z
    4aee:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendData('*');
    4af2:	8a e2       	ldi	r24, 0x2A	; 42
    4af4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
			}
			else if(Local_u8ReadPassword == '2')
			{
				CLCD_voidClearScreen();
				CLCD_voidSendString("Old Password:");
				for( i =0 ; i<=3 ; i++)
    4af8:	de 01       	movw	r26, r28
    4afa:	a7 5e       	subi	r26, 0xE7	; 231
    4afc:	be 4f       	sbci	r27, 0xFE	; 254
    4afe:	fe 01       	movw	r30, r28
    4b00:	e7 5e       	subi	r30, 0xE7	; 231
    4b02:	fe 4f       	sbci	r31, 0xFE	; 254
    4b04:	80 81       	ld	r24, Z
    4b06:	8f 5f       	subi	r24, 0xFF	; 255
    4b08:	8c 93       	st	X, r24
    4b0a:	fe 01       	movw	r30, r28
    4b0c:	e7 5e       	subi	r30, 0xE7	; 231
    4b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b10:	80 81       	ld	r24, Z
    4b12:	84 30       	cpi	r24, 0x04	; 4
    4b14:	08 f4       	brcc	.+2      	; 0x4b18 <main+0x1b66>
    4b16:	6b ce       	rjmp	.-810    	; 0x47ee <main+0x183c>
					CLCD_voidGoToXY(1,i);
					CLCD_voidSendData('*');
				}


				if((EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION1)==Local_au8Password[0]) &&  (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION2)==Local_au8Password[1]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION3)==Local_au8Password[2]) && (EEPROM_u8ReadeData(EEPROM_PASSWORD_LOCATION4)==Local_au8Password[3]) )
    4b18:	81 e2       	ldi	r24, 0x21	; 33
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    4b20:	9c 01       	movw	r18, r24
    4b22:	fe 01       	movw	r30, r28
    4b24:	e3 5e       	subi	r30, 0xE3	; 227
    4b26:	fe 4f       	sbci	r31, 0xFE	; 254
    4b28:	80 81       	ld	r24, Z
    4b2a:	88 2f       	mov	r24, r24
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	28 17       	cp	r18, r24
    4b30:	39 07       	cpc	r19, r25
    4b32:	09 f0       	breq	.+2      	; 0x4b36 <main+0x1b84>
    4b34:	77 c1       	rjmp	.+750    	; 0x4e24 <main+0x1e72>
    4b36:	82 e2       	ldi	r24, 0x22	; 34
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    4b3e:	9c 01       	movw	r18, r24
    4b40:	fe 01       	movw	r30, r28
    4b42:	e3 5e       	subi	r30, 0xE3	; 227
    4b44:	fe 4f       	sbci	r31, 0xFE	; 254
    4b46:	81 81       	ldd	r24, Z+1	; 0x01
    4b48:	88 2f       	mov	r24, r24
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	28 17       	cp	r18, r24
    4b4e:	39 07       	cpc	r19, r25
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <main+0x1ba2>
    4b52:	68 c1       	rjmp	.+720    	; 0x4e24 <main+0x1e72>
    4b54:	83 e2       	ldi	r24, 0x23	; 35
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    4b5c:	9c 01       	movw	r18, r24
    4b5e:	fe 01       	movw	r30, r28
    4b60:	e3 5e       	subi	r30, 0xE3	; 227
    4b62:	fe 4f       	sbci	r31, 0xFE	; 254
    4b64:	82 81       	ldd	r24, Z+2	; 0x02
    4b66:	88 2f       	mov	r24, r24
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	28 17       	cp	r18, r24
    4b6c:	39 07       	cpc	r19, r25
    4b6e:	09 f0       	breq	.+2      	; 0x4b72 <main+0x1bc0>
    4b70:	59 c1       	rjmp	.+690    	; 0x4e24 <main+0x1e72>
    4b72:	84 e2       	ldi	r24, 0x24	; 36
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	0e 94 14 16 	call	0x2c28	; 0x2c28 <EEPROM_u8ReadeData>
    4b7a:	9c 01       	movw	r18, r24
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	e3 5e       	subi	r30, 0xE3	; 227
    4b80:	fe 4f       	sbci	r31, 0xFE	; 254
    4b82:	83 81       	ldd	r24, Z+3	; 0x03
    4b84:	88 2f       	mov	r24, r24
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	28 17       	cp	r18, r24
    4b8a:	39 07       	cpc	r19, r25
    4b8c:	09 f0       	breq	.+2      	; 0x4b90 <main+0x1bde>
    4b8e:	4a c1       	rjmp	.+660    	; 0x4e24 <main+0x1e72>
				{
					CLCD_voidClearScreen();
    4b90:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
					/* Print string in LCD */
					CLCD_voidSendString("New Pass : ");
    4b94:	89 e0       	ldi	r24, 0x09	; 9
    4b96:	91 e0       	ldi	r25, 0x01	; 1
    4b98:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>

					/* Control the position (1,0) and print string in LCD  */
					CLCD_voidGoToXY(1,0);
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	60 e0       	ldi	r22, 0x00	; 0
    4ba0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendString("Just Numbers");
    4ba4:	85 e1       	ldi	r24, 0x15	; 21
    4ba6:	91 e0       	ldi	r25, 0x01	; 1
    4ba8:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>

					for( i =0; i<=3 ; i++)
    4bac:	fe 01       	movw	r30, r28
    4bae:	e7 5e       	subi	r30, 0xE7	; 231
    4bb0:	fe 4f       	sbci	r31, 0xFE	; 254
    4bb2:	10 82       	st	Z, r1
    4bb4:	2f c1       	rjmp	.+606    	; 0x4e14 <main+0x1e62>
					{

						do
						{
							Local_u8ReadPassword = KPD_u8GetPressedKey();
    4bb6:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <KPD_u8GetPressedKey>
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e5 5e       	subi	r30, 0xE5	; 229
    4bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc0:	80 83       	st	Z, r24

						} while (Local_u8ReadPassword == KPD_NO_PRESSED_KEY);
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	e5 5e       	subi	r30, 0xE5	; 229
    4bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc8:	80 81       	ld	r24, Z
    4bca:	8f 3f       	cpi	r24, 0xFF	; 255
    4bcc:	a1 f3       	breq	.-24     	; 0x4bb6 <main+0x1c04>

						CLCD_voidGoToXY(0,10+i);
    4bce:	fe 01       	movw	r30, r28
    4bd0:	e7 5e       	subi	r30, 0xE7	; 231
    4bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    4bd4:	80 81       	ld	r24, Z
    4bd6:	98 2f       	mov	r25, r24
    4bd8:	96 5f       	subi	r25, 0xF6	; 246
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	69 2f       	mov	r22, r25
    4bde:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
						/* Turn on LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_ON);
    4be2:	8e e0       	ldi	r24, 0x0E	; 14
    4be4:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	a8 ec       	ldi	r26, 0xC8	; 200
    4bee:	b2 e4       	ldi	r27, 0x42	; 66
    4bf0:	8d ab       	std	Y+53, r24	; 0x35
    4bf2:	9e ab       	std	Y+54, r25	; 0x36
    4bf4:	af ab       	std	Y+55, r26	; 0x37
    4bf6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bf8:	6d a9       	ldd	r22, Y+53	; 0x35
    4bfa:	7e a9       	ldd	r23, Y+54	; 0x36
    4bfc:	8f a9       	ldd	r24, Y+55	; 0x37
    4bfe:	98 ad       	ldd	r25, Y+56	; 0x38
    4c00:	20 e0       	ldi	r18, 0x00	; 0
    4c02:	30 e0       	ldi	r19, 0x00	; 0
    4c04:	4a ef       	ldi	r20, 0xFA	; 250
    4c06:	54 e4       	ldi	r21, 0x44	; 68
    4c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	89 ab       	std	Y+49, r24	; 0x31
    4c12:	9a ab       	std	Y+50, r25	; 0x32
    4c14:	ab ab       	std	Y+51, r26	; 0x33
    4c16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c18:	69 a9       	ldd	r22, Y+49	; 0x31
    4c1a:	7a a9       	ldd	r23, Y+50	; 0x32
    4c1c:	8b a9       	ldd	r24, Y+51	; 0x33
    4c1e:	9c a9       	ldd	r25, Y+52	; 0x34
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	40 e8       	ldi	r20, 0x80	; 128
    4c26:	5f e3       	ldi	r21, 0x3F	; 63
    4c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c2c:	88 23       	and	r24, r24
    4c2e:	2c f4       	brge	.+10     	; 0x4c3a <main+0x1c88>
		__ticks = 1;
    4c30:	81 e0       	ldi	r24, 0x01	; 1
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	98 ab       	std	Y+48, r25	; 0x30
    4c36:	8f a7       	std	Y+47, r24	; 0x2f
    4c38:	3f c0       	rjmp	.+126    	; 0x4cb8 <main+0x1d06>
	else if (__tmp > 65535)
    4c3a:	69 a9       	ldd	r22, Y+49	; 0x31
    4c3c:	7a a9       	ldd	r23, Y+50	; 0x32
    4c3e:	8b a9       	ldd	r24, Y+51	; 0x33
    4c40:	9c a9       	ldd	r25, Y+52	; 0x34
    4c42:	20 e0       	ldi	r18, 0x00	; 0
    4c44:	3f ef       	ldi	r19, 0xFF	; 255
    4c46:	4f e7       	ldi	r20, 0x7F	; 127
    4c48:	57 e4       	ldi	r21, 0x47	; 71
    4c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c4e:	18 16       	cp	r1, r24
    4c50:	4c f5       	brge	.+82     	; 0x4ca4 <main+0x1cf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c52:	6d a9       	ldd	r22, Y+53	; 0x35
    4c54:	7e a9       	ldd	r23, Y+54	; 0x36
    4c56:	8f a9       	ldd	r24, Y+55	; 0x37
    4c58:	98 ad       	ldd	r25, Y+56	; 0x38
    4c5a:	20 e0       	ldi	r18, 0x00	; 0
    4c5c:	30 e0       	ldi	r19, 0x00	; 0
    4c5e:	40 e2       	ldi	r20, 0x20	; 32
    4c60:	51 e4       	ldi	r21, 0x41	; 65
    4c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c66:	dc 01       	movw	r26, r24
    4c68:	cb 01       	movw	r24, r22
    4c6a:	bc 01       	movw	r22, r24
    4c6c:	cd 01       	movw	r24, r26
    4c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c72:	dc 01       	movw	r26, r24
    4c74:	cb 01       	movw	r24, r22
    4c76:	98 ab       	std	Y+48, r25	; 0x30
    4c78:	8f a7       	std	Y+47, r24	; 0x2f
    4c7a:	0f c0       	rjmp	.+30     	; 0x4c9a <main+0x1ce8>
    4c7c:	88 ec       	ldi	r24, 0xC8	; 200
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	9e a7       	std	Y+46, r25	; 0x2e
    4c82:	8d a7       	std	Y+45, r24	; 0x2d
    4c84:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c86:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c88:	01 97       	sbiw	r24, 0x01	; 1
    4c8a:	f1 f7       	brne	.-4      	; 0x4c88 <main+0x1cd6>
    4c8c:	9e a7       	std	Y+46, r25	; 0x2e
    4c8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c90:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c92:	98 a9       	ldd	r25, Y+48	; 0x30
    4c94:	01 97       	sbiw	r24, 0x01	; 1
    4c96:	98 ab       	std	Y+48, r25	; 0x30
    4c98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c9c:	98 a9       	ldd	r25, Y+48	; 0x30
    4c9e:	00 97       	sbiw	r24, 0x00	; 0
    4ca0:	69 f7       	brne	.-38     	; 0x4c7c <main+0x1cca>
    4ca2:	14 c0       	rjmp	.+40     	; 0x4ccc <main+0x1d1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    4ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    4ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    4caa:	9c a9       	ldd	r25, Y+52	; 0x34
    4cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	98 ab       	std	Y+48, r25	; 0x30
    4cb6:	8f a7       	std	Y+47, r24	; 0x2f
    4cb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cba:	98 a9       	ldd	r25, Y+48	; 0x30
    4cbc:	9c a7       	std	Y+44, r25	; 0x2c
    4cbe:	8b a7       	std	Y+43, r24	; 0x2b
    4cc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    4cc4:	01 97       	sbiw	r24, 0x01	; 1
    4cc6:	f1 f7       	brne	.-4      	; 0x4cc4 <main+0x1d12>
    4cc8:	9c a7       	std	Y+44, r25	; 0x2c
    4cca:	8b a7       	std	Y+43, r24	; 0x2b

						/* wait 100 ms */
						_delay_ms(100);

						/* Turn off LCD cursor */
						CLCD_voidSendCommand(LCD_CURSOR_OFF);
    4ccc:	8c e0       	ldi	r24, 0x0C	; 12
    4cce:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

						CLCD_voidSendData(Local_u8ReadPassword);
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	e5 5e       	subi	r30, 0xE5	; 229
    4cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    4cd8:	80 81       	ld	r24, Z
    4cda:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
    4cde:	80 e0       	ldi	r24, 0x00	; 0
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	aa ef       	ldi	r26, 0xFA	; 250
    4ce4:	b3 e4       	ldi	r27, 0x43	; 67
    4ce6:	8f a3       	std	Y+39, r24	; 0x27
    4ce8:	98 a7       	std	Y+40, r25	; 0x28
    4cea:	a9 a7       	std	Y+41, r26	; 0x29
    4cec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cee:	6f a1       	ldd	r22, Y+39	; 0x27
    4cf0:	78 a5       	ldd	r23, Y+40	; 0x28
    4cf2:	89 a5       	ldd	r24, Y+41	; 0x29
    4cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    4cf6:	20 e0       	ldi	r18, 0x00	; 0
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	4a ef       	ldi	r20, 0xFA	; 250
    4cfc:	54 e4       	ldi	r21, 0x44	; 68
    4cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	8b a3       	std	Y+35, r24	; 0x23
    4d08:	9c a3       	std	Y+36, r25	; 0x24
    4d0a:	ad a3       	std	Y+37, r26	; 0x25
    4d0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    4d10:	7c a1       	ldd	r23, Y+36	; 0x24
    4d12:	8d a1       	ldd	r24, Y+37	; 0x25
    4d14:	9e a1       	ldd	r25, Y+38	; 0x26
    4d16:	20 e0       	ldi	r18, 0x00	; 0
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	40 e8       	ldi	r20, 0x80	; 128
    4d1c:	5f e3       	ldi	r21, 0x3F	; 63
    4d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d22:	88 23       	and	r24, r24
    4d24:	2c f4       	brge	.+10     	; 0x4d30 <main+0x1d7e>
		__ticks = 1;
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	9a a3       	std	Y+34, r25	; 0x22
    4d2c:	89 a3       	std	Y+33, r24	; 0x21
    4d2e:	3f c0       	rjmp	.+126    	; 0x4dae <main+0x1dfc>
	else if (__tmp > 65535)
    4d30:	6b a1       	ldd	r22, Y+35	; 0x23
    4d32:	7c a1       	ldd	r23, Y+36	; 0x24
    4d34:	8d a1       	ldd	r24, Y+37	; 0x25
    4d36:	9e a1       	ldd	r25, Y+38	; 0x26
    4d38:	20 e0       	ldi	r18, 0x00	; 0
    4d3a:	3f ef       	ldi	r19, 0xFF	; 255
    4d3c:	4f e7       	ldi	r20, 0x7F	; 127
    4d3e:	57 e4       	ldi	r21, 0x47	; 71
    4d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d44:	18 16       	cp	r1, r24
    4d46:	4c f5       	brge	.+82     	; 0x4d9a <main+0x1de8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d48:	6f a1       	ldd	r22, Y+39	; 0x27
    4d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    4d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    4d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	40 e2       	ldi	r20, 0x20	; 32
    4d56:	51 e4       	ldi	r21, 0x41	; 65
    4d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	bc 01       	movw	r22, r24
    4d62:	cd 01       	movw	r24, r26
    4d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d68:	dc 01       	movw	r26, r24
    4d6a:	cb 01       	movw	r24, r22
    4d6c:	9a a3       	std	Y+34, r25	; 0x22
    4d6e:	89 a3       	std	Y+33, r24	; 0x21
    4d70:	0f c0       	rjmp	.+30     	; 0x4d90 <main+0x1dde>
    4d72:	88 ec       	ldi	r24, 0xC8	; 200
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	98 a3       	std	Y+32, r25	; 0x20
    4d78:	8f 8f       	std	Y+31, r24	; 0x1f
    4d7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d7c:	98 a1       	ldd	r25, Y+32	; 0x20
    4d7e:	01 97       	sbiw	r24, 0x01	; 1
    4d80:	f1 f7       	brne	.-4      	; 0x4d7e <main+0x1dcc>
    4d82:	98 a3       	std	Y+32, r25	; 0x20
    4d84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d86:	89 a1       	ldd	r24, Y+33	; 0x21
    4d88:	9a a1       	ldd	r25, Y+34	; 0x22
    4d8a:	01 97       	sbiw	r24, 0x01	; 1
    4d8c:	9a a3       	std	Y+34, r25	; 0x22
    4d8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d90:	89 a1       	ldd	r24, Y+33	; 0x21
    4d92:	9a a1       	ldd	r25, Y+34	; 0x22
    4d94:	00 97       	sbiw	r24, 0x00	; 0
    4d96:	69 f7       	brne	.-38     	; 0x4d72 <main+0x1dc0>
    4d98:	14 c0       	rjmp	.+40     	; 0x4dc2 <main+0x1e10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    4da0:	9e a1       	ldd	r25, Y+38	; 0x26
    4da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da6:	dc 01       	movw	r26, r24
    4da8:	cb 01       	movw	r24, r22
    4daa:	9a a3       	std	Y+34, r25	; 0x22
    4dac:	89 a3       	std	Y+33, r24	; 0x21
    4dae:	89 a1       	ldd	r24, Y+33	; 0x21
    4db0:	9a a1       	ldd	r25, Y+34	; 0x22
    4db2:	9e 8f       	std	Y+30, r25	; 0x1e
    4db4:	8d 8f       	std	Y+29, r24	; 0x1d
    4db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4db8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4dba:	01 97       	sbiw	r24, 0x01	; 1
    4dbc:	f1 f7       	brne	.-4      	; 0x4dba <main+0x1e08>
    4dbe:	9e 8f       	std	Y+30, r25	; 0x1e
    4dc0:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(500);
						CLCD_voidGoToXY(0,10+i);
    4dc2:	fe 01       	movw	r30, r28
    4dc4:	e7 5e       	subi	r30, 0xE7	; 231
    4dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc8:	80 81       	ld	r24, Z
    4dca:	98 2f       	mov	r25, r24
    4dcc:	96 5f       	subi	r25, 0xF6	; 246
    4dce:	80 e0       	ldi	r24, 0x00	; 0
    4dd0:	69 2f       	mov	r22, r25
    4dd2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
						CLCD_voidSendData('*');
    4dd6:	8a e2       	ldi	r24, 0x2A	; 42
    4dd8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <CLCD_voidSendData>
						EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
    4ddc:	fe 01       	movw	r30, r28
    4dde:	e7 5e       	subi	r30, 0xE7	; 231
    4de0:	fe 4f       	sbci	r31, 0xFE	; 254
    4de2:	80 81       	ld	r24, Z
    4de4:	88 2f       	mov	r24, r24
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	ac 01       	movw	r20, r24
    4dea:	4f 5d       	subi	r20, 0xDF	; 223
    4dec:	5f 4f       	sbci	r21, 0xFF	; 255
    4dee:	fe 01       	movw	r30, r28
    4df0:	e5 5e       	subi	r30, 0xE5	; 229
    4df2:	fe 4f       	sbci	r31, 0xFE	; 254
    4df4:	80 81       	ld	r24, Z
    4df6:	28 2f       	mov	r18, r24
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	ca 01       	movw	r24, r20
    4dfc:	b9 01       	movw	r22, r18
    4dfe:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <EEPROM_enuWriteData>

					/* Control the position (1,0) and print string in LCD  */
					CLCD_voidGoToXY(1,0);
					CLCD_voidSendString("Just Numbers");

					for( i =0; i<=3 ; i++)
    4e02:	de 01       	movw	r26, r28
    4e04:	a7 5e       	subi	r26, 0xE7	; 231
    4e06:	be 4f       	sbci	r27, 0xFE	; 254
    4e08:	fe 01       	movw	r30, r28
    4e0a:	e7 5e       	subi	r30, 0xE7	; 231
    4e0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4e0e:	80 81       	ld	r24, Z
    4e10:	8f 5f       	subi	r24, 0xFF	; 255
    4e12:	8c 93       	st	X, r24
    4e14:	fe 01       	movw	r30, r28
    4e16:	e7 5e       	subi	r30, 0xE7	; 231
    4e18:	fe 4f       	sbci	r31, 0xFE	; 254
    4e1a:	80 81       	ld	r24, Z
    4e1c:	84 30       	cpi	r24, 0x04	; 4
    4e1e:	08 f4       	brcc	.+2      	; 0x4e22 <main+0x1e70>
    4e20:	ca ce       	rjmp	.-620    	; 0x4bb6 <main+0x1c04>
    4e22:	f7 c0       	rjmp	.+494    	; 0x5012 <main+0x2060>
						EEPROM_enuWriteData(EEPROM_PASSWORD_LOCATION1+i,Local_u8ReadPassword);
					}
				}
				else
				{
					CLCD_voidClearScreen();
    4e24:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>

					/* Control the position (0,1) and print string in LCD  */
					CLCD_voidGoToXY(0,1);
    4e28:	80 e0       	ldi	r24, 0x00	; 0
    4e2a:	61 e0       	ldi	r22, 0x01	; 1
    4e2c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <CLCD_voidGoToXY>
					CLCD_voidSendString("Wrong Password");
    4e30:	82 ed       	ldi	r24, 0xD2	; 210
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
    4e38:	80 e0       	ldi	r24, 0x00	; 0
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	aa ef       	ldi	r26, 0xFA	; 250
    4e3e:	b3 e4       	ldi	r27, 0x43	; 67
    4e40:	89 8f       	std	Y+25, r24	; 0x19
    4e42:	9a 8f       	std	Y+26, r25	; 0x1a
    4e44:	ab 8f       	std	Y+27, r26	; 0x1b
    4e46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e48:	69 8d       	ldd	r22, Y+25	; 0x19
    4e4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e50:	20 e0       	ldi	r18, 0x00	; 0
    4e52:	30 e0       	ldi	r19, 0x00	; 0
    4e54:	4a ef       	ldi	r20, 0xFA	; 250
    4e56:	54 e4       	ldi	r21, 0x44	; 68
    4e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	cb 01       	movw	r24, r22
    4e60:	8d 8b       	std	Y+21, r24	; 0x15
    4e62:	9e 8b       	std	Y+22, r25	; 0x16
    4e64:	af 8b       	std	Y+23, r26	; 0x17
    4e66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e68:	6d 89       	ldd	r22, Y+21	; 0x15
    4e6a:	7e 89       	ldd	r23, Y+22	; 0x16
    4e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    4e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    4e70:	20 e0       	ldi	r18, 0x00	; 0
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	40 e8       	ldi	r20, 0x80	; 128
    4e76:	5f e3       	ldi	r21, 0x3F	; 63
    4e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e7c:	88 23       	and	r24, r24
    4e7e:	2c f4       	brge	.+10     	; 0x4e8a <main+0x1ed8>
		__ticks = 1;
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	9c 8b       	std	Y+20, r25	; 0x14
    4e86:	8b 8b       	std	Y+19, r24	; 0x13
    4e88:	3f c0       	rjmp	.+126    	; 0x4f08 <main+0x1f56>
	else if (__tmp > 65535)
    4e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    4e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    4e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e90:	98 8d       	ldd	r25, Y+24	; 0x18
    4e92:	20 e0       	ldi	r18, 0x00	; 0
    4e94:	3f ef       	ldi	r19, 0xFF	; 255
    4e96:	4f e7       	ldi	r20, 0x7F	; 127
    4e98:	57 e4       	ldi	r21, 0x47	; 71
    4e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e9e:	18 16       	cp	r1, r24
    4ea0:	4c f5       	brge	.+82     	; 0x4ef4 <main+0x1f42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea2:	69 8d       	ldd	r22, Y+25	; 0x19
    4ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4eaa:	20 e0       	ldi	r18, 0x00	; 0
    4eac:	30 e0       	ldi	r19, 0x00	; 0
    4eae:	40 e2       	ldi	r20, 0x20	; 32
    4eb0:	51 e4       	ldi	r21, 0x41	; 65
    4eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	bc 01       	movw	r22, r24
    4ebc:	cd 01       	movw	r24, r26
    4ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	9c 8b       	std	Y+20, r25	; 0x14
    4ec8:	8b 8b       	std	Y+19, r24	; 0x13
    4eca:	0f c0       	rjmp	.+30     	; 0x4eea <main+0x1f38>
    4ecc:	88 ec       	ldi	r24, 0xC8	; 200
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	9a 8b       	std	Y+18, r25	; 0x12
    4ed2:	89 8b       	std	Y+17, r24	; 0x11
    4ed4:	89 89       	ldd	r24, Y+17	; 0x11
    4ed6:	9a 89       	ldd	r25, Y+18	; 0x12
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	f1 f7       	brne	.-4      	; 0x4ed8 <main+0x1f26>
    4edc:	9a 8b       	std	Y+18, r25	; 0x12
    4ede:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    4ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    4ee4:	01 97       	sbiw	r24, 0x01	; 1
    4ee6:	9c 8b       	std	Y+20, r25	; 0x14
    4ee8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eea:	8b 89       	ldd	r24, Y+19	; 0x13
    4eec:	9c 89       	ldd	r25, Y+20	; 0x14
    4eee:	00 97       	sbiw	r24, 0x00	; 0
    4ef0:	69 f7       	brne	.-38     	; 0x4ecc <main+0x1f1a>
    4ef2:	14 c0       	rjmp	.+40     	; 0x4f1c <main+0x1f6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ef4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ef6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    4efa:	98 8d       	ldd	r25, Y+24	; 0x18
    4efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	9c 8b       	std	Y+20, r25	; 0x14
    4f06:	8b 8b       	std	Y+19, r24	; 0x13
    4f08:	8b 89       	ldd	r24, Y+19	; 0x13
    4f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    4f0c:	98 8b       	std	Y+16, r25	; 0x10
    4f0e:	8f 87       	std	Y+15, r24	; 0x0f
    4f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f12:	98 89       	ldd	r25, Y+16	; 0x10
    4f14:	01 97       	sbiw	r24, 0x01	; 1
    4f16:	f1 f7       	brne	.-4      	; 0x4f14 <main+0x1f62>
    4f18:	98 8b       	std	Y+16, r25	; 0x10
    4f1a:	8f 87       	std	Y+15, r24	; 0x0f

					/* wait 500 ms */
					_delay_ms(500);

					/* Clear LCD */
					CLCD_voidClearScreen();
    4f1c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
    4f20:	78 c0       	rjmp	.+240    	; 0x5012 <main+0x2060>
				}
			}
			else
			{
				CLCD_voidClearScreen();
    4f22:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <CLCD_voidClearScreen>
				CLCD_voidSendString("Invalid Input");
    4f26:	82 e2       	ldi	r24, 0x22	; 34
    4f28:	91 e0       	ldi	r25, 0x01	; 1
    4f2a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <CLCD_voidSendString>
    4f2e:	80 e0       	ldi	r24, 0x00	; 0
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	aa e7       	ldi	r26, 0x7A	; 122
    4f34:	b4 e4       	ldi	r27, 0x44	; 68
    4f36:	8b 87       	std	Y+11, r24	; 0x0b
    4f38:	9c 87       	std	Y+12, r25	; 0x0c
    4f3a:	ad 87       	std	Y+13, r26	; 0x0d
    4f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f46:	20 e0       	ldi	r18, 0x00	; 0
    4f48:	30 e0       	ldi	r19, 0x00	; 0
    4f4a:	4a ef       	ldi	r20, 0xFA	; 250
    4f4c:	54 e4       	ldi	r21, 0x44	; 68
    4f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f52:	dc 01       	movw	r26, r24
    4f54:	cb 01       	movw	r24, r22
    4f56:	8f 83       	std	Y+7, r24	; 0x07
    4f58:	98 87       	std	Y+8, r25	; 0x08
    4f5a:	a9 87       	std	Y+9, r26	; 0x09
    4f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f60:	78 85       	ldd	r23, Y+8	; 0x08
    4f62:	89 85       	ldd	r24, Y+9	; 0x09
    4f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	40 e8       	ldi	r20, 0x80	; 128
    4f6c:	5f e3       	ldi	r21, 0x3F	; 63
    4f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f72:	88 23       	and	r24, r24
    4f74:	2c f4       	brge	.+10     	; 0x4f80 <main+0x1fce>
		__ticks = 1;
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	9e 83       	std	Y+6, r25	; 0x06
    4f7c:	8d 83       	std	Y+5, r24	; 0x05
    4f7e:	3f c0       	rjmp	.+126    	; 0x4ffe <main+0x204c>
	else if (__tmp > 65535)
    4f80:	6f 81       	ldd	r22, Y+7	; 0x07
    4f82:	78 85       	ldd	r23, Y+8	; 0x08
    4f84:	89 85       	ldd	r24, Y+9	; 0x09
    4f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	3f ef       	ldi	r19, 0xFF	; 255
    4f8c:	4f e7       	ldi	r20, 0x7F	; 127
    4f8e:	57 e4       	ldi	r21, 0x47	; 71
    4f90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f94:	18 16       	cp	r1, r24
    4f96:	4c f5       	brge	.+82     	; 0x4fea <main+0x2038>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	40 e2       	ldi	r20, 0x20	; 32
    4fa6:	51 e4       	ldi	r21, 0x41	; 65
    4fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fac:	dc 01       	movw	r26, r24
    4fae:	cb 01       	movw	r24, r22
    4fb0:	bc 01       	movw	r22, r24
    4fb2:	cd 01       	movw	r24, r26
    4fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	9e 83       	std	Y+6, r25	; 0x06
    4fbe:	8d 83       	std	Y+5, r24	; 0x05
    4fc0:	0f c0       	rjmp	.+30     	; 0x4fe0 <main+0x202e>
    4fc2:	88 ec       	ldi	r24, 0xC8	; 200
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	9c 83       	std	Y+4, r25	; 0x04
    4fc8:	8b 83       	std	Y+3, r24	; 0x03
    4fca:	8b 81       	ldd	r24, Y+3	; 0x03
    4fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	f1 f7       	brne	.-4      	; 0x4fce <main+0x201c>
    4fd2:	9c 83       	std	Y+4, r25	; 0x04
    4fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fda:	01 97       	sbiw	r24, 0x01	; 1
    4fdc:	9e 83       	std	Y+6, r25	; 0x06
    4fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe4:	00 97       	sbiw	r24, 0x00	; 0
    4fe6:	69 f7       	brne	.-38     	; 0x4fc2 <main+0x2010>
    4fe8:	14 c0       	rjmp	.+40     	; 0x5012 <main+0x2060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fea:	6f 81       	ldd	r22, Y+7	; 0x07
    4fec:	78 85       	ldd	r23, Y+8	; 0x08
    4fee:	89 85       	ldd	r24, Y+9	; 0x09
    4ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	cb 01       	movw	r24, r22
    4ffa:	9e 83       	std	Y+6, r25	; 0x06
    4ffc:	8d 83       	std	Y+5, r24	; 0x05
    4ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    5000:	9e 81       	ldd	r25, Y+6	; 0x06
    5002:	9a 83       	std	Y+2, r25	; 0x02
    5004:	89 83       	std	Y+1, r24	; 0x01
    5006:	89 81       	ldd	r24, Y+1	; 0x01
    5008:	9a 81       	ldd	r25, Y+2	; 0x02
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	f1 f7       	brne	.-4      	; 0x500a <main+0x2058>
    500e:	9a 83       	std	Y+2, r25	; 0x02
    5010:	89 83       	std	Y+1, r24	; 0x01
	/* wait 1000 ms */
	_delay_ms(1000);

	for(;;)
	{
		while(Local_u8Flag == 0)
    5012:	fe 01       	movw	r30, r28
    5014:	e4 5e       	subi	r30, 0xE4	; 228
    5016:	fe 4f       	sbci	r31, 0xFE	; 254
    5018:	80 81       	ld	r24, Z
    501a:	88 23       	and	r24, r24
    501c:	11 f4       	brne	.+4      	; 0x5022 <main+0x2070>
    501e:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <main+0x3f0>
    5022:	f7 cf       	rjmp	.-18     	; 0x5012 <main+0x2060>

00005024 <__udivmodsi4>:
    5024:	a1 e2       	ldi	r26, 0x21	; 33
    5026:	1a 2e       	mov	r1, r26
    5028:	aa 1b       	sub	r26, r26
    502a:	bb 1b       	sub	r27, r27
    502c:	fd 01       	movw	r30, r26
    502e:	0d c0       	rjmp	.+26     	; 0x504a <__udivmodsi4_ep>

00005030 <__udivmodsi4_loop>:
    5030:	aa 1f       	adc	r26, r26
    5032:	bb 1f       	adc	r27, r27
    5034:	ee 1f       	adc	r30, r30
    5036:	ff 1f       	adc	r31, r31
    5038:	a2 17       	cp	r26, r18
    503a:	b3 07       	cpc	r27, r19
    503c:	e4 07       	cpc	r30, r20
    503e:	f5 07       	cpc	r31, r21
    5040:	20 f0       	brcs	.+8      	; 0x504a <__udivmodsi4_ep>
    5042:	a2 1b       	sub	r26, r18
    5044:	b3 0b       	sbc	r27, r19
    5046:	e4 0b       	sbc	r30, r20
    5048:	f5 0b       	sbc	r31, r21

0000504a <__udivmodsi4_ep>:
    504a:	66 1f       	adc	r22, r22
    504c:	77 1f       	adc	r23, r23
    504e:	88 1f       	adc	r24, r24
    5050:	99 1f       	adc	r25, r25
    5052:	1a 94       	dec	r1
    5054:	69 f7       	brne	.-38     	; 0x5030 <__udivmodsi4_loop>
    5056:	60 95       	com	r22
    5058:	70 95       	com	r23
    505a:	80 95       	com	r24
    505c:	90 95       	com	r25
    505e:	9b 01       	movw	r18, r22
    5060:	ac 01       	movw	r20, r24
    5062:	bd 01       	movw	r22, r26
    5064:	cf 01       	movw	r24, r30
    5066:	08 95       	ret

00005068 <__prologue_saves__>:
    5068:	2f 92       	push	r2
    506a:	3f 92       	push	r3
    506c:	4f 92       	push	r4
    506e:	5f 92       	push	r5
    5070:	6f 92       	push	r6
    5072:	7f 92       	push	r7
    5074:	8f 92       	push	r8
    5076:	9f 92       	push	r9
    5078:	af 92       	push	r10
    507a:	bf 92       	push	r11
    507c:	cf 92       	push	r12
    507e:	df 92       	push	r13
    5080:	ef 92       	push	r14
    5082:	ff 92       	push	r15
    5084:	0f 93       	push	r16
    5086:	1f 93       	push	r17
    5088:	cf 93       	push	r28
    508a:	df 93       	push	r29
    508c:	cd b7       	in	r28, 0x3d	; 61
    508e:	de b7       	in	r29, 0x3e	; 62
    5090:	ca 1b       	sub	r28, r26
    5092:	db 0b       	sbc	r29, r27
    5094:	0f b6       	in	r0, 0x3f	; 63
    5096:	f8 94       	cli
    5098:	de bf       	out	0x3e, r29	; 62
    509a:	0f be       	out	0x3f, r0	; 63
    509c:	cd bf       	out	0x3d, r28	; 61
    509e:	09 94       	ijmp

000050a0 <__epilogue_restores__>:
    50a0:	2a 88       	ldd	r2, Y+18	; 0x12
    50a2:	39 88       	ldd	r3, Y+17	; 0x11
    50a4:	48 88       	ldd	r4, Y+16	; 0x10
    50a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    50a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    50aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    50ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    50ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    50b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    50b2:	b9 84       	ldd	r11, Y+9	; 0x09
    50b4:	c8 84       	ldd	r12, Y+8	; 0x08
    50b6:	df 80       	ldd	r13, Y+7	; 0x07
    50b8:	ee 80       	ldd	r14, Y+6	; 0x06
    50ba:	fd 80       	ldd	r15, Y+5	; 0x05
    50bc:	0c 81       	ldd	r16, Y+4	; 0x04
    50be:	1b 81       	ldd	r17, Y+3	; 0x03
    50c0:	aa 81       	ldd	r26, Y+2	; 0x02
    50c2:	b9 81       	ldd	r27, Y+1	; 0x01
    50c4:	ce 0f       	add	r28, r30
    50c6:	d1 1d       	adc	r29, r1
    50c8:	0f b6       	in	r0, 0x3f	; 63
    50ca:	f8 94       	cli
    50cc:	de bf       	out	0x3e, r29	; 62
    50ce:	0f be       	out	0x3f, r0	; 63
    50d0:	cd bf       	out	0x3d, r28	; 61
    50d2:	ed 01       	movw	r28, r26
    50d4:	08 95       	ret

000050d6 <itoa>:
    50d6:	fb 01       	movw	r30, r22
    50d8:	9f 01       	movw	r18, r30
    50da:	e8 94       	clt
    50dc:	42 30       	cpi	r20, 0x02	; 2
    50de:	c4 f0       	brlt	.+48     	; 0x5110 <itoa+0x3a>
    50e0:	45 32       	cpi	r20, 0x25	; 37
    50e2:	b4 f4       	brge	.+44     	; 0x5110 <itoa+0x3a>
    50e4:	4a 30       	cpi	r20, 0x0A	; 10
    50e6:	29 f4       	brne	.+10     	; 0x50f2 <itoa+0x1c>
    50e8:	97 fb       	bst	r25, 7
    50ea:	1e f4       	brtc	.+6      	; 0x50f2 <itoa+0x1c>
    50ec:	90 95       	com	r25
    50ee:	81 95       	neg	r24
    50f0:	9f 4f       	sbci	r25, 0xFF	; 255
    50f2:	64 2f       	mov	r22, r20
    50f4:	77 27       	eor	r23, r23
    50f6:	0e 94 9c 28 	call	0x5138	; 0x5138 <__udivmodhi4>
    50fa:	80 5d       	subi	r24, 0xD0	; 208
    50fc:	8a 33       	cpi	r24, 0x3A	; 58
    50fe:	0c f0       	brlt	.+2      	; 0x5102 <itoa+0x2c>
    5100:	89 5d       	subi	r24, 0xD9	; 217
    5102:	81 93       	st	Z+, r24
    5104:	cb 01       	movw	r24, r22
    5106:	00 97       	sbiw	r24, 0x00	; 0
    5108:	a1 f7       	brne	.-24     	; 0x50f2 <itoa+0x1c>
    510a:	16 f4       	brtc	.+4      	; 0x5110 <itoa+0x3a>
    510c:	5d e2       	ldi	r21, 0x2D	; 45
    510e:	51 93       	st	Z+, r21
    5110:	10 82       	st	Z, r1
    5112:	c9 01       	movw	r24, r18
    5114:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <strrev>

00005118 <strrev>:
    5118:	dc 01       	movw	r26, r24
    511a:	fc 01       	movw	r30, r24
    511c:	67 2f       	mov	r22, r23
    511e:	71 91       	ld	r23, Z+
    5120:	77 23       	and	r23, r23
    5122:	e1 f7       	brne	.-8      	; 0x511c <strrev+0x4>
    5124:	32 97       	sbiw	r30, 0x02	; 2
    5126:	04 c0       	rjmp	.+8      	; 0x5130 <strrev+0x18>
    5128:	7c 91       	ld	r23, X
    512a:	6d 93       	st	X+, r22
    512c:	70 83       	st	Z, r23
    512e:	62 91       	ld	r22, -Z
    5130:	ae 17       	cp	r26, r30
    5132:	bf 07       	cpc	r27, r31
    5134:	c8 f3       	brcs	.-14     	; 0x5128 <strrev+0x10>
    5136:	08 95       	ret

00005138 <__udivmodhi4>:
    5138:	aa 1b       	sub	r26, r26
    513a:	bb 1b       	sub	r27, r27
    513c:	51 e1       	ldi	r21, 0x11	; 17
    513e:	07 c0       	rjmp	.+14     	; 0x514e <__udivmodhi4_ep>

00005140 <__udivmodhi4_loop>:
    5140:	aa 1f       	adc	r26, r26
    5142:	bb 1f       	adc	r27, r27
    5144:	a6 17       	cp	r26, r22
    5146:	b7 07       	cpc	r27, r23
    5148:	10 f0       	brcs	.+4      	; 0x514e <__udivmodhi4_ep>
    514a:	a6 1b       	sub	r26, r22
    514c:	b7 0b       	sbc	r27, r23

0000514e <__udivmodhi4_ep>:
    514e:	88 1f       	adc	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	5a 95       	dec	r21
    5154:	a9 f7       	brne	.-22     	; 0x5140 <__udivmodhi4_loop>
    5156:	80 95       	com	r24
    5158:	90 95       	com	r25
    515a:	bc 01       	movw	r22, r24
    515c:	cd 01       	movw	r24, r26
    515e:	08 95       	ret

00005160 <_exit>:
    5160:	f8 94       	cli

00005162 <__stop_program>:
    5162:	ff cf       	rjmp	.-2      	; 0x5162 <__stop_program>
